{"version":3,"file":"src_app_history_history_module_ts.e1c399c538a20787.js","mappings":"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","names":["TaskanaQueryParameters","SORTBY","SORTDIRECTION","NAME","NAMELIKE","DESCLIKE","OWNER","OWNERLIKE","TYPE","KEY","CREATED","WORKBASKET_KEY","KEYLIKE","PRIORITY","STATE","WORKBASKET_ID","TASK_PRIMARY_OBJ_REF_TYPE_LIKE","TASK_PRIMARY_OBJ_REF_VALUE_LIKE","REQUIREDPERMISSION","ACCESSIDS","ACCESSIDLIKE","WORKBASKETKEYLIKE","PAGE","PAGESIZE","DOMAIN","TASK_ID_LIKE","PARENT_BUSINESS_PROCESS_ID_LIKE","BUSINESS_PROCESS_ID_LIKE","EVENT_TYPE_LIKE","CREATED_LIKE","USER_ID_LIKE","POR_COMPANY_LIKE","POR_SYSTEM_LIKE","POR_INSTANCE_LIKE","POR_TYPE_LIKE","POR_VALUE_LIKE","TASK_CLASSIFICATION_KEY_LIKE","TASK_CLASSIFICATION_CATEGORY_LIKE","ATTACHMENT_CLASSIFICATION_KEY_LIKE","CUSTOM_1_LIKE","CUSTOM_2_LIKE","CUSTOM_3_LIKE","CUSTOM_4_LIKE","COMMENT_LIKE","TaskHistoryQueryService","constructor","httpClient","startupService","this","url","getTaskanaRestUrl","getTaskHistoryEvents","filterParameter","sortParameter","pagingParameter","get","asUrlQueryString","Object","getQueryParameters","orderBy","sortDirection","taskId","parentBPI","BPI","eventType","userId","domain","workbasketKey","porCompany","porSystem","porInstance","porType","porValue","taskClassificationKey","taskClassificationCategory","attachmentClassificationKey","custom1","custom2","custom3","custom4","created","allPages","parameters","QueryParameters","i0","factory","i","_disableViewStateAnimation","SORT_ANIMATION_TRANSITION","AnimationDurations","AnimationCurves","matSortAnimations","indicator","trigger","state","style","transform","transition","animate","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","MatSortHeaderIntl","changes","Subject","ɵfac","ɵprov","MAT_SORT_HEADER_INTL_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","parentIntl","MAT_SORT_DEFAULT_OPTIONS","InjectionToken","_MatSortBase","mixinInitialized","mixinDisabled","MatSort","_defaultOptions","super","sortables","Map","_stateChanges","start","_direction","sortChange","EventEmitter","direction","disableClear","_disableClear","v","coerceBooleanProperty","register","sortable","set","id","deregister","delete","sort","active","getNextSortDirection","emit","_a","_b","_c","sortDirectionCycle","sortOrder","reverse","push","getSortDirectionCycle","nextDirectionIndex","indexOf","length","ngOnInit","_markInitialized","ngOnChanges","next","ngOnDestroy","complete","ɵdir","selectors","_MatSortHeaderBase","MatSortHeader","_intl","_changeDetectorRef","_sort","_columnDef","_focusMonitor","_elementRef","_ariaDescriber","_showIndicatorHint","_viewState","_arrowDirection","_sortActionDescription","_handleStateChanges","sortActionDescription","value","_updateSortActionDescription","name","_updateArrowDirection","_setAnimationTransitionState","toState","_isSorted","_sortButton","nativeElement","querySelector","ngAfterViewInit","monitor","subscribe","origin","newState","_setIndicatorHintVisible","markForCheck","stopMonitoring","_rerenderSubscription","unsubscribe","visible","_isDisabled","fromState","viewState","_toggleOnInteraction","_handleClick","_handleKeydown","event","keyCode","SPACE","ENTER","preventDefault","_getArrowDirectionState","_getArrowViewState","disabled","_getAriaSortAttribute","_renderArrow","newDescription","removeDescription","describe","merge","i3","ɵcmp","r","attrs","directives","i4","styles","changeDetection","MatSortModule","ɵmod","ɵinj","imports","CommonModule","MatCommonModule","routes","path","component","taskHistoryQueryService","requestInProgressService","left","right","TaskHistoryQuerySortParameter","undefined","page","order","Direction","sortChange$","pipe","tap","updateSortParameter","pageParameter","pageChange$","pagination","changePage","newPage","startWith","calculateQueryPages","switchMap","setRequestInProgress","data","taskHistoryEvents","pageInformation","pair","displayedColumns","find","convertToTaskHistoryEventData","getDisplayColumns","map","totalHeight","window","innerHeight","cards","Math","round","unusedHeight","rowHeight","TaskHistoryQueryComponent","PaginationComponent","redirectTo","HistoryRoutingModule","RouterModule","HistoryModule","SharedModule","FormsModule","ReactiveFormsModule","MatTableModule"],"sourceRoot":"webpack:///","sources":["./src/app/shared/models/query-parameters.ts","./src/app/shared/util/query-parameters.ts","./src/app/history/services/task-history-query/task-history-query.service.ts","./node_modules/@angular/material/fesm2015/sort.mjs","./src/app/history/task-history-query/task-history-query.component.html","./src/app/history/history-routing.module.ts","./src/app/history/task-history-query/task-history-query.component.ts","./src/app/history/history.module.ts"],"sourcesContent":["export class QueryParameters {\r\n  SORTBY: string;\r\n  SORTDIRECTION: string;\r\n  // Filtering\r\n  NAME: string;\r\n  NAMELIKE: string;\r\n  DESCLIKE: string;\r\n  OWNER: string;\r\n  OWNERLIKE: string;\r\n  TYPE: string;\r\n  KEY: string;\r\n  WORKBASKET_KEY: string;\r\n  KEYLIKE: string;\r\n  PRIORITY: string;\r\n  STATE: string;\r\n  WORKBASKET_ID: string;\r\n  TASK_PRIMARY_OBJ_REF_TYPE_LIKE: string;\r\n  TASK_PRIMARY_OBJ_REF_VALUE_LIKE: string;\r\n  // Access\r\n  REQUIREDPERMISSION: string;\r\n  ACCESSIDS: string;\r\n  ACCESSIDLIKE: string;\r\n  WORKBASKETKEYLIKE: string;\r\n  // Pagination\r\n  PAGE: string;\r\n  PAGESIZE: string;\r\n  // Domain\r\n  DOMAIN: string;\r\n  // Task history events\r\n  TASK_ID_LIKE: string;\r\n  PARENT_BUSINESS_PROCESS_ID_LIKE: string;\r\n  BUSINESS_PROCESS_ID_LIKE: string;\r\n  EVENT_TYPE_LIKE: string;\r\n  CREATED: string;\r\n  USER_ID_LIKE: string;\r\n  POR_COMPANY_LIKE: string;\r\n  POR_SYSTEM_LIKE: string;\r\n  POR_INSTANCE_LIKE: string;\r\n  POR_TYPE_LIKE: string;\r\n  POR_VALUE_LIKE: string;\r\n  TASK_CLASSIFICATION_KEY_LIKE: string;\r\n  TASK_CLASSIFICATION_CATEGORY_LIKE: string;\r\n  ATTACHMENT_CLASSIFICATION_KEY_LIKE: string;\r\n  CUSTOM_1_LIKE: string;\r\n  CUSTOM_2_LIKE: string;\r\n  CUSTOM_3_LIKE: string;\r\n  CUSTOM_4_LIKE: string;\r\n  COMMENT_LIKE: string;\r\n}\r\n","export class TaskanaQueryParameters {\r\n  static parameters = {\r\n    // Sorting\r\n    SORTBY: 'sort-by',\r\n    SORTDIRECTION: 'order',\r\n    // Filtering\r\n    NAME: 'name',\r\n    NAMELIKE: 'name-like',\r\n    DESCLIKE: 'description-like',\r\n    OWNER: 'owner',\r\n    OWNERLIKE: 'owner-like',\r\n    TYPE: 'type',\r\n    KEY: 'key',\r\n    CREATED: 'created',\r\n    WORKBASKET_KEY: 'workbasket-key',\r\n    KEYLIKE: 'key-like',\r\n    PRIORITY: 'priority',\r\n    STATE: 'state',\r\n    WORKBASKET_ID: 'workbasket-id',\r\n    TASK_PRIMARY_OBJ_REF_TYPE_LIKE: 'por-type',\r\n    TASK_PRIMARY_OBJ_REF_VALUE_LIKE: 'por-value',\r\n    // Access\r\n    REQUIREDPERMISSION: 'required-permission',\r\n    ACCESSIDS: 'access-ids',\r\n    ACCESSIDLIKE: 'access-id-like',\r\n    WORKBASKETKEYLIKE: 'workbasket-key-like',\r\n    // Pagination\r\n    PAGE: 'page',\r\n    PAGESIZE: 'page-size',\r\n    // Domain\r\n    DOMAIN: 'domain',\r\n\r\n    // Task history events\r\n    TASK_ID_LIKE: 'task-id-like',\r\n    PARENT_BUSINESS_PROCESS_ID_LIKE: 'parent-business-process-id-like',\r\n    BUSINESS_PROCESS_ID_LIKE: 'business-process-id-like',\r\n    EVENT_TYPE_LIKE: 'event-type-like',\r\n    CREATED_LIKE: 'created-like',\r\n    USER_ID_LIKE: 'user-id-like',\r\n    POR_COMPANY_LIKE: 'por-company-like',\r\n    POR_SYSTEM_LIKE: 'por-system-like',\r\n    POR_INSTANCE_LIKE: 'por-instance-like',\r\n    POR_TYPE_LIKE: 'por-type-like',\r\n    POR_VALUE_LIKE: 'por-value-like',\r\n    TASK_CLASSIFICATION_KEY_LIKE: 'task-classification-key-like',\r\n    TASK_CLASSIFICATION_CATEGORY_LIKE: 'task-classification-category-like',\r\n    ATTACHMENT_CLASSIFICATION_KEY_LIKE: 'attachment-classification-key-like',\r\n    CUSTOM_1_LIKE: 'custom-1-like',\r\n    CUSTOM_2_LIKE: 'custom-2-like',\r\n    CUSTOM_3_LIKE: 'custom-3-like',\r\n    CUSTOM_4_LIKE: 'custom-4-like',\r\n    COMMENT_LIKE: 'comment-like'\r\n  };\r\n\r\n  static page = 1;\r\n  static pageSize = 9;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TaskHistoryEventResourceData } from 'app/shared/models/task-history-event-resource';\r\nimport { QueryParameters } from 'app/shared/models/query-parameters';\r\nimport { TaskanaQueryParameters } from 'app/shared/util/query-parameters';\r\nimport { Sorting, TaskHistoryQuerySortParameter } from 'app/shared/models/sorting';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { StartupService } from '../../../shared/services/startup/startup.service';\r\nimport { TaskHistoryQueryFilterParameter } from '../../../shared/models/task-history-query-filter-parameter';\r\nimport { QueryPagingParameter } from '../../../shared/models/query-paging-parameter';\r\nimport { asUrlQueryString } from '../../../shared/util/query-parameters-v2';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TaskHistoryQueryService {\r\n  constructor(private httpClient: HttpClient, private startupService: StartupService) {}\r\n\r\n  get url(): string {\r\n    return this.startupService.getTaskanaRestUrl();\r\n  }\r\n\r\n  getTaskHistoryEvents(\r\n    filterParameter?: TaskHistoryQueryFilterParameter,\r\n    sortParameter?: Sorting<TaskHistoryQuerySortParameter>,\r\n    pagingParameter?: QueryPagingParameter\r\n  ): Observable<TaskHistoryEventResourceData> {\r\n    return this.httpClient.get<TaskHistoryEventResourceData>(\r\n      `${this.url}/v1/task-history-event${asUrlQueryString({\r\n        ...filterParameter,\r\n        ...sortParameter,\r\n        ...pagingParameter\r\n      })}`\r\n    );\r\n  }\r\n\r\n  private getQueryParameters(\r\n    orderBy: string,\r\n    sortDirection: string,\r\n    taskId: string,\r\n    parentBPI: string,\r\n    BPI: string,\r\n    eventType: string,\r\n    userId: string,\r\n    domain: string,\r\n    workbasketKey: string,\r\n    porCompany: string,\r\n    porSystem: string,\r\n    porInstance: string,\r\n    porType: string,\r\n    porValue: string,\r\n    taskClassificationKey: string,\r\n    taskClassificationCategory: string,\r\n    attachmentClassificationKey: string,\r\n    custom1: string,\r\n    custom2: string,\r\n    custom3: string,\r\n    custom4: string,\r\n    created: string,\r\n    allPages: boolean = false\r\n  ): void {\r\n    const parameters = new QueryParameters();\r\n    parameters.SORTBY = orderBy;\r\n    parameters.SORTDIRECTION = sortDirection;\r\n    parameters.TASK_ID_LIKE = taskId;\r\n    parameters.PARENT_BUSINESS_PROCESS_ID_LIKE = parentBPI;\r\n    parameters.BUSINESS_PROCESS_ID_LIKE = BPI;\r\n    parameters.EVENT_TYPE_LIKE = eventType;\r\n    parameters.USER_ID_LIKE = userId;\r\n    parameters.DOMAIN = domain;\r\n    parameters.WORKBASKETKEYLIKE = workbasketKey;\r\n    parameters.POR_COMPANY_LIKE = porCompany;\r\n    parameters.POR_SYSTEM_LIKE = porSystem;\r\n    parameters.POR_INSTANCE_LIKE = porInstance;\r\n    parameters.POR_TYPE_LIKE = porType;\r\n    parameters.POR_VALUE_LIKE = porValue;\r\n    parameters.TASK_CLASSIFICATION_KEY_LIKE = taskClassificationKey;\r\n    parameters.TASK_CLASSIFICATION_CATEGORY_LIKE = taskClassificationCategory;\r\n    parameters.ATTACHMENT_CLASSIFICATION_KEY_LIKE = attachmentClassificationKey;\r\n    parameters.CUSTOM_1_LIKE = custom1;\r\n    parameters.CUSTOM_2_LIKE = custom2;\r\n    parameters.CUSTOM_3_LIKE = custom3;\r\n    parameters.CUSTOM_4_LIKE = custom4;\r\n    parameters.CREATED = created;\r\n\r\n    if (allPages) {\r\n      delete TaskanaQueryParameters.page;\r\n      delete TaskanaQueryParameters.pageSize;\r\n    }\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Injectable, Optional, SkipSelf, InjectionToken, EventEmitter, Directive, Inject, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { AnimationDurations, AnimationCurves, mixinInitialized, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { Subject, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, keyframes, query, animateChild } from '@angular/animations';\nimport * as i3 from '@angular/cdk/a11y';\nimport * as i4 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' + AnimationCurves.STANDARD_CURVE;\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nconst matSortAnimations = {\n    /** Animation that moves the sort indicator. */\n    indicator: trigger('indicator', [\n        state('active-asc, asc', style({ transform: 'translateY(0px)' })),\n        // 10px is the height of the sort indicator, minus the width of the pointers\n        state('active-desc, desc', style({ transform: 'translateY(10px)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n    leftPointer: trigger('leftPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(-45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n    rightPointer: trigger('rightPointer', [\n        state('active-asc, asc', style({ transform: 'rotate(45deg)' })),\n        state('active-desc, desc', style({ transform: 'rotate(-45deg)' })),\n        transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /** Animation that controls the arrow opacity. */\n    arrowOpacity: trigger('arrowOpacity', [\n        state('desc-to-active, asc-to-active, active', style({ opacity: 1 })),\n        state('desc-to-hint, asc-to-hint, hint', style({ opacity: 0.54 })),\n        state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void', style({ opacity: 0 })),\n        // Transition between all states except for immediate transitions\n        transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n        transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n    ]),\n    /**\n     * Animation for the translation of the arrow as a whole. States are separated into two\n     * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n     * peek, and active. The other states define a specific animation (source-to-destination)\n     * and are determined as a function of their prev user-perceived state and what the next state\n     * should be.\n     */\n    arrowPosition: trigger('arrowPosition', [\n        // Hidden Above => Hint Center\n        transition('* => desc-to-hint, * => desc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(-25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Below\n        transition('* => hint-to-desc, * => active-to-desc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(25%)' })]))),\n        // Hidden Below => Hint Center\n        transition('* => asc-to-hint, * => asc-to-active', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(25%)' }), style({ transform: 'translateY(0)' })]))),\n        // Hint Center => Hidden Above\n        transition('* => hint-to-asc, * => active-to-asc', animate(SORT_ANIMATION_TRANSITION, keyframes([style({ transform: 'translateY(0)' }), style({ transform: 'translateY(-25%)' })]))),\n        state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active', style({ transform: 'translateY(0)' })),\n        state('hint-to-desc, active-to-desc, desc', style({ transform: 'translateY(-25%)' })),\n        state('hint-to-asc, active-to-asc, asc', style({ transform: 'translateY(25%)' })),\n    ]),\n    /** Necessary trigger that calls animate on children animations. */\n    allowChildren: trigger('allowChildren', [\n        transition('* <=> *', [query('@*', animateChild(), { optional: true })]),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getSortDuplicateSortableIdError(id) {\n    return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n    return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n    return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n    return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nclass MatSortHeaderIntl {\n    constructor() {\n        /**\n         * Stream that emits whenever the labels here are changed. Use this to notify\n         * components if the labels have changed after initialization.\n         */\n        this.changes = new Subject();\n    }\n}\nMatSortHeaderIntl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nMatSortHeaderIntl.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeaderIntl, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n/** @docs-private */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n    return parentIntl || new MatSortHeaderIntl();\n}\n/** @docs-private */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n    // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n    provide: MatSortHeaderIntl,\n    deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n    useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY,\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nconst _MatSortBase = mixinInitialized(mixinDisabled(class {\n}));\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nclass MatSort extends _MatSortBase {\n    constructor(_defaultOptions) {\n        super();\n        this._defaultOptions = _defaultOptions;\n        /** Collection of all registered sortables that this directive manages. */\n        this.sortables = new Map();\n        /** Used to notify any child components listening to state changes. */\n        this._stateChanges = new Subject();\n        /**\n         * The direction to set when an MatSortable is initially sorted.\n         * May be overriden by the MatSortable's sort start.\n         */\n        this.start = 'asc';\n        this._direction = '';\n        /** Event emitted when the user changes either the active sort or sort direction. */\n        this.sortChange = new EventEmitter();\n    }\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        if (direction &&\n            direction !== 'asc' &&\n            direction !== 'desc' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortInvalidDirectionError(direction);\n        }\n        this._direction = direction;\n    }\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overriden by the MatSortable's disable clear input.\n     */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            if (!sortable.id) {\n                throw getSortHeaderMissingIdError();\n            }\n            if (this.sortables.has(sortable.id)) {\n                throw getSortDuplicateSortableIdError(sortable.id);\n            }\n        }\n        this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n        this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n        if (this.active != sortable.id) {\n            this.active = sortable.id;\n            this.direction = sortable.start ? sortable.start : this.start;\n        }\n        else {\n            this.direction = this.getNextSortDirection(sortable);\n        }\n        this.sortChange.emit({ active: this.active, direction: this.direction });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n        var _a, _b, _c;\n        if (!sortable) {\n            return '';\n        }\n        // Get the sort direction cycle with the potential sortable overrides.\n        const disableClear = (_b = (_a = sortable === null || sortable === void 0 ? void 0 : sortable.disableClear) !== null && _a !== void 0 ? _a : this.disableClear) !== null && _b !== void 0 ? _b : !!((_c = this._defaultOptions) === null || _c === void 0 ? void 0 : _c.disableClear);\n        let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n        // Get and return the next direction in the cycle\n        let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n        if (nextDirectionIndex >= sortDirectionCycle.length) {\n            nextDirectionIndex = 0;\n        }\n        return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n        this._markInitialized();\n    }\n    ngOnChanges() {\n        this._stateChanges.next();\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nMatSort.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, deps: [{ token: MAT_SORT_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatSort.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSort, selector: \"[matSort]\", inputs: { disabled: [\"matSortDisabled\", \"disabled\"], active: [\"matSortActive\", \"active\"], start: [\"matSortStart\", \"start\"], direction: [\"matSortDirection\", \"direction\"], disableClear: [\"matSortDisableClear\", \"disableClear\"] }, outputs: { sortChange: \"matSortChange\" }, host: { classAttribute: \"mat-sort\" }, exportAs: [\"matSort\"], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSort, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matSort]',\n                    exportAs: 'matSort',\n                    host: { 'class': 'mat-sort' },\n                    inputs: ['disabled: matSortDisabled'],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SORT_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { active: [{\n                type: Input,\n                args: ['matSortActive']\n            }], start: [{\n                type: Input,\n                args: ['matSortStart']\n            }], direction: [{\n                type: Input,\n                args: ['matSortDirection']\n            }], disableClear: [{\n                type: Input,\n                args: ['matSortDisableClear']\n            }], sortChange: [{\n                type: Output,\n                args: ['matSortChange']\n            }] } });\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n    let sortOrder = ['asc', 'desc'];\n    if (start == 'desc') {\n        sortOrder.reverse();\n    }\n    if (!disableClear) {\n        sortOrder.push('');\n    }\n    return sortOrder;\n}\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nconst _MatSortHeaderBase = mixinDisabled(class {\n});\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nclass MatSortHeader extends _MatSortHeaderBase {\n    constructor(\n    /**\n     * @deprecated `_intl` parameter isn't being used anymore and it'll be removed.\n     * @breaking-change 13.0.0\n     */\n    _intl, _changeDetectorRef, \n    // `MatSort` is not optionally injected, but just asserted manually w/ better error.\n    // tslint:disable-next-line: lightweight-tokens\n    _sort, _columnDef, _focusMonitor, _elementRef, \n    /** @breaking-change 14.0.0 _ariaDescriber will be required. */\n    _ariaDescriber) {\n        // Note that we use a string token for the `_columnDef`, because the value is provided both by\n        // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n        // and we want to avoid having the sort header depending on the CDK table because\n        // of this single reference.\n        super();\n        this._intl = _intl;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._sort = _sort;\n        this._columnDef = _columnDef;\n        this._focusMonitor = _focusMonitor;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        /**\n         * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n         * provide an affordance that the header is sortable by showing on focus and hover.\n         */\n        this._showIndicatorHint = false;\n        /**\n         * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n         * position through the animation. If animations are currently disabled, the fromState is removed\n         * so that there is no animation displayed.\n         */\n        this._viewState = {};\n        /** The direction the arrow should be facing according to the current state. */\n        this._arrowDirection = '';\n        /**\n         * Whether the view state animation should show the transition between the `from` and `to` states.\n         */\n        this._disableViewStateAnimation = false;\n        /** Sets the position of the arrow that displays when sorted. */\n        this.arrowPosition = 'after';\n        // Default the action description to \"Sort\" because it's better than nothing.\n        // Without a description, the button's label comes from the sort header text content,\n        // which doesn't give any indication that it performs a sorting operation.\n        this._sortActionDescription = 'Sort';\n        if (!_sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getSortHeaderNotContainedWithinSortError();\n        }\n        this._handleStateChanges();\n    }\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n        return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n        this._updateSortActionDescription(value);\n    }\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    get disableClear() {\n        return this._disableClear;\n    }\n    set disableClear(v) {\n        this._disableClear = coerceBooleanProperty(v);\n    }\n    ngOnInit() {\n        if (!this.id && this._columnDef) {\n            this.id = this._columnDef.name;\n        }\n        // Initialize the direction of the arrow and set the view state to be immediately that state.\n        this._updateArrowDirection();\n        this._setAnimationTransitionState({\n            toState: this._isSorted() ? 'active' : this._arrowDirection,\n        });\n        this._sort.register(this);\n        this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n        this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n        // We use the focus monitor because we also want to style\n        // things differently based on the focus origin.\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(origin => {\n            const newState = !!origin;\n            if (newState !== this._showIndicatorHint) {\n                this._setIndicatorHintVisible(newState);\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._sort.deregister(this);\n        this._rerenderSubscription.unsubscribe();\n    }\n    /**\n     * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n     * user showing what the active sort will become. If set to false, the arrow will fade away.\n     */\n    _setIndicatorHintVisible(visible) {\n        // No-op if the sort header is disabled - should not make the hint visible.\n        if (this._isDisabled() && visible) {\n            return;\n        }\n        this._showIndicatorHint = visible;\n        if (!this._isSorted()) {\n            this._updateArrowDirection();\n            if (this._showIndicatorHint) {\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'hint' });\n            }\n            else {\n                this._setAnimationTransitionState({ fromState: 'hint', toState: this._arrowDirection });\n            }\n        }\n    }\n    /**\n     * Sets the animation transition view state for the arrow's position and opacity. If the\n     * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n     * no animation appears.\n     */\n    _setAnimationTransitionState(viewState) {\n        this._viewState = viewState || {};\n        // If the animation for arrow position state (opacity/translation) should be disabled,\n        // remove the fromState so that it jumps right to the toState.\n        if (this._disableViewStateAnimation) {\n            this._viewState = { toState: viewState.toState };\n        }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n        this._sort.sort(this);\n        // Do not show the animation if the header was already shown in the right position.\n        if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = true;\n        }\n    }\n    _handleClick() {\n        if (!this._isDisabled()) {\n            this._sort.sort(this);\n        }\n    }\n    _handleKeydown(event) {\n        if (!this._isDisabled() && (event.keyCode === SPACE || event.keyCode === ENTER)) {\n            event.preventDefault();\n            this._toggleOnInteraction();\n        }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n        return (this._sort.active == this.id &&\n            (this._sort.direction === 'asc' || this._sort.direction === 'desc'));\n    }\n    /** Returns the animation state for the arrow direction (indicator and pointers). */\n    _getArrowDirectionState() {\n        return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n    }\n    /** Returns the arrow position state (opacity, translation). */\n    _getArrowViewState() {\n        const fromState = this._viewState.fromState;\n        return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n    }\n    /**\n     * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n     * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n     * active sorted direction. The reason this is updated through a function is because the direction\n     * should only be changed at specific times - when deactivated but the hint is displayed and when\n     * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n     * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n     * preserving its direction, even though the next sort direction is actually different and should\n     * only be changed once the arrow displays again (hint or activation).\n     */\n    _updateArrowDirection() {\n        this._arrowDirection = this._isSorted() ? this._sort.direction : this.start || this._sort.start;\n    }\n    _isDisabled() {\n        return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n        if (!this._isSorted()) {\n            return 'none';\n        }\n        return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n        return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n        var _a, _b;\n        // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n        // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n        // for every *cell* in the table, creating a lot of unnecessary noise.\n        // If _sortButton is undefined, the component hasn't been initialized yet so there's\n        // nothing to update in the DOM.\n        if (this._sortButton) {\n            // removeDescription will no-op if there is no existing message.\n            // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n            (_a = this._ariaDescriber) === null || _a === void 0 ? void 0 : _a.removeDescription(this._sortButton, this._sortActionDescription);\n            (_b = this._ariaDescriber) === null || _b === void 0 ? void 0 : _b.describe(this._sortButton, newDescription);\n        }\n        this._sortActionDescription = newDescription;\n    }\n    /** Handles changes in the sorting state. */\n    _handleStateChanges() {\n        this._rerenderSubscription = merge(this._sort.sortChange, this._sort._stateChanges, this._intl.changes).subscribe(() => {\n            if (this._isSorted()) {\n                this._updateArrowDirection();\n                // Do not show the animation if the header was already shown in the right position.\n                if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n                    this._disableViewStateAnimation = true;\n                }\n                this._setAnimationTransitionState({ fromState: this._arrowDirection, toState: 'active' });\n                this._showIndicatorHint = false;\n            }\n            // If this header was recently active and now no longer sorted, animate away the arrow.\n            if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n                this._disableViewStateAnimation = false;\n                this._setAnimationTransitionState({ fromState: 'active', toState: this._arrowDirection });\n            }\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n}\nMatSortHeader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, deps: [{ token: MatSortHeaderIntl }, { token: i0.ChangeDetectorRef }, { token: MatSort, optional: true }, { token: 'MAT_SORT_HEADER_COLUMN_DEF', optional: true }, { token: i3.FocusMonitor }, { token: i0.ElementRef }, { token: i3.AriaDescriber, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatSortHeader.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSortHeader, selector: \"[mat-sort-header]\", inputs: { disabled: \"disabled\", id: [\"mat-sort-header\", \"id\"], arrowPosition: \"arrowPosition\", start: \"start\", sortActionDescription: \"sortActionDescription\", disableClear: \"disableClear\" }, host: { listeners: { \"click\": \"_handleClick()\", \"keydown\": \"_handleKeydown($event)\", \"mouseenter\": \"_setIndicatorHintVisible(true)\", \"mouseleave\": \"_setIndicatorHintVisible(false)\" }, properties: { \"attr.aria-sort\": \"_getAriaSortAttribute()\", \"class.mat-sort-header-disabled\": \"_isDisabled()\" }, classAttribute: \"mat-sort-header\" }, exportAs: [\"matSortHeader\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"], directives: [{ type: i4.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        matSortAnimations.indicator,\n        matSortAnimations.leftPointer,\n        matSortAnimations.rightPointer,\n        matSortAnimations.arrowOpacity,\n        matSortAnimations.arrowPosition,\n        matSortAnimations.allowChildren,\n    ], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortHeader, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-sort-header]', exportAs: 'matSortHeader', host: {\n                        'class': 'mat-sort-header',\n                        '(click)': '_handleClick()',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(mouseenter)': '_setIndicatorHintVisible(true)',\n                        '(mouseleave)': '_setIndicatorHintVisible(false)',\n                        '[attr.aria-sort]': '_getAriaSortAttribute()',\n                        '[class.mat-sort-header-disabled]': '_isDisabled()',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, inputs: ['disabled'], animations: [\n                        matSortAnimations.indicator,\n                        matSortAnimations.leftPointer,\n                        matSortAnimations.rightPointer,\n                        matSortAnimations.arrowOpacity,\n                        matSortAnimations.arrowPosition,\n                        matSortAnimations.allowChildren,\n                    ], template: \"<!--\\n  We set the `tabindex` on an element inside the table header, rather than the header itself,\\n  because of a bug in NVDA where having a `tabindex` on a `th` breaks keyboard navigation in the\\n  table (see https://github.com/nvaccess/nvda/issues/7718). This allows for the header to both\\n  be focusable, and have screen readers read out its `aria-sort` state. We prefer this approach\\n  over having a button with an `aria-label` inside the header, because the button's `aria-label`\\n  will be read out as the user is navigating the table's cell (see #13012).\\n\\n  The approach is based off of: https://dequeuniversity.com/library/aria/tables/sf-sortable-grid\\n-->\\n<div class=\\\"mat-sort-header-container mat-focus-indicator\\\"\\n     [class.mat-sort-header-sorted]=\\\"_isSorted()\\\"\\n     [class.mat-sort-header-position-before]=\\\"arrowPosition == 'before'\\\"\\n     [attr.tabindex]=\\\"_isDisabled() ? null : 0\\\"\\n     [attr.role]=\\\"_isDisabled() ? null : 'button'\\\">\\n\\n  <!--\\n    TODO(crisbeto): this div isn't strictly necessary, but we have to keep it due to a large\\n    number of screenshot diff failures. It should be removed eventually. Note that the difference\\n    isn't visible with a shorter header, but once it breaks up into multiple lines, this element\\n    causes it to be center-aligned, whereas removing it will keep the text to the left.\\n  -->\\n  <div class=\\\"mat-sort-header-content\\\">\\n    <ng-content></ng-content>\\n  </div>\\n\\n  <!-- Disable animations while a current animation is running -->\\n  <div class=\\\"mat-sort-header-arrow\\\"\\n       *ngIf=\\\"_renderArrow()\\\"\\n       [@arrowOpacity]=\\\"_getArrowViewState()\\\"\\n       [@arrowPosition]=\\\"_getArrowViewState()\\\"\\n       [@allowChildren]=\\\"_getArrowDirectionState()\\\"\\n       (@arrowPosition.start)=\\\"_disableViewStateAnimation = true\\\"\\n       (@arrowPosition.done)=\\\"_disableViewStateAnimation = false\\\">\\n    <div class=\\\"mat-sort-header-stem\\\"></div>\\n    <div class=\\\"mat-sort-header-indicator\\\" [@indicator]=\\\"_getArrowDirectionState()\\\">\\n      <div class=\\\"mat-sort-header-pointer-left\\\" [@leftPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-right\\\" [@rightPointer]=\\\"_getArrowDirectionState()\\\"></div>\\n      <div class=\\\"mat-sort-header-pointer-middle\\\"></div>\\n    </div>\\n  </div>\\n</div>\\n\", styles: [\".mat-sort-header-container{display:flex;cursor:pointer;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-disabled .mat-sort-header-container{cursor:default}.mat-sort-header-content{text-align:center;display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}.mat-sort-header-arrow{height:12px;width:12px;min-width:12px;position:relative;display:flex;opacity:0}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}.mat-sort-header-stem{background:currentColor;height:10px;width:2px;margin:auto;display:flex;align-items:center}.cdk-high-contrast-active .mat-sort-header-stem{width:0;border-left:solid 2px}.mat-sort-header-indicator{width:100%;height:2px;display:flex;align-items:center;position:absolute;top:0;left:0}.mat-sort-header-pointer-middle{margin:auto;height:2px;width:2px;background:currentColor;transform:rotate(45deg)}.cdk-high-contrast-active .mat-sort-header-pointer-middle{width:0;height:0;border-top:solid 2px;border-left:solid 2px}.mat-sort-header-pointer-left,.mat-sort-header-pointer-right{background:currentColor;width:6px;height:2px;position:absolute;top:0}.cdk-high-contrast-active .mat-sort-header-pointer-left,.cdk-high-contrast-active .mat-sort-header-pointer-right{width:0;height:0;border-left:solid 6px;border-top:solid 2px}.mat-sort-header-pointer-left{transform-origin:right;left:0}.mat-sort-header-pointer-right{transform-origin:left;right:0}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: MatSortHeaderIntl }, { type: i0.ChangeDetectorRef }, { type: MatSort, decorators: [{\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: ['MAT_SORT_HEADER_COLUMN_DEF']\n                    }, {\n                        type: Optional\n                    }] }, { type: i3.FocusMonitor }, { type: i0.ElementRef }, { type: i3.AriaDescriber, decorators: [{\n                        type: Optional\n                    }] }];\n    }, propDecorators: { id: [{\n                type: Input,\n                args: ['mat-sort-header']\n            }], arrowPosition: [{\n                type: Input\n            }], start: [{\n                type: Input\n            }], sortActionDescription: [{\n                type: Input\n            }], disableClear: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSortModule {\n}\nMatSortModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSortModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, declarations: [MatSort, MatSortHeader], imports: [CommonModule, MatCommonModule], exports: [MatSort, MatSortHeader] });\nMatSortModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, providers: [MAT_SORT_HEADER_INTL_PROVIDER], imports: [[CommonModule, MatCommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSortModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule],\n                    exports: [MatSort, MatSortHeader],\n                    declarations: [MatSort, MatSortHeader],\n                    providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n","<div class=\"task-history-query\">\r\n  <table mat-table [dataSource]=\"data\"\r\n         matSort matSortActive=\"created\" matSortDisableClear matSortDirection=\"asc\">\r\n\r\n    <ng-container matColumnDef=\"parentBusinessProcessId\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Parent BPI</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).parentBusinessProcessId}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"businessProcessId\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>BPI</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).businessProcessId}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"taskId\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Task Id</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).taskId}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"eventType\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Event type</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).eventType}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"created\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Created</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).created | germanTimeFormat}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"userId\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>User Id</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).userId}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"domain\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Domain</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).domain}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"workbasketKey\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Workbasket key</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).workbasketKey}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"porCompany\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Obj company</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).porCompany}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"porSystem\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Obj system</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).porSystem}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"porInstance\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Obj instance</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).porInstance}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"porType\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Obj type</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).porType}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"porValue\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Obj value</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).porValue}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"taskClassificationKey\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Classification key</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).taskClassificationKey}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"taskClassificationCategory\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Classification category</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).taskClassificationCategory}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"attachmentClassificationKey\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Attachment Classification Key</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).attachmentClassificationKey}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"custom1\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Custom 1</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).custom1}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"custom2\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Custom 2</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).custom2}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"custom3\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Custom 3</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).custom3}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"custom4\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header disableClear>Custom 4</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).custom4}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"oldData\">\r\n      <th mat-header-cell *matHeaderCellDef>Old data</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).oldData}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"newData\">\r\n      <th mat-header-cell *matHeaderCellDef>New data</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).newData}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"comment\">\r\n      <th mat-header-cell *matHeaderCellDef>Comment</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).comment}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"oldValue\">\r\n      <th mat-header-cell *matHeaderCellDef>Old value</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).oldValue}}</td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"newValue\">\r\n      <th mat-header-cell *matHeaderCellDef>New value</th>\r\n      <td mat-cell *matCellDef=\"let element\">{{convertToTaskHistoryEventData(element).newValue}}</td>\r\n    </ng-container>\r\n\r\n\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"getDisplayColumns()\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: getDisplayColumns()\"></tr>\r\n  </table>\r\n\r\n  <div class=\"task-history-query__pagination-wrapper\">\r\n    <taskana-shared-pagination [numberOfItems]=\"data.length\"\r\n                               [page]=\"pageInformation\"></taskana-shared-pagination>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TaskHistoryQueryComponent } from './task-history-query/task-history-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TaskHistoryQueryComponent\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class HistoryRoutingModule {}\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { Direction, Sorting, TaskHistoryQuerySortParameter } from 'app/shared/models/sorting';\r\nimport { TaskHistoryEventData } from '../../shared/models/task-history-event';\r\nimport { TaskHistoryQueryService } from '../services/task-history-query/task-history-query.service';\r\nimport { Page } from '../../shared/models/page';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { QueryPagingParameter } from '../../shared/models/query-paging-parameter';\r\nimport { PaginationComponent } from '../../shared/components/pagination/pagination.component';\r\nimport { merge } from 'rxjs';\r\nimport { startWith, switchMap, tap } from 'rxjs/operators';\r\nimport { RequestInProgressService } from '../../shared/services/request-in-progress/request-in-progress.service';\r\nimport { Pair } from '../../shared/models/pair';\r\n\r\n@Component({\r\n  selector: 'taskana-task-query',\r\n  templateUrl: './task-history-query.component.html',\r\n  styleUrls: ['./task-history-query.component.scss']\r\n})\r\nexport class TaskHistoryQueryComponent implements OnInit {\r\n  data: TaskHistoryEventData[] = [];\r\n  displayedColumns: Pair<string, TaskHistoryQuerySortParameter>[] = [\r\n    { left: 'parentBusinessProcessId', right: TaskHistoryQuerySortParameter.PARENT_BUSINESS_PROCESS_ID },\r\n    { left: 'businessProcessId', right: TaskHistoryQuerySortParameter.BUSINESS_PROCESS_ID },\r\n    { left: 'created', right: TaskHistoryQuerySortParameter.CREATED },\r\n    { left: 'userId', right: TaskHistoryQuerySortParameter.USER_ID },\r\n    { left: 'eventType', right: TaskHistoryQuerySortParameter.EVENT_TYPE },\r\n    { left: 'workbasketKey', right: TaskHistoryQuerySortParameter.WORKBASKET_KEY },\r\n    { left: 'porType', right: TaskHistoryQuerySortParameter.POR_TYPE },\r\n    { left: 'porValue', right: TaskHistoryQuerySortParameter.POR_VALUE },\r\n    { left: 'domain', right: TaskHistoryQuerySortParameter.DOMAIN },\r\n    { left: 'taskId', right: TaskHistoryQuerySortParameter.TASK_ID },\r\n    { left: 'porCompany', right: TaskHistoryQuerySortParameter.POR_COMPANY },\r\n    { left: 'porSystem', right: TaskHistoryQuerySortParameter.POR_SYSTEM },\r\n    { left: 'porInstance', right: TaskHistoryQuerySortParameter.POR_INSTANCE },\r\n    { left: 'taskClassificationKey', right: TaskHistoryQuerySortParameter.TASK_CLASSIFICATION_KEY },\r\n    { left: 'taskClassificationCategory', right: TaskHistoryQuerySortParameter.TASK_CLASSIFICATION_CATEGORY },\r\n    { left: 'attachmentClassificationKey', right: TaskHistoryQuerySortParameter.ATTACHMENT_CLASSIFICATION_KEY },\r\n    { left: 'custom1', right: TaskHistoryQuerySortParameter.CUSTOM_1 },\r\n    { left: 'custom2', right: TaskHistoryQuerySortParameter.CUSTOM_2 },\r\n    { left: 'custom3', right: TaskHistoryQuerySortParameter.CUSTOM_3 },\r\n    { left: 'custom4', right: TaskHistoryQuerySortParameter.CUSTOM_4 },\r\n    { left: 'comment', right: undefined },\r\n    { left: 'oldValue', right: undefined },\r\n    { left: 'newValue', right: undefined },\r\n    { left: 'oldData', right: undefined },\r\n    { left: 'newData', right: undefined }\r\n  ];\r\n  pageInformation: Page;\r\n\r\n  pageParameter: QueryPagingParameter = {\r\n    page: 1,\r\n    'page-size': 9\r\n  };\r\n\r\n  // IMPORTANT: Please make sure that material table default matches with this entity.\r\n  sortParameter: Sorting<TaskHistoryQuerySortParameter> = {\r\n    'sort-by': TaskHistoryQuerySortParameter.CREATED,\r\n    order: Direction.ASC\r\n  };\r\n\r\n  @ViewChild(MatSort) sort: MatSort;\r\n  @ViewChild(PaginationComponent) pagination: PaginationComponent;\r\n\r\n  constructor(\r\n    private taskHistoryQueryService: TaskHistoryQueryService,\r\n    private requestInProgressService: RequestInProgressService\r\n  ) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  ngAfterViewInit() {\r\n    const sortChange$ = this.sort.sortChange.pipe(\r\n      tap((sort) => this.updateSortParameter(sort)),\r\n      tap(() => (this.pageParameter.page = 1))\r\n    );\r\n\r\n    const pageChange$ = this.pagination.changePage.pipe(tap((newPage) => (this.pageParameter.page = newPage)));\r\n\r\n    merge(sortChange$, pageChange$)\r\n      .pipe(\r\n        startWith({}),\r\n        tap(() => this.calculateQueryPages()),\r\n        switchMap(() => {\r\n          this.requestInProgressService.setRequestInProgress(true);\r\n          return this.taskHistoryQueryService.getTaskHistoryEvents(undefined, this.sortParameter, this.pageParameter);\r\n        })\r\n      )\r\n      .subscribe((data) => {\r\n        this.data = data.taskHistoryEvents;\r\n        this.pageInformation = data.page;\r\n        this.requestInProgressService.setRequestInProgress(false);\r\n      });\r\n  }\r\n\r\n  updateSortParameter(sort: Sort): void {\r\n    if (sort) {\r\n      const pair: Pair<string, TaskHistoryQuerySortParameter> = this.displayedColumns.find(\r\n        (pair) => pair.left === sort.active\r\n      );\r\n      if (pair) {\r\n        this.sortParameter = {\r\n          'sort-by': pair.right,\r\n          order: sort.direction === 'asc' ? Direction.ASC : Direction.DESC\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  // this is a workaround so that the variables inside the html will be resolved correctly.\r\n  // more details: https://stackoverflow.com/a/64448113/6501286\r\n  convertToTaskHistoryEventData(data: TaskHistoryEventData): TaskHistoryEventData {\r\n    return data;\r\n  }\r\n\r\n  getDisplayColumns(): string[] {\r\n    return this.displayedColumns.map((pair) => pair.left);\r\n  }\r\n\r\n  private calculateQueryPages() {\r\n    const rowHeight = 48;\r\n    const unusedHeight = 300;\r\n    const totalHeight = window.innerHeight;\r\n    const cards = Math.round((totalHeight - unusedHeight) / rowHeight);\r\n    this.pageParameter['page-size'] = cards > 0 ? cards : 1;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { HistoryRoutingModule } from './history-routing.module';\r\nimport { TaskHistoryQueryComponent } from './task-history-query/task-history-query.component';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatSortModule } from '@angular/material/sort';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HistoryRoutingModule,\r\n    SharedModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatTableModule,\r\n    MatSortModule\r\n  ],\r\n  declarations: [TaskHistoryQueryComponent]\r\n})\r\nexport class HistoryModule {}\r\n"]}