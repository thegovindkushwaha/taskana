{"version":3,"file":"src_app_administration_administration_module_ts.7a62ba6a62b15cac.js","mappings":"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","names":["InfiniteScrollModule","ɵfac","ɵmod","i0","ɵinj","imports","ctx_r2","oxw","constructor","store","location","this","select","value","dispatch","SetSelectedClassificationType","go","path","replace","ClassificationTypesSelectorComponent","selectors","__decorate","Select","ClassificationSelectors","ke","Observable","B","amount","map","customisation","Array","keys","x","field","visible","static","state","groups","permissions","Selector","AccessItemsManagementState","dt","ctx_r45","ctx_r47","ctx_r49","ctx_r50","formBuilder","formsValidatorService","notificationService","dialog","WorkbasketAccessItemQuerySortParameter","WORKBASKET_ACCESS_ITEM_SORT_PARAMETER_NAMING","defaultSortBy","order","Direction","Subject","ngOnInit","groups$","pipe","takeUntil","destroy$","subscribe","permissions$","onSelectAccessId","selected","accessId","accessIdPrevious","accessIdName","name","GetGroupsByAccessId","searchForAccessItemsWorkbaskets","GetPermissionsByAccessId","accessItemsForm","customFields$","accessItemsCustomization$","getCustomFields","customFieldCount","removeFocus","filterParameter","a","GetAccessItems","sortModel","setAccessItemsGroups","accessItemsManagement","accessItemsResource","accessItems","setAccessItemsPermissions","AccessItemsFormGroups","accessItem","group","forEach","accessItemGroup","controls","setValidators","Validators","Object","key","disable","AccessItemsFormArray","array","setControl","workbasketKeyFilter","addControl","FormControl","accessIdFilter","filterAccessItems","AccessItemsFormPermissions","accessItemPermission","filter","accessName","toLowerCase","includes","workbasketKey","revokeAccess","showDialog","RemoveAccessItemsPermissions","accessItemsGroups","get","accessItemsPermissions","isFieldValid","index","sorting","sort","document","activeElement","HTMLElement","focus","clearFilter","patchValue","ngOnDestroy","next","complete","AccessItemsManagementComponent","ctx","EngineConfigurationSelectors","ne","H","AccessItemsManagementSelector","TaskanaType","ImportExportService","setImportingFinished","importingFinished","getImportingFinished","asObservable","factory","object","fileName","saveAs","Blob","JSON","stringify","type","ClassificationDefinitionService","httpClient","startupService","url","getTaskanaRestUrl","exportClassifications","domain","classificationDefObservable","take","classificationDefinitions","BlobGenerator","TaskanaDate","importClassification","file","formData","FormData","append","headers","HttpHeaders","set","post","WorkbasketDefinitionService","exportWorkbaskets","workbasketDefObservable","workbasketDefinitions","importWorkbasket","ctx_r4","ImportExportComponent","domainService","workbasketDefinitionService","classificationDefinitionService","importExportService","hotToastService","domains$","getDomains","export","currentSelection","uploadFile","selectedFileInput","nativeElement","files","checkFormatFile","observe","loading","success","error","resetProgress","check","match","showError","_r0","MAs","ctx_r8","ctx_r10","requestInProgressService","ngxsActions$","ofActionDispatched","GetClassifications","setRequestInProgress","ofActionCompleted","classifications$","classifications","classificationTypeSelected$","selectedCategory","getSelectedDomain","getRequestInProgress","requestInProgress","addClassification","CreateClassification","getCategoryIcon","category","categoryIcons$","iconMap","left","all","right","missing","selectCategory","ClassificationListComponent","yt","E","ctx_r18","ctx_r20","ctx_r28","$event","ctx_r31","ctx_r33","ctx_r35","ctx_r36","ctx_r37","ctx_r39","ctx_r41","ctx_r43","ctx_r46","notificationsService","Map","information","selectedClassification$","classification","isCreatingNewClassification","classificationId","SelectClassification","inputOverflowObservable","inputOverflowMap","validateInputOverflow","inputFieldModel","maxLength","classificationForm","onSubmit","formSubmitAttempt","trimForm","validateFormInformation","toggleValidationMap","then","onSave","onRestore","RestoreSelectedClassification","showSuccess","onCopy","CopyClassification","onCloseClassification","DeselectClassification","validChanged","isValidInDomain","masterDomainSelected","getSelectedDomainValue","getClassificationCustom","customNumber","i","SaveCreatedClassification","classificationKey","selectedClassification","afterRequest","SaveModifiedClassification","onRemoveClassification","removeClassificationConfirmation","bind","RemoveSelectedClassification","ClassificationDetailsComponent","highlight","Zt","q","route","firstChild","params","routerParams","id","showDetail","indexOf","ClassificationOverviewComponent","V","workbasketService","EventEmitter","WORKBASKET_SORT_PARAMETER_NAMING","workbasketActiveAction$","action","performSorting","emit","addWorkbasket","ACTION","CreateWorkbasket","onClickFilter","isExpanded","expandWorkbasketActionToolbar","WorkbasketListToolbarComponent","expandDown","WorkbasketSelectors","it","ctx_r11","orientationService","WorkbasketQuerySortParameter","workbasketDefaultSortBy","page","GetWorkbasketsSummary","requestInProgressLocal","selectedWorkbasket$","selectedWorkbasket","selectedId","workbasketId","undefined","workbasketSavedTriggered","performRequest","getOrientation","refreshWorkbasketList","filterBy","getWorkbasketActionToolbarExpansion","setTimeout","getWorkbasketListFilter$","performFilter","selectWorkbasket","DeselectWorkbasket","SelectWorkbasket","resetPagingSubject","changePage","pageParameter","calculateNumberItemsList","window","innerHeight","toolbarElement","offsetHeight","WorkbasketListComponent","Qt","W","FilterSelectors","TimeoutError","createErrorClass","_super","info","message","config","schedulerArg","first","each","with","_with","timeoutErrorFactory","scheduler","asyncScheduler","meta","isValidDate","TypeError","operate","source","subscriber","originalSourceSubscription","timerSubscription","lastValue","seen","startTimer","delay","executeSchedule","unsubscribe","innerFrom","err","createOperatorSubscriber","closed","now","ctx_r24","ctx_r29","ctx_r48","ctx_r51","ctx_r53","ctx_r55","ctx_r57","allTypes","workbasketsCustomisation$","workbasketsCustomization","owner","lookupField","buttonAction$","buttonAction","button","ButtonAction","onUndo","removeDistributionTargets","removeWorkbasket","ngOnChanges","changes","workbasketClone","workbasket","workbasketForm","isOwnerValid","onRemoveConfirmed","RemoveDistributionTarget","_links","href","beforeRequest","UpdateWorkbasket","self","cloneDeep","postNewWorkbasket","triggerWorkBasketSaved","addDateToWorkbasket","SaveNewWorkbasket","date","created","modified","MarkWorkbasketForDeletion","onSelectedOwner","getWorkbasketCustomProperty","custom","WorkbasketInformationComponent","me","G","ctx_r12","ctx_r21","ctx_r26","ctx_r30","ctx_r32","ctx_r34","ctx_r38","AccessItemsForm","init","selectedComponent$","component","isAccessItemsTabSelected","tap","customFields","createWorkbasketAccessItems","keysOfVisibleFields","push","accessItemsRepresentation$","accessItemsRepresentation","sortAccessItems","accessItemsClone","cloneAccessItems","accessItemsResetClone","isNewAccessItemsFromStore","setWorkbasketIdForCopy","validateFormAccess","toggleValidationAccessIdMap","clear","ngAfterViewInit","inputs","last","added","ngAfterViewChecked","getElementById","row","setSelectAllCheckbox","currentTarget","checked","_a","GetWorkbasketAccessItems","sortBy","b","accessItemId","permRead","permOpen","permAppend","permTransfer","permDistribute","permReadTasks","permEditTasks","permCustom1","permCustom2","permCustom3","permCustom4","permCustom5","permCustom6","permCustom7","permCustom8","permCustom9","permCustom10","permCustom11","permCustom12","addAccessItem","workbasketAccessItems","newForm","insert","unshift","OnButtonPressed","reset","UpdateWorkbasketAccessItems","accessItemSelected","setValue","checkAll","target","areAllCheckboxesSelected","element","getAccessItemCustomProperty","selectRow","selectedRows","number","deleteAccessItems","removeAt","splice","WorkbasketAccessItemsComponent","St","R","defaultThrottleConfig","leading","trailing","ctx_r13","workbasket_r11","changeDetector","side","Side","availableDistributionTargets$","wbs","assignWbs","availableDistributionTargetsFilter$","isEqual","FetchAvailableDistributionTargets","selectAll","workbasketDistributionTargets$","selectedDistributionTargetsFilter$","applyFilter","transferDistributionTargetObservable","targetSide","transferDistributionTargets","ngAfterContentChecked","detectChanges","e","allSelected","currentValue","workbasketList","elementScrolled","measureScrollOffset","pairwise","y1","y2","duration","duration$","timer","durationSelector","hasValue","sendValue","throttled","isComplete","endThrottling","send","cleanupThrottling","startThrottle","throttle","throttleTime","FetchWorkbasketDistributionTargets","distributionTargetsList","distributionTargets","wb","allSelectedDiff","length","selectedWBs","item","TransferDistributionTargets","changeToolbarState","toolbarState","updateSelectAll","distributionTargetsClone","filterStrings","attribute","str","ret","filterElement","matches","filterExact","filterLike","WorkbasketDistributionTargetsListComponent","Gt","J","ctx_r6","ctx_r15","ctx_r16","n","_b","onClear","toggleDistributionTargetsPicker","displayingDistributionTargetsPicker","UpdateWorkbasketDistributionTargets","moveDistributionTargets","forkJoin","ClearWorkbasketFilter","toggleSideBySideView","sideBySide","WorkbasketDistributionTargetsComponent","He","z","router","getWorkbasketFromStore","selectedWorkbasketAndComponentAndAction$","ofActionSuccessful","timeout","catchError","of","val","selectComponent","SelectComponent","CopyWorkbasket","onRemoveAsDistributionTarget","onRemoveWorkbasket","onClose","WorkbasketDetailsComponent","Kt","$","selectedWorkbasketAndAction$","toggleWidth","offsetWidth","expanded","style","width","minWidth","toggleButton","WorkbasketOverviewComponent","Ve","L","ctx_r5","routes","taskanaEngineService","events","urlPaths","split","selectedTab","isCustomRoutingRulesEnabled","routingAccess","domains","selectedDomain","switchDomain","AdministrationOverviewComponent","canActivate","DomainGuard","children","outlet","redirectTo","loadChildren","c","m","TaskRoutingModule","pathMatch","AdministrationRoutingModule","RouterModule","MODULES","CommonModule","FormsModule","ReactiveFormsModule","AngularSvgIconModule","AlertModule","SharedModule","TypeaheadModule","ScrollingModule","AdministrationModule","ClassificationCategoriesService","MatRadioModule","MatFormFieldModule","MatSelectModule","MatMenuModule","MatIconModule","MatButtonModule","MatTabsModule","MatInputModule","MatTooltipModule","MatDividerModule","MatListModule","MatProgressBarModule","MatToolbarModule","MatCheckboxModule","MatRippleModule","MatTableModule","MatDialogModule","MatExpansionModule","d","XMLHttpRequest","open","responseType","onload","g","response","onerror","console","status","dispatchEvent","MouseEvent","createEvent","initMouseEvent","f","global","navigator","test","userAgent","HTMLAnchorElement","prototype","h","URL","webkitURL","j","createElement","download","rel","origin","createObjectURL","revokeObjectURL","msSaveOrOpenBlob","autoBom","warn","title","body","innerText","safari","FileReader","k","onloadend","result","readAsDataURL","l","module","exports","apply","zt"],"sourceRoot":"webpack:///","sources":["./node_modules/ngx-infinite-scroll/fesm2015/ngx-infinite-scroll.mjs","./src/app/administration/components/classification-types-selector/classification-types-selector.component.html","./src/app/administration/components/classification-types-selector/classification-types-selector.component.ts","./src/app/shared/models/customisation.ts","./src/app/shared/store/access-items-management-store/access-items-management.selector.ts","./src/app/administration/components/access-items-management/access-items-management.component.html","./src/app/administration/components/access-items-management/access-items-management.component.ts","./src/app/shared/models/workbasket-access-items.ts","./src/app/shared/models/taskana-type.ts","./src/app/administration/services/import-export.service.ts","./src/app/shared/util/blob-generator.ts","./src/app/administration/services/classification-definition.service.ts","./src/app/administration/services/workbasket-definition.service.ts","./src/app/administration/components/import-export/import-export.component.html","./src/app/administration/components/import-export/import-export.component.ts","./src/app/administration/components/classification-list/classification-list.component.html","./src/app/administration/components/classification-list/classification-list.component.ts","./src/app/administration/components/classification-details/classification-details.component.html","./src/app/administration/components/classification-details/classification-details.component.ts","./src/app/shared/models/classification-summary.ts","./src/app/administration/components/classification-overview/classification-overview.component.html","./src/app/administration/components/classification-overview/classification-overview.component.ts","./src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.html","./src/app/administration/components/workbasket-list-toolbar/workbasket-list-toolbar.component.ts","./src/app/administration/components/workbasket-list/workbasket-list.component.html","./src/app/administration/components/workbasket-list/workbasket-list.component.ts","./node_modules/rxjs/dist/esm/internal/operators/timeout.js","./src/app/administration/components/workbasket-information/workbasket-information.component.html","./src/app/administration/components/workbasket-information/workbasket-information.component.ts","./src/app/shared/models/workbasket.ts","./src/app/administration/components/workbasket-access-items/workbasket-access-items.component.html","./src/app/administration/components/workbasket-access-items/workbasket-access-items.component.ts","./node_modules/rxjs/dist/esm/internal/operators/throttle.js","./src/app/administration/components/workbasket-distribution-targets-list/workbasket-distribution-targets-list.component.html","./src/app/administration/components/workbasket-distribution-targets-list/workbasket-distribution-targets-list.component.ts","./node_modules/rxjs/dist/esm/internal/operators/throttleTime.js","./src/app/administration/components/workbasket-distribution-targets/workbasket-distribution-targets.component.html","./src/app/administration/components/workbasket-distribution-targets/workbasket-distribution-targets.component.ts","./src/app/administration/components/workbasket-details/workbasket-details.component.html","./src/app/administration/components/workbasket-details/workbasket-details.component.ts","./src/app/administration/components/workbasket-overview/workbasket-overview.component.html","./src/app/administration/components/workbasket-overview/workbasket-overview.component.ts","./src/app/administration/components/administration-overview/administration-overview.component.html","./src/app/administration/administration-routing.module.ts","./src/app/administration/components/administration-overview/administration-overview.component.ts","./src/app/administration/administration.module.ts","./node_modules/file-saver/dist/FileSaver.min.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, Input, NgModule } from '@angular/core';\nimport { of, fromEvent } from 'rxjs';\nimport { mergeMap, map, tap, filter, throttleTime } from 'rxjs/operators';\n\nclass NgxInfiniteScrollService {\n    constructor() { }\n}\nNgxInfiniteScrollService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxInfiniteScrollService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgxInfiniteScrollService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxInfiniteScrollService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: NgxInfiniteScrollService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nfunction resolveContainerElement(selector, scrollWindow, defaultElement, fromRoot) {\n    const hasWindow = window && !!window.document && window.document.documentElement;\n    let container = hasWindow && scrollWindow ? window : defaultElement;\n    if (selector) {\n        const containerIsString = selector && hasWindow && typeof selector === 'string';\n        container = containerIsString\n            ? findElement(selector, defaultElement.nativeElement, fromRoot)\n            : selector;\n        if (!container) {\n            throw new Error('ngx-infinite-scroll {resolveContainerElement()}: selector for');\n        }\n    }\n    return container;\n}\nfunction findElement(selector, customRoot, fromRoot) {\n    const rootEl = fromRoot ? window.document : customRoot;\n    return rootEl.querySelector(selector);\n}\nfunction inputPropChanged(prop) {\n    return prop && !prop.firstChange;\n}\nfunction hasWindowDefined() {\n    return typeof window !== 'undefined';\n}\n\nconst VerticalProps = {\n    clientHeight: \"clientHeight\",\n    offsetHeight: \"offsetHeight\",\n    scrollHeight: \"scrollHeight\",\n    pageYOffset: \"pageYOffset\",\n    offsetTop: \"offsetTop\",\n    scrollTop: \"scrollTop\",\n    top: \"top\"\n};\nconst HorizontalProps = {\n    clientHeight: \"clientWidth\",\n    offsetHeight: \"offsetWidth\",\n    scrollHeight: \"scrollWidth\",\n    pageYOffset: \"pageXOffset\",\n    offsetTop: \"offsetLeft\",\n    scrollTop: \"scrollLeft\",\n    top: \"left\"\n};\nclass AxisResolver {\n    constructor(vertical = true) {\n        this.vertical = vertical;\n        this.propsMap = vertical ? VerticalProps : HorizontalProps;\n    }\n    clientHeightKey() {\n        return this.propsMap.clientHeight;\n    }\n    offsetHeightKey() {\n        return this.propsMap.offsetHeight;\n    }\n    scrollHeightKey() {\n        return this.propsMap.scrollHeight;\n    }\n    pageYOffsetKey() {\n        return this.propsMap.pageYOffset;\n    }\n    offsetTopKey() {\n        return this.propsMap.offsetTop;\n    }\n    scrollTopKey() {\n        return this.propsMap.scrollTop;\n    }\n    topKey() {\n        return this.propsMap.top;\n    }\n}\n\nfunction shouldTriggerEvents(alwaysCallback, shouldFireScrollEvent, isTriggeredCurrentTotal) {\n    if (alwaysCallback && shouldFireScrollEvent) {\n        return true;\n    }\n    if (!isTriggeredCurrentTotal && shouldFireScrollEvent) {\n        return true;\n    }\n    return false;\n}\n\nfunction createResolver({ windowElement, axis, }) {\n    return createResolverWithContainer({ axis, isWindow: isElementWindow(windowElement) }, windowElement);\n}\nfunction createResolverWithContainer(resolver, windowElement) {\n    const container = resolver.isWindow || (windowElement && !windowElement.nativeElement)\n        ? windowElement\n        : windowElement.nativeElement;\n    return Object.assign(Object.assign({}, resolver), { container });\n}\nfunction isElementWindow(windowElement) {\n    const isWindow = ['Window', 'global'].some((obj) => Object.prototype.toString.call(windowElement).includes(obj));\n    return isWindow;\n}\nfunction getDocumentElement(isContainerWindow, windowElement) {\n    return isContainerWindow ? windowElement.document.documentElement : null;\n}\nfunction calculatePoints(element, resolver) {\n    const height = extractHeightForElement(resolver);\n    return resolver.isWindow\n        ? calculatePointsForWindow(height, element, resolver)\n        : calculatePointsForElement(height, element, resolver);\n}\nfunction calculatePointsForWindow(height, element, resolver) {\n    const { axis, container, isWindow } = resolver;\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    // scrolled until now / current y point\n    const scrolled = height +\n        getElementPageYOffset(getDocumentElement(isWindow, container), axis, isWindow);\n    // total height / most bottom y point\n    const nativeElementHeight = getElementHeight(element.nativeElement, isWindow, offsetHeightKey, clientHeightKey);\n    const totalToScroll = getElementOffsetTop(element.nativeElement, axis, isWindow) +\n        nativeElementHeight;\n    return { height, scrolled, totalToScroll, isWindow };\n}\nfunction calculatePointsForElement(height, element, resolver) {\n    const { axis, container } = resolver;\n    // perhaps use container.offsetTop instead of 'scrollTop'\n    const scrolled = container[axis.scrollTopKey()];\n    const totalToScroll = container[axis.scrollHeightKey()];\n    return { height, scrolled, totalToScroll, isWindow: false };\n}\nfunction extractHeightPropKeys(axis) {\n    return {\n        offsetHeightKey: axis.offsetHeightKey(),\n        clientHeightKey: axis.clientHeightKey(),\n    };\n}\nfunction extractHeightForElement({ container, isWindow, axis, }) {\n    const { offsetHeightKey, clientHeightKey } = extractHeightPropKeys(axis);\n    return getElementHeight(container, isWindow, offsetHeightKey, clientHeightKey);\n}\nfunction getElementHeight(elem, isWindow, offsetHeightKey, clientHeightKey) {\n    if (isNaN(elem[offsetHeightKey])) {\n        const docElem = getDocumentElement(isWindow, elem);\n        return docElem ? docElem[clientHeightKey] : 0;\n    }\n    else {\n        return elem[offsetHeightKey];\n    }\n}\nfunction getElementOffsetTop(elem, axis, isWindow) {\n    const topKey = axis.topKey();\n    // elem = elem.nativeElement;\n    if (!elem.getBoundingClientRect) {\n        // || elem.css('none')) {\n        return;\n    }\n    return (elem.getBoundingClientRect()[topKey] +\n        getElementPageYOffset(elem, axis, isWindow));\n}\nfunction getElementPageYOffset(elem, axis, isWindow) {\n    const pageYOffset = axis.pageYOffsetKey();\n    const scrollTop = axis.scrollTopKey();\n    const offsetTop = axis.offsetTopKey();\n    if (isNaN(window.pageYOffset)) {\n        return getDocumentElement(isWindow, elem)[scrollTop];\n    }\n    else if (elem.ownerDocument) {\n        return elem.ownerDocument.defaultView[pageYOffset];\n    }\n    else {\n        return elem[offsetTop];\n    }\n}\n\nfunction shouldFireScrollEvent(container, distance = { down: 0, up: 0 }, scrollingDown) {\n    let remaining;\n    let containerBreakpoint;\n    if (container.totalToScroll <= 0) {\n        return false;\n    }\n    const scrolledUntilNow = container.isWindow\n        ? container.scrolled\n        : container.height + container.scrolled;\n    if (scrollingDown) {\n        remaining =\n            (container.totalToScroll - scrolledUntilNow) / container.totalToScroll;\n        const distanceDown = (distance === null || distance === void 0 ? void 0 : distance.down) ? distance.down : 0;\n        containerBreakpoint = distanceDown / 10;\n    }\n    else {\n        const totalHiddenContentHeight = container.scrolled + (container.totalToScroll - scrolledUntilNow);\n        remaining = container.scrolled / totalHiddenContentHeight;\n        const distanceUp = (distance === null || distance === void 0 ? void 0 : distance.up) ? distance.up : 0;\n        containerBreakpoint = distanceUp / 10;\n    }\n    const shouldFireEvent = remaining <= containerBreakpoint;\n    return shouldFireEvent;\n}\nfunction isScrollingDownwards(lastScrollPosition, container) {\n    return lastScrollPosition < container.scrolled;\n}\nfunction getScrollStats(lastScrollPosition, container, distance) {\n    const scrollDown = isScrollingDownwards(lastScrollPosition, container);\n    return {\n        fire: shouldFireScrollEvent(container, distance, scrollDown),\n        scrollDown,\n    };\n}\nfunction updateScrollPosition(position, scrollState) {\n    return (scrollState.lastScrollPosition = position);\n}\nfunction updateTotalToScroll(totalToScroll, scrollState) {\n    if (scrollState.lastTotalToScroll !== totalToScroll) {\n        scrollState.lastTotalToScroll = scrollState.totalToScroll;\n        scrollState.totalToScroll = totalToScroll;\n    }\n}\nfunction isSameTotalToScroll(scrollState) {\n    return scrollState.totalToScroll === scrollState.lastTotalToScroll;\n}\nfunction updateTriggeredFlag(scroll, scrollState, triggered, isScrollingDown) {\n    if (isScrollingDown) {\n        scrollState.triggered.down = scroll;\n    }\n    else {\n        scrollState.triggered.up = scroll;\n    }\n}\nfunction isTriggeredScroll(totalToScroll, scrollState, isScrollingDown) {\n    return isScrollingDown\n        ? scrollState.triggered.down === totalToScroll\n        : scrollState.triggered.up === totalToScroll;\n}\nfunction updateScrollState(scrollState, scrolledUntilNow, totalToScroll) {\n    updateScrollPosition(scrolledUntilNow, scrollState);\n    updateTotalToScroll(totalToScroll, scrollState);\n    // const isSameTotal = isSameTotalToScroll(scrollState);\n    // if (!isSameTotal) {\n    //   updateTriggeredFlag(scrollState, false, isScrollingDown);\n    // }\n}\n\nclass ScrollState {\n    constructor({ totalToScroll }) {\n        this.lastScrollPosition = 0;\n        this.lastTotalToScroll = 0;\n        this.totalToScroll = 0;\n        this.triggered = {\n            down: 0,\n            up: 0,\n        };\n        this.totalToScroll = totalToScroll;\n    }\n    updateScrollPosition(position) {\n        return (this.lastScrollPosition = position);\n    }\n    updateTotalToScroll(totalToScroll) {\n        if (this.lastTotalToScroll !== totalToScroll) {\n            this.lastTotalToScroll = this.totalToScroll;\n            this.totalToScroll = totalToScroll;\n        }\n    }\n    updateScroll(scrolledUntilNow, totalToScroll) {\n        this.updateScrollPosition(scrolledUntilNow);\n        this.updateTotalToScroll(totalToScroll);\n    }\n    updateTriggeredFlag(scroll, isScrollingDown) {\n        if (isScrollingDown) {\n            this.triggered.down = scroll;\n        }\n        else {\n            this.triggered.up = scroll;\n        }\n    }\n    isTriggeredScroll(totalToScroll, isScrollingDown) {\n        return isScrollingDown\n            ? this.triggered.down === totalToScroll\n            : this.triggered.up === totalToScroll;\n    }\n}\n\nfunction createScroller(config) {\n    const { scrollContainer, scrollWindow, element, fromRoot } = config;\n    const resolver = createResolver({\n        axis: new AxisResolver(!config.horizontal),\n        windowElement: resolveContainerElement(scrollContainer, scrollWindow, element, fromRoot),\n    });\n    const scrollState = new ScrollState({\n        totalToScroll: calculatePoints(element, resolver),\n    });\n    const options = {\n        container: resolver.container,\n        throttle: config.throttle,\n    };\n    const distance = {\n        up: config.upDistance,\n        down: config.downDistance,\n    };\n    return attachScrollEvent(options).pipe(mergeMap(() => of(calculatePoints(element, resolver))), map((positionStats) => toInfiniteScrollParams(scrollState.lastScrollPosition, positionStats, distance)), tap(({ stats }) => scrollState.updateScroll(stats.scrolled, stats.totalToScroll)), filter(({ fire, scrollDown, stats: { totalToScroll } }) => shouldTriggerEvents(config.alwaysCallback, fire, scrollState.isTriggeredScroll(totalToScroll, scrollDown))), tap(({ scrollDown, stats: { totalToScroll } }) => {\n        scrollState.updateTriggeredFlag(totalToScroll, scrollDown);\n    }), map(toInfiniteScrollAction));\n}\nfunction attachScrollEvent(options) {\n    let obs = fromEvent(options.container, 'scroll');\n    // For an unknown reason calling `sampleTime()` causes trouble for many users, even with `options.throttle = 0`.\n    // Let's avoid calling the function unless needed.\n    // Replacing with throttleTime seems to solve the problem\n    // See https://github.com/orizens/ngx-infinite-scroll/issues/198\n    if (options.throttle) {\n        obs = obs.pipe(throttleTime(options.throttle, undefined, {\n            leading: true,\n            trailing: true,\n        }));\n    }\n    return obs;\n}\nfunction toInfiniteScrollParams(lastScrollPosition, stats, distance) {\n    const { scrollDown, fire } = getScrollStats(lastScrollPosition, stats, distance);\n    return {\n        scrollDown,\n        fire,\n        stats,\n    };\n}\nconst InfiniteScrollActions = {\n    DOWN: '[NGX_ISE] DOWN',\n    UP: '[NGX_ISE] UP',\n};\nfunction toInfiniteScrollAction(response) {\n    const { scrollDown, stats: { scrolled: currentScrollPosition }, } = response;\n    return {\n        type: scrollDown ? InfiniteScrollActions.DOWN : InfiniteScrollActions.UP,\n        payload: {\n            currentScrollPosition,\n        },\n    };\n}\n\nclass InfiniteScrollDirective {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.scrolled = new EventEmitter();\n        this.scrolledUp = new EventEmitter();\n        this.infiniteScrollDistance = 2;\n        this.infiniteScrollUpDistance = 1.5;\n        this.infiniteScrollThrottle = 150;\n        this.infiniteScrollDisabled = false;\n        this.infiniteScrollContainer = null;\n        this.scrollWindow = true;\n        this.immediateCheck = false;\n        this.horizontal = false;\n        this.alwaysCallback = false;\n        this.fromRoot = false;\n    }\n    ngAfterViewInit() {\n        if (!this.infiniteScrollDisabled) {\n            this.setup();\n        }\n    }\n    ngOnChanges({ infiniteScrollContainer, infiniteScrollDisabled, infiniteScrollDistance, }) {\n        const containerChanged = inputPropChanged(infiniteScrollContainer);\n        const disabledChanged = inputPropChanged(infiniteScrollDisabled);\n        const distanceChanged = inputPropChanged(infiniteScrollDistance);\n        const shouldSetup = (!disabledChanged && !this.infiniteScrollDisabled) ||\n            (disabledChanged && !infiniteScrollDisabled.currentValue) ||\n            distanceChanged;\n        if (containerChanged || disabledChanged || distanceChanged) {\n            this.destroyScroller();\n            if (shouldSetup) {\n                this.setup();\n            }\n        }\n    }\n    setup() {\n        if (hasWindowDefined()) {\n            this.zone.runOutsideAngular(() => {\n                this.disposeScroller = createScroller({\n                    fromRoot: this.fromRoot,\n                    alwaysCallback: this.alwaysCallback,\n                    disable: this.infiniteScrollDisabled,\n                    downDistance: this.infiniteScrollDistance,\n                    element: this.element,\n                    horizontal: this.horizontal,\n                    scrollContainer: this.infiniteScrollContainer,\n                    scrollWindow: this.scrollWindow,\n                    throttle: this.infiniteScrollThrottle,\n                    upDistance: this.infiniteScrollUpDistance,\n                }).subscribe((payload) => this.zone.run(() => this.handleOnScroll(payload)));\n            });\n        }\n    }\n    handleOnScroll({ type, payload }) {\n        switch (type) {\n            case InfiniteScrollActions.DOWN:\n                return this.scrolled.emit(payload);\n            case InfiniteScrollActions.UP:\n                return this.scrolledUp.emit(payload);\n            default:\n                return;\n        }\n    }\n    ngOnDestroy() {\n        this.destroyScroller();\n    }\n    destroyScroller() {\n        if (this.disposeScroller) {\n            this.disposeScroller.unsubscribe();\n        }\n    }\n}\nInfiniteScrollDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nInfiniteScrollDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.2\", type: InfiniteScrollDirective, selector: \"[infiniteScroll], [infinite-scroll], [data-infinite-scroll]\", inputs: { infiniteScrollDistance: \"infiniteScrollDistance\", infiniteScrollUpDistance: \"infiniteScrollUpDistance\", infiniteScrollThrottle: \"infiniteScrollThrottle\", infiniteScrollDisabled: \"infiniteScrollDisabled\", infiniteScrollContainer: \"infiniteScrollContainer\", scrollWindow: \"scrollWindow\", immediateCheck: \"immediateCheck\", horizontal: \"horizontal\", alwaysCallback: \"alwaysCallback\", fromRoot: \"fromRoot\" }, outputs: { scrolled: \"scrolled\", scrolledUp: \"scrolledUp\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[infiniteScroll], [infinite-scroll], [data-infinite-scroll]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { scrolled: [{\n                type: Output\n            }], scrolledUp: [{\n                type: Output\n            }], infiniteScrollDistance: [{\n                type: Input\n            }], infiniteScrollUpDistance: [{\n                type: Input\n            }], infiniteScrollThrottle: [{\n                type: Input\n            }], infiniteScrollDisabled: [{\n                type: Input\n            }], infiniteScrollContainer: [{\n                type: Input\n            }], scrollWindow: [{\n                type: Input\n            }], immediateCheck: [{\n                type: Input\n            }], horizontal: [{\n                type: Input\n            }], alwaysCallback: [{\n                type: Input\n            }], fromRoot: [{\n                type: Input\n            }] } });\n\nclass InfiniteScrollModule {\n}\nInfiniteScrollModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInfiniteScrollModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollModule, declarations: [InfiniteScrollDirective], exports: [InfiniteScrollDirective] });\nInfiniteScrollModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollModule, providers: [], imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.2\", ngImport: i0, type: InfiniteScrollModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [InfiniteScrollDirective],\n                    exports: [InfiniteScrollDirective],\n                    imports: [],\n                    providers: [],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-infinite-scroll\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { InfiniteScrollDirective, InfiniteScrollModule, NgxInfiniteScrollService };\n","<mat-form-field class=\"types-selector\">\r\n  <mat-label>Type</mat-label>\r\n  <mat-select [value]=\"classificationTypeSelected$ | async\" class=\"types-selector__selected-type\" matTooltip=\"Change type\">\r\n    <mat-option class=\"types-selector__options\" *ngFor=\"let classificationType of classificationTypes$ | async\" [value]=\"classificationType\" (click)=\"select(classificationType)\">\r\n      {{ classificationType }}\r\n    </mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Store, Select } from '@ngxs/store';\r\nimport { ClassificationSelectors } from 'app/shared/store/classification-store/classification.selectors';\r\nimport { SetSelectedClassificationType } from 'app/shared/store/classification-store/classification.actions';\r\nimport { Location } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-classification-types-selector',\r\n  templateUrl: './classification-types-selector.component.html',\r\n  styleUrls: ['./classification-types-selector.component.scss']\r\n})\r\nexport class ClassificationTypesSelectorComponent {\r\n  @Select(ClassificationSelectors.selectedClassificationType) classificationTypeSelected$: Observable<string>;\r\n  @Select(ClassificationSelectors.classificationTypes) classificationTypes$: Observable<string[]>;\r\n\r\n  constructor(private store: Store, private location: Location) {}\r\n\r\n  select(value: string): void {\r\n    this.store.dispatch(new SetSelectedClassificationType(value));\r\n    this.location.go(this.location.path().replace(/(classifications).*/g, 'classifications'));\r\n  }\r\n}\r\n","import { map } from 'rxjs/operators';\r\nimport { OperatorFunction } from 'rxjs';\r\n\r\nexport interface Customisation {\r\n  [language: string]: CustomisationContent;\r\n}\r\n\r\nexport interface CustomisationContent {\r\n  global?: GlobalCustomisation;\r\n  workbaskets?: WorkbasketsCustomisation;\r\n  classifications?: ClassificationsCustomisation;\r\n  tasks?: TasksCustomisation;\r\n}\r\n\r\nexport interface TasksCustomisation {\r\n  information?: {\r\n    owner: LookupField;\r\n  };\r\n}\r\n\r\nexport interface ClassificationsCustomisation {\r\n  information?: CustomFields;\r\n  categories?: ClassificationCategoryImages;\r\n}\r\n\r\nexport interface ClassificationCategoryImages {\r\n  [key: string]: string;\r\n}\r\n\r\nexport interface WorkbasketsCustomisation {\r\n  information?: { owner: LookupField } & CustomFields;\r\n  'access-items'?: AccessItemsCustomisation;\r\n}\r\n\r\nexport interface GlobalCustomisation {\r\n  debounceTimeLookupField: number;\r\n}\r\n\r\nexport type AccessItemsCustomisation = { accessId?: LookupField } & CustomFields;\r\n\r\nexport interface CustomFields {\r\n  [key: string]: CustomField;\r\n}\r\n\r\nexport interface CustomField {\r\n  visible: boolean;\r\n  field: string;\r\n}\r\n\r\nexport interface LookupField {\r\n  lookupField: boolean;\r\n}\r\n\r\nexport function getCustomFields(amount: number): OperatorFunction<CustomFields, CustomField[]> {\r\n  return map<CustomFields, CustomField[]>((customisation) =>\r\n    [...Array(amount).keys()]\r\n      .map((x) => x + 1)\r\n      .map(\r\n        (x) =>\r\n          customisation[`custom${x}`] || {\r\n            field: `Custom ${x}`,\r\n            visible: true\r\n          }\r\n      )\r\n  );\r\n}\r\n","import { Selector } from '@ngxs/store';\r\nimport { AccessItemsManagementState, AccessItemsManagementStateModel } from './access-items-management.state';\r\nimport { AccessId } from '../../models/access-id';\r\n\r\nexport class AccessItemsManagementSelector {\r\n  @Selector([AccessItemsManagementState])\r\n  static groups(state: AccessItemsManagementStateModel): AccessId[] {\r\n    return state.groups;\r\n  }\r\n\r\n  @Selector([AccessItemsManagementState])\r\n  static permissions(state: AccessItemsManagementStateModel): AccessId[] {\r\n    return state.permissions;\r\n  }\r\n}\r\n","<div class=\"access-items\">\r\n\r\n  <!-- SEARCH -->\r\n  <div class=\"access-items__typeahead\">\r\n    <taskana-shared-type-ahead\r\n            placeHolderMessage=\"Search for AccessId\" (accessIdEventEmitter)=\"onSelectAccessId($event)\">\r\n    </taskana-shared-type-ahead>\r\n  </div>\r\n  <div *ngIf=\"!accessItemsForm\" class=\"access-items__icon\">\r\n    <h3>Select an access id</h3>\r\n    <svg-icon class=\"empty-icon\" src=\"./assets/icons/users.svg\"></svg-icon>\r\n  </div>\r\n\r\n  <!-- EXPANSION PANEL GROUPS -->\r\n  <mat-expansion-panel *ngIf=\"accessItemsForm\" class=\"access-items__groups-expansion-panel\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Groups of {{accessId.accessId}}</mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <!-- TABLE WITH GROUP NAMES AND ACCESS IDs -->\r\n    <table *ngIf=\"groups && groups.length > 0; else noGroups\" mat-table [dataSource]=\"groups\">\r\n      <ng-container matColumnDef=\"Name\">\r\n        <th mat-header-cell *matHeaderCellDef> Name </th>\r\n        <td mat-cell class=\"access-items__group-table-cell\" *matCellDef=\"let element\"> {{element.name}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"Access Id\">\r\n        <th mat-header-cell *matHeaderCellDef> Access Id </th>\r\n        <td mat-cell class=\"access-items__group-table-cell\" *matCellDef=\"let element\"> {{element.accessId}} </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"['Name', 'Access Id']\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: ['Name', 'Access Id'];\"></tr>\r\n    </table>\r\n\r\n    <ng-template #noGroups>The user is not associated to any groups </ng-template>\r\n  </mat-expansion-panel>\r\n\r\n  <!-- EXPANSION PANEL PERMISSIONS -->\r\n  <mat-expansion-panel *ngIf=\"accessItemsForm\" class=\"access-items__permissions-expansion-panel\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Permissions of {{accessId.accessId}}</mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <!-- TABLE WITH PERMISSION NAMES AND ACCESS IDs -->\r\n    <table *ngIf=\"permissions && permissions.length > 0; else noPermissions\" mat-table [dataSource]=\"permissions\">\r\n      <ng-container matColumnDef=\"Name\">\r\n        <th mat-header-cell *matHeaderCellDef> Name </th>\r\n        <td mat-cell class=\"access-items__permission-table-cell\" *matCellDef=\"let element\"> {{element.name}} </td>\r\n      </ng-container>\r\n      <ng-container matColumnDef=\"Access Id\">\r\n        <th mat-header-cell *matHeaderCellDef> Access Id </th>\r\n        <td mat-cell class=\"access-items__permission-table-cell\" *matCellDef=\"let element\"> {{element.accessId}} </td>\r\n      </ng-container>\r\n      <tr mat-header-row *matHeaderRowDef=\"['Name', 'Access Id']\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: ['Name', 'Access Id'];\"></tr>\r\n    </table>\r\n\r\n    <ng-template #noPermissions>The user is not associated to any permissions </ng-template>\r\n  </mat-expansion-panel>\r\n\r\n  <!-- EXPANSION PANEL AUTHORIZATION -->\r\n  <mat-expansion-panel *ngIf=\"accessItemsForm\" [expanded]=\"true\" class=\"access-items__authorization-expansion-panel\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        Authorizations of {{accessId.accessId}}</mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    <div *ngIf=\"accessItemsForm\" class=\"access-items__table\">\r\n      <ng-form [formGroup]=\"accessItemsForm\">\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th class=\"align-left\">Workbasket Key</th>\r\n              <th class=\"align-left\">Access Id</th>\r\n              <th>Read</th>\r\n              <th>Read tasks</th>\r\n              <th>Open</th>\r\n              <th>Edit tasks</th>\r\n              <th>Append</th>\r\n              <th>Transfer</th>\r\n              <th>Distribute</th>\r\n              <ng-container *ngFor=\"let customField of customFields$ | async\">\r\n                <th *ngIf=\"customField.visible\">\r\n                  {{customField.field}}\r\n                </th>\r\n              </ng-container>\r\n            </tr>\r\n            <tr>\r\n              <th class=\"align-left\">\r\n                <taskana-shared-sort [sortingFields]=\"sortingFields\" (performSorting)=\"sorting($event)\"\r\n                  menuPosition=\"left\" [defaultSortBy]=\"defaultSortBy\">\r\n                </taskana-shared-sort>\r\n              </th>\r\n              <th>\r\n                <mat-form-field class=\"access-items__authorization-expansion-panel-filter\" appearance=\"outline\">\r\n                  <mat-label>Workbasket filter</mat-label>\r\n                  <input matInput formControlName=\"workbasketKeyFilter\"\r\n                    (keyup.enter)=\"searchForAccessItemsWorkbaskets()\" type=\"text\">\r\n                </mat-form-field>\r\n              </th>\r\n              <th>\r\n                <mat-form-field class=\"access-items__authorization-expansion-panel-filter\" appearance=\"outline\">\r\n                  <mat-label>Access id filter</mat-label>\r\n                  <input matInput formControlName=\"accessIdFilter\" (keyup.enter)=\"searchForAccessItemsWorkbaskets()\"\r\n                    type=\"text\">\r\n                </mat-form-field>\r\n              </th>\r\n              <th>\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody formArrayName=\"accessItemsGroups\">\r\n            <tr class=\"access-items__authorization-expansion-panel__content\"\r\n              *ngFor=\"let accessItem of accessItems; let index = index;\" [formGroupName]=\"index.toString()\">\r\n              <td></td>\r\n              <td class=\"align-left\">\r\n                <label class=\"wrap\">{{accessItem.workbasketKey}}</label>\r\n              </td>\r\n              <td class=\"align-left\" *ngIf=\"(accessItemsCustomization$ | async)?.accessId.lookupField\">\r\n                <label matTooltip=\"{{accessItem.accessId}}\" class=\"wrap\">{{accessItem.accessName}}</label>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-0\" formControlName=\"permRead\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-1\" formControlName=\"permReadTasks\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-2\" formControlName=\"permOpen\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-3\" formControlName=\"permEditTasks\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-4\" formControlName=\"permAppend\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-5\" formControlName=\"permTransfer\"></mat-checkbox>\r\n              </td>\r\n              <td>\r\n                <mat-checkbox id=\"checkbox-{{index}}-6\" formControlName=\"permDistribute\"></mat-checkbox>\r\n              </td>\r\n              <ng-container *ngFor=\"let customField of customFields$ | async; let customIndex = index\">\r\n                <td *ngIf=\"customField.visible\">\r\n                  <mat-checkbox id=\"checkbox-{{index}}-{{customIndex + 7}}\"\r\n                    formControlName=\"permCustom{{customIndex + 1}}\"></mat-checkbox>\r\n                </td>\r\n              </ng-container>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n\r\n        <!-- Revoke Access button -->\r\n        <button mat-raised-button class=\"access-items__revoke-button\" color=\"warn\" *ngIf=\"accessItemsForm\" (click)=\"revokeAccess()\"\r\n          [disabled]=isGroup>\r\n          Revoke access\r\n          <mat-icon>clear</mat-icon>\r\n        </button>\r\n\r\n      </ng-form>\r\n    </div>\r\n  </mat-expansion-panel>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { FormArray, FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { FormsValidatorService } from 'app/shared/services/forms-validator/forms-validator.service';\r\nimport { WorkbasketAccessItems } from 'app/shared/models/workbasket-access-items';\r\nimport {\r\n  Direction,\r\n  Sorting,\r\n  WORKBASKET_ACCESS_ITEM_SORT_PARAMETER_NAMING,\r\n  WorkbasketAccessItemQuerySortParameter\r\n} from 'app/shared/models/sorting';\r\nimport { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { AccessId } from '../../../shared/models/access-id';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { AccessItemsCustomisation, CustomField, getCustomFields } from '../../../shared/models/customisation';\r\nimport { customFieldCount } from '../../../shared/models/workbasket-access-items';\r\nimport {\r\n  GetAccessItems,\r\n  GetPermissionsByAccessId,\r\n  GetGroupsByAccessId,\r\n  RemoveAccessItemsPermissions\r\n} from '../../../shared/store/access-items-management-store/access-items-management.actions';\r\nimport { AccessItemsManagementSelector } from '../../../shared/store/access-items-management-store/access-items-management.selector';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { WorkbasketAccessItemQueryFilterParameter } from '../../../shared/models/workbasket-access-item-query-filter-parameter';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-access-items-management',\r\n  templateUrl: './access-items-management.component.html',\r\n  styleUrls: ['./access-items-management.component.scss']\r\n})\r\nexport class AccessItemsManagementComponent implements OnInit {\r\n  accessIdPrevious: string;\r\n  isRequired: boolean = false;\r\n  accessIdName: string;\r\n  panelState: boolean = false;\r\n  accessItemsForm: FormGroup;\r\n  accessId: AccessId;\r\n  groups: AccessId[];\r\n  permissions: AccessId[];\r\n  defaultSortBy: WorkbasketAccessItemQuerySortParameter = WorkbasketAccessItemQuerySortParameter.ACCESS_ID;\r\n  sortingFields: Map<WorkbasketAccessItemQuerySortParameter, string> = WORKBASKET_ACCESS_ITEM_SORT_PARAMETER_NAMING;\r\n  sortModel: Sorting<WorkbasketAccessItemQuerySortParameter> = {\r\n    'sort-by': this.defaultSortBy,\r\n    order: Direction.DESC\r\n  };\r\n  accessItems: WorkbasketAccessItems[];\r\n  isGroup: boolean = false;\r\n  isPermission: boolean = false;\r\n\r\n  @Select(EngineConfigurationSelectors.accessItemsCustomisation)\r\n  accessItemsCustomization$: Observable<AccessItemsCustomisation>;\r\n  @Select(AccessItemsManagementSelector.groups) groups$: Observable<AccessId[]>;\r\n  customFields$: Observable<CustomField[]>;\r\n  @Select(AccessItemsManagementSelector.permissions) permissions$: Observable<AccessId[]>;\r\n  destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private formsValidatorService: FormsValidatorService,\r\n    private notificationService: NotificationService,\r\n    private store: Store,\r\n    public dialog: MatDialog\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.groups$.pipe(takeUntil(this.destroy$)).subscribe((groups) => {\r\n      this.groups = groups;\r\n    });\r\n    this.permissions$.pipe(takeUntil(this.destroy$)).subscribe((permissions) => {\r\n      this.permissions = permissions;\r\n    });\r\n  }\r\n\r\n  onSelectAccessId(selected: AccessId) {\r\n    if (selected) {\r\n      this.accessId = selected;\r\n      if (this.accessIdPrevious !== selected.accessId) {\r\n        this.accessIdPrevious = selected.accessId;\r\n        this.accessIdName = selected.name;\r\n        this.store\r\n          .dispatch(new GetGroupsByAccessId(selected.accessId))\r\n          .pipe(takeUntil(this.destroy$))\r\n          .subscribe(() => {\r\n            this.searchForAccessItemsWorkbaskets();\r\n          });\r\n        this.store\r\n          .dispatch(new GetPermissionsByAccessId(selected.accessId))\r\n          .pipe(takeUntil(this.destroy$))\r\n          .subscribe(() => {\r\n            this.searchForAccessItemsWorkbaskets();\r\n          });\r\n      }\r\n    } else {\r\n      this.accessItemsForm = null;\r\n    }\r\n    this.customFields$ = this.accessItemsCustomization$.pipe(getCustomFields(customFieldCount));\r\n  }\r\n\r\n  searchForAccessItemsWorkbaskets() {\r\n    this.removeFocus();\r\n    if (this.permissions == null) {\r\n      const filterParameter: WorkbasketAccessItemQueryFilterParameter = {\r\n        'access-id': [this.accessId, ...this.groups].map((a) => a.accessId)\r\n      };\r\n      this.store\r\n        .dispatch(new GetAccessItems(filterParameter, this.sortModel))\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe((state) => {\r\n          this.setAccessItemsGroups(\r\n            state['accessItemsManagement'].accessItemsResource\r\n              ? state['accessItemsManagement'].accessItemsResource.accessItems\r\n              : []\r\n          );\r\n        });\r\n    } else {\r\n      const filterParameter: WorkbasketAccessItemQueryFilterParameter = {\r\n        'access-id': [this.accessId, ...this.groups, ...this.permissions].map((a) => a.accessId)\r\n      };\r\n      this.store\r\n        .dispatch(new GetAccessItems(filterParameter, this.sortModel))\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe((state) => {\r\n          this.setAccessItemsPermissions(\r\n            state['accessItemsManagement'].accessItemsResource\r\n              ? state['accessItemsManagement'].accessItemsResource.accessItems\r\n              : []\r\n          );\r\n          this.setAccessItemsGroups(\r\n            state['accessItemsManagement'].accessItemsResource\r\n              ? state['accessItemsManagement'].accessItemsResource.accessItems\r\n              : []\r\n          );\r\n        });\r\n    }\r\n  }\r\n\r\n  setAccessItemsGroups(accessItems: Array<WorkbasketAccessItems>) {\r\n    const AccessItemsFormGroups = accessItems.map((accessItem) => this.formBuilder.group(accessItem));\r\n    AccessItemsFormGroups.forEach((accessItemGroup) => {\r\n      accessItemGroup.controls.accessId.setValidators(Validators.required);\r\n      Object.keys(accessItemGroup.controls).forEach((key) => {\r\n        accessItemGroup.controls[key].disable();\r\n      });\r\n    });\r\n\r\n    const AccessItemsFormArray = this.formBuilder.array(AccessItemsFormGroups);\r\n    if (!this.accessItemsForm) {\r\n      this.accessItemsForm = this.formBuilder.group({});\r\n    }\r\n    this.accessItemsForm.setControl('accessItemsGroups', AccessItemsFormArray);\r\n    if (!this.accessItemsForm.value.workbasketKeyFilter) {\r\n      this.accessItemsForm.addControl('workbasketKeyFilter', new FormControl());\r\n    }\r\n    if (!this.accessItemsForm.value.accessIdFilter) {\r\n      this.accessItemsForm.addControl('accessIdFilter', new FormControl());\r\n    }\r\n    this.accessItems = accessItems;\r\n    if (this.accessItemsForm.value.workbasketKeyFilter || this.accessItemsForm.value.accessIdFilter) {\r\n      this.filterAccessItems();\r\n    }\r\n  }\r\n\r\n  setAccessItemsPermissions(accessItems: Array<WorkbasketAccessItems>) {\r\n    const AccessItemsFormPermissions = accessItems.map((accessItem) => this.formBuilder.group(accessItem));\r\n    AccessItemsFormPermissions.forEach((accessItemPermission) => {\r\n      accessItemPermission.controls.accessId.setValidators(Validators.required);\r\n      Object.keys(accessItemPermission.controls).forEach((key) => {\r\n        accessItemPermission.controls[key].disable();\r\n      });\r\n    });\r\n\r\n    const AccessItemsFormArray = this.formBuilder.array(AccessItemsFormPermissions);\r\n    if (!this.accessItemsForm) {\r\n      this.accessItemsForm = this.formBuilder.group({});\r\n    }\r\n    this.accessItemsForm.setControl('accessItemsPermissions', AccessItemsFormArray);\r\n    if (!this.accessItemsForm.value.workbasketKeyFilter) {\r\n      this.accessItemsForm.addControl('workbasketKeyFilter', new FormControl());\r\n    }\r\n    if (!this.accessItemsForm.value.accessIdFilter) {\r\n      this.accessItemsForm.addControl('accessIdFilter', new FormControl());\r\n    }\r\n    this.accessItems = accessItems;\r\n    if (this.accessItemsForm.value.workbasketKeyFilter || this.accessItemsForm.value.accessIdFilter) {\r\n      this.filterAccessItems();\r\n    }\r\n  }\r\n\r\n  filterAccessItems() {\r\n    if (this.accessItemsForm.value.accessIdFilter) {\r\n      this.accessItems = this.accessItems.filter((value) =>\r\n        value.accessName.toLowerCase().includes(this.accessItemsForm.value.accessIdFilter.toLowerCase())\r\n      );\r\n    }\r\n    if (this.accessItemsForm.value.workbasketKeyFilter) {\r\n      this.accessItems = this.accessItems.filter((value) =>\r\n        value.workbasketKey.toLowerCase().includes(this.accessItemsForm.value.workbasketKeyFilter.toLowerCase())\r\n      );\r\n    }\r\n  }\r\n\r\n  revokeAccess() {\r\n    this.notificationService.showDialog(\r\n      'ACCESS_ITEM_MANAGEMENT_REVOKE_ACCESS',\r\n      { accessId: this.accessId.accessId },\r\n      () => {\r\n        this.store\r\n          .dispatch(new RemoveAccessItemsPermissions(this.accessId.accessId))\r\n          .pipe(takeUntil(this.destroy$))\r\n          .subscribe(() => {\r\n            this.searchForAccessItemsWorkbaskets();\r\n          });\r\n      }\r\n    );\r\n  }\r\n\r\n  get accessItemsGroups(): FormArray {\r\n    return this.accessItemsForm ? (this.accessItemsForm.get('accessItemsGroups') as FormArray) : null;\r\n  }\r\n\r\n  get accessItemsPermissions(): FormArray {\r\n    return this.accessItemsForm ? (this.accessItemsForm.get('accessItemsPermissions') as FormArray) : null;\r\n  }\r\n\r\n  isFieldValid(field: string, index: number): boolean {\r\n    return (\r\n      this.formsValidatorService.isFieldValid(this.accessItemsGroups[index], field) ||\r\n      this.formsValidatorService.isFieldValid(this.accessItemsPermissions[index], field)\r\n    );\r\n  }\r\n\r\n  sorting(sort: Sorting<WorkbasketAccessItemQuerySortParameter>) {\r\n    this.sortModel = sort;\r\n    this.searchForAccessItemsWorkbaskets();\r\n  }\r\n\r\n  removeFocus() {\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.focus();\r\n    }\r\n  }\r\n\r\n  clearFilter() {\r\n    if (this.accessItemsForm) {\r\n      this.accessItemsForm.patchValue({\r\n        workbasketKeyFilter: '',\r\n        accessIdFilter: ''\r\n      });\r\n      this.searchForAccessItemsWorkbaskets();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { Links } from './links';\r\n\r\nexport interface WorkbasketAccessItems {\r\n  accessItemId: string;\r\n  workbasketId: string;\r\n  workbasketKey: string;\r\n  accessId: string;\r\n  accessName: string;\r\n  permRead: boolean;\r\n  permOpen: boolean;\r\n  permAppend: boolean;\r\n  permTransfer: boolean;\r\n  permDistribute: boolean;\r\n  permReadTasks: boolean;\r\n  permEditTasks: boolean;\r\n  permCustom1: boolean;\r\n  permCustom2: boolean;\r\n  permCustom3: boolean;\r\n  permCustom4: boolean;\r\n  permCustom5: boolean;\r\n  permCustom6: boolean;\r\n  permCustom7: boolean;\r\n  permCustom8: boolean;\r\n  permCustom9: boolean;\r\n  permCustom10: boolean;\r\n  permCustom11: boolean;\r\n  permCustom12: boolean;\r\n  _links?: Links;\r\n}\r\n\r\nexport const customFieldCount: number = 12;\r\n","export enum TaskanaType {\r\n  WORKBASKETS,\r\n  CLASSIFICATIONS,\r\n  TASKS\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ImportExportService {\r\n  public importingFinished = new Subject<boolean>();\r\n\r\n  setImportingFinished(value: boolean) {\r\n    this.importingFinished.next(value);\r\n  }\r\n\r\n  getImportingFinished(): Observable<boolean> {\r\n    return this.importingFinished.asObservable();\r\n  }\r\n}\r\n","import { saveAs } from 'file-saver';\r\n\r\nexport class BlobGenerator {\r\n  public static saveFile(object: Object, fileName: string) {\r\n    saveAs(new Blob([JSON.stringify(object, null, 2)], { type: 'application/json;charset=UTF-8' }), fileName);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { TaskanaDate } from 'app/shared/util/taskana.date';\r\nimport { BlobGenerator } from 'app/shared/util/blob-generator';\r\nimport { Classification } from '../../shared/models/classification';\r\nimport { StartupService } from '../../shared/services/startup/startup.service';\r\nimport { take } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ClassificationDefinitionService {\r\n  constructor(private httpClient: HttpClient, private startupService: StartupService) {}\r\n\r\n  get url(): string {\r\n    return this.startupService.getTaskanaRestUrl() + '/v1/classification-definitions';\r\n  }\r\n\r\n  // GET\r\n  exportClassifications(domain: string): Observable<Classification[]> {\r\n    const domainRequest = domain === '' ? domain : `?domain=${domain}`;\r\n    const classificationDefObservable = this.httpClient.get<Classification[]>(this.url + domainRequest).pipe(take(1));\r\n    classificationDefObservable.subscribe((classificationDefinitions) =>\r\n      BlobGenerator.saveFile(classificationDefinitions, `Classifications_${TaskanaDate.getDate()}.json`)\r\n    );\r\n    return classificationDefObservable;\r\n  }\r\n\r\n  importClassification(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const headers = new HttpHeaders().set('Content-Type', 'multipart/form-data');\r\n    return this.httpClient.post(this.url, formData, { headers });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { WorkbasketDefinition } from 'app/shared/models/workbasket-definition';\r\nimport { TaskanaDate } from 'app/shared/util/taskana.date';\r\nimport { BlobGenerator } from 'app/shared/util/blob-generator';\r\nimport { take } from 'rxjs/operators';\r\nimport { Observable } from 'rxjs';\r\nimport { StartupService } from '../../shared/services/startup/startup.service';\r\n\r\n@Injectable()\r\nexport class WorkbasketDefinitionService {\r\n  constructor(private httpClient: HttpClient, private startupService: StartupService) {}\r\n\r\n  get url(): string {\r\n    return this.startupService.getTaskanaRestUrl() + '/v1/workbasket-definitions';\r\n  }\r\n\r\n  // GET\r\n  exportWorkbaskets(domain: string): Observable<WorkbasketDefinition[]> {\r\n    const domainRequest = domain === '' ? domain : `?domain=${domain}`;\r\n    const workbasketDefObservable = this.httpClient.get<WorkbasketDefinition[]>(this.url + domainRequest).pipe(take(1));\r\n    workbasketDefObservable.subscribe((workbasketDefinitions) =>\r\n      BlobGenerator.saveFile(workbasketDefinitions, `Workbaskets_${TaskanaDate.getDate()}.json`)\r\n    );\r\n    return workbasketDefObservable;\r\n  }\r\n\r\n  importWorkbasket(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const headers = new HttpHeaders().set('Content-Type', 'multipart/form-data');\r\n    return this.httpClient.post(this.url, formData, { headers });\r\n  }\r\n}\r\n","<div class=\"import-export\">\r\n  <button mat-stroked-button class=\"mr-1\" matTooltip=\"Import {{parentComponent}}\" (click)=\"selectedFile.click()\" title=\"Import\">\r\n    Import\r\n    <mat-icon>cloud_upload</mat-icon>\r\n  </button>\r\n\r\n  <form class=\"hide\" enctype=\"multipart/form-data\" method=\"post\">\r\n    <input #selectedFile type=\"file\" accept=\".json\" (change)=\"uploadFile()\" class=\"hidden\" />\r\n  </form>\r\n\r\n  <button mat-stroked-button class=\"mr-1\" matTooltip=\"Export {{parentComponent}}\" [matMenuTriggerFor]=\"menu\" title=\"Export\">\r\n    Export\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <button mat-menu-item href=\"javascript:void(0)\" (click)=\"export()\">\r\n      All Domains\r\n    </button>\r\n    <button mat-menu-item *ngFor=\"let domain of (domains$ | async)\" href=\"javascript:void(0)\" (click)=\"export(domain)\">\r\n      {{domain === '' ? 'Master' : domain}}\r\n    </button>\r\n  </mat-menu>\r\n</div>\r\n","import { Component, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { ClassificationDefinitionService } from 'app/administration/services/classification-definition.service';\r\nimport { WorkbasketDefinitionService } from 'app/administration/services/workbasket-definition.service';\r\nimport { DomainService } from 'app/shared/services/domain/domain.service';\r\nimport { TaskanaType } from 'app/shared/models/taskana-type';\r\nimport { ImportExportService } from 'app/administration/services/import-export.service';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { HotToastService } from '@ngneat/hot-toast';\r\nimport { takeUntil } from 'rxjs/operators';\r\n\r\n/**\r\n * Recommendation: Turn this component into presentational component - no logic, instead events are\r\n * fired back to parent components with @Output(). This way the logic of exporting/importing workbasket\r\n * or classification is stored in their respective container component.\r\n */\r\n@Component({\r\n  selector: 'taskana-administration-import-export',\r\n  templateUrl: './import-export.component.html',\r\n  styleUrls: ['./import-export.component.scss']\r\n})\r\nexport class ImportExportComponent implements OnInit, OnDestroy {\r\n  @Input() currentSelection: TaskanaType;\r\n  @Input() parentComponent: string;\r\n\r\n  @ViewChild('selectedFile', { static: true })\r\n  selectedFileInput;\r\n\r\n  domains$: Observable<string[]>;\r\n  destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private domainService: DomainService,\r\n    private workbasketDefinitionService: WorkbasketDefinitionService,\r\n    private classificationDefinitionService: ClassificationDefinitionService,\r\n    private notificationService: NotificationService,\r\n    private importExportService: ImportExportService,\r\n    private hotToastService: HotToastService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.domains$ = this.domainService.getDomains();\r\n  }\r\n\r\n  export(domain = '') {\r\n    if (this.currentSelection === TaskanaType.WORKBASKETS) {\r\n      this.workbasketDefinitionService.exportWorkbaskets(domain);\r\n    } else {\r\n      this.classificationDefinitionService.exportClassifications(domain);\r\n    }\r\n  }\r\n\r\n  uploadFile() {\r\n    const file = this.selectedFileInput.nativeElement.files[0];\r\n    if (this.checkFormatFile(file)) {\r\n      if (this.currentSelection === TaskanaType.WORKBASKETS) {\r\n        this.workbasketDefinitionService\r\n          .importWorkbasket(file)\r\n          .pipe(\r\n            takeUntil(this.destroy$),\r\n            this.hotToastService.observe({\r\n              loading: 'Uploading...',\r\n              success: 'File successfully uploaded',\r\n              error: 'Upload failed'\r\n            })\r\n          )\r\n          .subscribe({\r\n            next: () => {\r\n              this.importExportService.setImportingFinished(true);\r\n            }\r\n          });\r\n      } else {\r\n        this.classificationDefinitionService\r\n          .importClassification(file)\r\n          .pipe(\r\n            takeUntil(this.destroy$),\r\n            this.hotToastService.observe({\r\n              loading: 'Uploading...',\r\n              success: 'File successfully uploaded',\r\n              error: 'Upload failed'\r\n            })\r\n          )\r\n          .subscribe({\r\n            next: () => {\r\n              this.importExportService.setImportingFinished(true);\r\n            }\r\n          });\r\n      }\r\n    }\r\n    this.resetProgress();\r\n  }\r\n\r\n  private checkFormatFile(file): boolean {\r\n    const ending = file.name.match(/\\.([^.]+)$/)[1];\r\n    let check = false;\r\n    if (ending === 'json') {\r\n      check = true;\r\n    } else {\r\n      file.value = '';\r\n      this.notificationService.showError('IMPORT_EXPORT_UPLOAD_FILE_FORMAT');\r\n    }\r\n    return check;\r\n  }\r\n\r\n  private resetProgress() {\r\n    this.selectedFileInput.nativeElement.value = '';\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"classification-list\">\r\n\r\n  <!-- ACTION TOOLBAR -->\r\n  <section class=\"classification-list__action-toolbar\">\r\n    <div class=\"classification-list__action-buttons\">\r\n\r\n      <!-- ADD BUTTON -->\r\n      <button mat-flat-button class=\"classification-list__add-button mr-1\" matTooltip=\"Create new classification\"\r\n              (click)=\"addClassification()\">\r\n        Add\r\n        <mat-icon class=\"md-20\">add</mat-icon>\r\n      </button>\r\n\r\n      <!-- IMPORT EXPORT BUTTONS -->\r\n      <taskana-administration-import-export\r\n        class=\"classification-list__import-export\" [currentSelection]=\"taskanaType.CLASSIFICATIONS\" [parentComponent]=\"'classifications'\">\r\n      </taskana-administration-import-export>\r\n    </div>\r\n\r\n    <!-- FILTER -->\r\n    <div class=\"classification-list__filter\">\r\n\r\n      <!-- CATEGORY FILTER -->\r\n      <div class=\"classification-list__category-filter\">\r\n        <button mat-stroked-button class=\"classification-list__filter-button\" [matMenuTriggerFor]=\"menu\"\r\n                matTooltip=\"Filter Category\">\r\n\r\n          <mat-icon *ngIf=\"selectedCategory == ''\">filter_list</mat-icon>\r\n          <svg-icon class=\"classification-list__icons\" [src]=\"(getCategoryIcon(selectedCategory) | async)?.left\"\r\n                    *ngIf=\"selectedCategory != ''\">\r\n          </svg-icon>\r\n        </button>\r\n\r\n        <mat-menu #menu=\"matMenu\">\r\n          <button class=\"classification-list__all-button\" mat-menu-item (click)=\"selectCategory('')\">\r\n            <span> <mat-icon style=\"color: #555\" class=\"classification-list__filter-all-icon\">filter_list</mat-icon> All </span>\r\n          </button>\r\n          <button mat-menu-item *ngFor=\"let category of categories$ | async\" (click)=\"selectCategory(category)\">\r\n            <svg-icon class=\"classification-list__categories\" [src]=\"(getCategoryIcon(category) | async)?.left\"\r\n                      matTooltip=\"{{(getCategoryIcon(category) | async)?.right}}\"></svg-icon>\r\n            <span> {{category}} </span>\r\n          </button>\r\n        </mat-menu>\r\n      </div>\r\n\r\n      <!-- FILTER INPUT FIELD -->\r\n      <div class=\"classification-list__input\">\r\n        <mat-form-field class=\"classification-list__input-field\" appearance=\"legacy\" floatLabel=\"auto\">\r\n          <mat-label>Filter classification</mat-label>\r\n          <input matInput [ngModel]=\"inputValue\" (ngModelChange)=\"inputValue = $event\" matTooltip=\"Type to filter classifications\">\r\n        </mat-form-field>\r\n      </div>\r\n\r\n      <!-- TYPE FILTER -->\r\n      <taskana-administration-classification-types-selector\r\n        class=\"pull-right\">\r\n      </taskana-administration-classification-types-selector>\r\n\r\n    </div>\r\n  </section>\r\n\r\n\r\n  <!-- CLASSIFICATION TREE -->\r\n  <taskana-administration-tree *ngIf=\"(classifications && classifications.length) else empty_classifications\"\r\n                               [filterText]=\"inputValue\" [filterIcon]=\"selectedCategory\"\r\n                               (switchTaskanaSpinnerEmit)=\"setRequestInProgress($event)\"></taskana-administration-tree>\r\n  <ng-template #empty_classifications>\r\n    <div *ngIf=\"!requestInProgress\" class=\"classification-list__no-items\">\r\n      <h3 class=\"grey\">There are no classifications</h3>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Actions, ofActionCompleted, ofActionDispatched, Select, Store } from '@ngxs/store';\r\n\r\nimport { ImportExportService } from 'app/administration/services/import-export.service';\r\n\r\nimport { TaskanaType } from 'app/shared/models/taskana-type';\r\nimport { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\r\nimport { ClassificationSelectors } from 'app/shared/store/classification-store/classification.selectors';\r\nimport { Location } from '@angular/common';\r\nimport { ClassificationCategoryImages } from '../../../shared/models/customisation';\r\n\r\nimport {\r\n  GetClassifications,\r\n  CreateClassification\r\n} from '../../../shared/store/classification-store/classification.actions';\r\nimport { DomainService } from '../../../shared/services/domain/domain.service';\r\nimport { ClassificationSummary } from '../../../shared/models/classification-summary';\r\nimport { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\r\nimport { Pair } from '../../../shared/models/pair';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-classification-list',\r\n  templateUrl: './classification-list.component.html',\r\n  styleUrls: ['./classification-list.component.scss']\r\n})\r\nexport class ClassificationListComponent implements OnInit, OnDestroy {\r\n  taskanaType = TaskanaType;\r\n  requestInProgress = true;\r\n  inputValue: string;\r\n  selectedCategory = '';\r\n\r\n  @Select(ClassificationSelectors.classificationTypes) classificationTypes$: Observable<string[]>;\r\n  @Select(ClassificationSelectors.selectedClassificationType) classificationTypeSelected$: Observable<string>;\r\n  @Select(ClassificationSelectors.selectCategories) categories$: Observable<string[]>;\r\n  @Select(ClassificationSelectors.classifications) classifications$: Observable<ClassificationSummary[]>;\r\n  @Select(EngineConfigurationSelectors.selectCategoryIcons) categoryIcons$: Observable<ClassificationCategoryImages>;\r\n\r\n  destroy$ = new Subject<void>();\r\n  classifications: ClassificationSummary[];\r\n\r\n  constructor(\r\n    private location: Location,\r\n    private importExportService: ImportExportService,\r\n    private domainService: DomainService,\r\n    private requestInProgressService: RequestInProgressService,\r\n    private store: Store,\r\n    private ngxsActions$: Actions\r\n  ) {\r\n    this.ngxsActions$.pipe(ofActionDispatched(GetClassifications), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.requestInProgressService.setRequestInProgress(true);\r\n    });\r\n    this.ngxsActions$.pipe(ofActionCompleted(GetClassifications), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.requestInProgressService.setRequestInProgress(false);\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.classifications$.pipe(takeUntil(this.destroy$)).subscribe((classifications) => {\r\n      this.classifications = classifications;\r\n    });\r\n\r\n    this.classificationTypeSelected$.pipe(takeUntil(this.destroy$)).subscribe(() => {\r\n      this.store.dispatch(new GetClassifications());\r\n      this.selectedCategory = '';\r\n    });\r\n\r\n    this.importExportService\r\n      .getImportingFinished()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.store.dispatch(new GetClassifications());\r\n      });\r\n\r\n    // needed, so that the list updates, when domain gets changed (could be placed anywhere and should be removed, when domain is in store)\r\n    this.domainService\r\n      .getSelectedDomain()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((domain) => {\r\n        this.store.dispatch(GetClassifications);\r\n      });\r\n\r\n    this.requestInProgressService\r\n      .getRequestInProgress()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((value) => {\r\n        this.requestInProgress = value;\r\n      });\r\n  }\r\n\r\n  addClassification() {\r\n    this.store.dispatch(new CreateClassification());\r\n    this.location.go(this.location.path().replace(/(classifications).*/g, 'classifications/new-classification'));\r\n  }\r\n\r\n  getCategoryIcon(category: string): Observable<Pair<string, string>> {\r\n    return this.categoryIcons$.pipe(\r\n      map((iconMap) => {\r\n        if (category === '') {\r\n          return { left: iconMap['all'], right: 'All' };\r\n        }\r\n        return iconMap[category]\r\n          ? { left: iconMap[category], right: category }\r\n          : { left: iconMap.missing, right: 'Category does not match with the configuration' };\r\n      })\r\n    );\r\n  }\r\n\r\n  selectCategory(category: string) {\r\n    this.selectedCategory = category;\r\n  }\r\n\r\n  setRequestInProgress(value: boolean) {\r\n    this.requestInProgressService.setRequestInProgress(value);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"classification-details\">\r\n\r\n  <div class=\"classification-details-wrapper\" id=\"classification-details\" *ngIf=\"classification && !requestInProgress\">\r\n\r\n    <!-- TITLE + ACTION BUTTONS -->\r\n    <mat-toolbar class=\"action-toolbar\">\r\n      <h4 class=\"action-toolbar__headline\">\r\n        <span\r\n          class=\"{{isCreatingNewClassification? 'action-toolbar__title-badge' : 'action-toolbar__title'}}\"\r\n          matTooltip=\"{{classification.name}}&nbsp; [{{classification.type}}]\">\r\n          {{classification.name}}&nbsp; [{{classification.type}}]\r\n        </span>\r\n        <span\r\n          *ngIf=\"isCreatingNewClassification\" class=\"action-toolbar__badge-message\" matTooltip=\"{{badgeMessage$ | async}}\">\r\n          {{badgeMessage$ | async}}\r\n        </span>\r\n      </h4>\r\n\r\n      <div>\r\n      <button mat-button class=\"action-toolbar__button action-toolbar__save-button\" matTooltip=\"Save changes in current classification\" (click)=\"onSubmit()\">\r\n        Save\r\n        <mat-icon class=\"md-20\">save</mat-icon>\r\n      </button>\r\n\r\n      <button mat-stroked-button class=\"action-toolbar__button\" matTooltip=\"Revert changes to previous saved state\" (click)=\"onRestore()\">\r\n        Undo Changes\r\n        <mat-icon class=\"action-toolbar__aquamarine-button md-20\">restore</mat-icon>\r\n      </button>\r\n\r\n      <button mat-stroked-button [matMenuTriggerFor]=\"buttonMenu\" matTooltip=\"More actions\" class=\"action-toolbar__button\" id=\"action-toolbar__more-buttons\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n\r\n      <mat-menu #buttonMenu=\"matMenu\">\r\n        <button mat-menu-item class=\"action-toolbar__dropdown\" matTooltip=\"Copy current values to create new classification\" (click)=\"onCopy()\">\r\n          <mat-icon class=\"action-toolbar__aquamarine-button\">content_copy</mat-icon>\r\n          <span>Copy</span>\r\n        </button>\r\n        <button *ngIf=\"this.classification?.classificationId\" mat-menu-item class=\"action-toolbar__dropdown\" matTooltip=\"Delete this classification\" (click)=\"onRemoveClassification()\">\r\n          <mat-icon class=\"action-toolbar__red-button\">delete</mat-icon>\r\n          <span>Delete</span>\r\n        </button>\r\n        <button mat-menu-item class=\"action-toolbar__dropdown\" style=\"border-bottom-style: none;\"  matTooltip=\"Close this classification and discard all changes\" (click)=\"onCloseClassification()\">\r\n          <mat-icon>close</mat-icon>\r\n          <span>Close</span>\r\n        </button>\r\n      </mat-menu>\r\n      </div>\r\n    </mat-toolbar>\r\n\r\n\r\n    <!-- DETAILED FIELDS -->\r\n    <div style=\"padding: 0\">\r\n      <ng-form #ClassificationForm=\"ngForm\">\r\n        <div class=\"detailed-fields\">\r\n\r\n          <h6 class=\"detailed-fields__subheading\"> General </h6>\r\n          <mat-divider class=\"detailed-fields__horizontal-line\"> </mat-divider>\r\n\r\n          <!-- GENERAL -->\r\n          <div class=\"detailed-fields__general\">\r\n\r\n            <!-- GENERAL LEFT COLUMN -->\r\n            <div class=\"detailed-fields__general-left-column\">\r\n\r\n              <!-- KEY -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Key</mat-label>\r\n                <label for=\"classification-key\"></label>\r\n                <input matInput required type=\"text\" #key=\"ngModel\" maxlength=\"32\" [disabled]=\"!isCreatingNewClassification\"\r\n                       id=\"classification-key\" placeholder=\"Key\" [(ngModel)]=\"classification.key\"\r\n                       name=\"classification.key\" (input)=\"validateInputOverflow(key, 32)\">\r\n              </mat-form-field>\r\n              <div *ngIf=\"inputOverflowMap.get(key.name)\" class=\"error\">{{lengthError}}</div>\r\n              <!-- <taskana-shared-field-error-display [displayError]=\"key.invalid && key.dirty\"\r\n              errorMessage=\"* Key is required\">\r\n              </taskana-shared-field-error-display> -->\r\n\r\n              <!-- NAME -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Name</mat-label>\r\n                <label for=\"classification-name\"></label>\r\n                <input matInput type=\"text\" required maxlength=\"255\" #name=\"ngModel\"\r\n                       id=\"classification-name\" placeholder=\"Name\"\r\n                       [(ngModel)]=\"classification.name\" name=\"classification.name\"\r\n                       (input)=\"validateInputOverflow(name, 255)\">\r\n              </mat-form-field>\r\n              <div *ngIf=\"inputOverflowMap.get(name.name)\" class=\"error\">{{lengthError}}</div>\r\n              <!--\r\n              <taskana-shared-field-error-display [displayError]=\"name.invalid && name.dirty\"\r\n                                                  errorMessage=\"* Name is required\">\r\n              </taskana-shared-field-error-display> -->\r\n\r\n              <!-- DESCRIPTION -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Description</mat-label>\r\n                <label for=\"classification-description\"></label>\r\n                <textarea matInput\r\n                          cdkTextareaAutosize\r\n                          cdkAutosizeMinRows=\"6\"\r\n                          cdkAutosizeMaxRows=\"6\"\r\n                          maxlength=\"255\"\r\n                          id=\"classification-description\" placeholder=\"Description\"\r\n                          [(ngModel)]=\"classification.description\"\r\n                          name=\"classification.description\" #description=\"ngModel\"\r\n                          (input)=\"validateInputOverflow(description, 255)\"></textarea>\r\n              </mat-form-field>\r\n              <div *ngIf=\"inputOverflowMap.get(description.name)\" class=\"error\">{{lengthError}}</div>\r\n            </div>\r\n\r\n\r\n\r\n            <div class=\"detailed-fields__spacer\"> </div>\r\n\r\n\r\n\r\n            <!-- GENERAL RIGHT ROW -->\r\n            <div class=\"detailed-fields__general-right-column\">\r\n\r\n              <!-- DOMAIN -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Domain</mat-label>\r\n                <label for=\"classification-domain\"></label>\r\n                <input matInput type=\"text\" disabled id=\"classification-domain\"\r\n                       placeholder=\"Domain\" [(ngModel)]=\"classification.domain\"\r\n                       name=\"classification.domain\">\r\n              </mat-form-field>\r\n\r\n              <div *ngIf=\"!masterDomainSelected()\" class=\"detailed-fields__domain-checkbox\">\r\n                Valid in Domain\r\n                <a (click)=\"validChanged()\" title=\"Valid in Domain\">\r\n                  <mat-icon class=\"detailed-fields__domain-checkbox-icon\">{{classification.isValidInDomain ? 'check_box' : 'check_box_outline_blank'}}</mat-icon>\r\n                </a>\r\n              </div>\r\n\r\n              <!-- SERVICE LEVEL AND PRIORITY-->\r\n              <div class=\"detailed-fields__service-and-priority\">\r\n\r\n                <!-- SERVICE LEVEL -->\r\n                <div style=\"width: 48%\">\r\n                  <mat-form-field appearance=\"outline\" style=\"width: 100%\">\r\n                    <mat-label> Service Level </mat-label>\r\n                    <label for=\"classification-service-level\"></label>\r\n                    <input matInput type=\"text\" required maxlength=\"255\"\r\n                           id=\"classification-service-level\" placeholder=\"Service Level\"\r\n                           [(ngModel)]=\"classification.serviceLevel\" name=\"classification.serviceLevel\"\r\n                           #serviceLevel=\"ngModel\" (input)=\"validateInputOverflow(serviceLevel, 255)\">\r\n                  </mat-form-field>\r\n                  <div *ngIf=\"inputOverflowMap.get(serviceLevel.name)\" class=\"error\">{{lengthError}}</div>\r\n                </div>\r\n\r\n                <!-- PRIORITY-->\r\n                <div style=\"width: 48%\">\r\n                  <mat-form-field appearance=\"outline\"  style=\"width: 100%\">\r\n                    <mat-label>Priority</mat-label>\r\n                    <label for=\"classification-priority\"></label>\r\n                    <input matInput type=\"number\" [(ngModel)]=\"classification.priority\"\r\n                           name=\"classification.priority\" id=\"classification-priority\" required min=\"0\">\r\n                  </mat-form-field>\r\n\r\n                  <taskana-shared-field-error-display\r\n                    [displayError]=\"!isFieldValid('classification.priority')\"\r\n                    [validationTrigger]=\"this.toggleValidationMap.get('classification.priority.name')\"\r\n                    errorMessage=\"* Priority is required\">\r\n                  </taskana-shared-field-error-display>\r\n                </div>\r\n              </div>\r\n\r\n              <!-- APPLICATION ENTRY POINT -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Application entry point</mat-label>\r\n                <label for=\"classification-application-entry-point\"></label>\r\n                <input matInput type=\"text\" maxlength=\"255\"\r\n                       id=\"classification-application-entry-point\"\r\n                       placeholder=\"Application entry point\"\r\n                       [(ngModel)]=\"classification.applicationEntryPoint\"\r\n                       name=\"classification.applicationEntryPoint\" #appEntryPoint=\"ngModel\"\r\n                       (input)=\"validateInputOverflow(appEntryPoint, 255)\">\r\n              </mat-form-field>\r\n              <div *ngIf=\"inputOverflowMap.get(appEntryPoint.name)\" class=\"error\">{{lengthError}}</div>\r\n\r\n              <!-- CATEGORY -->\r\n              <mat-form-field appearance=\"outline\">\r\n                <mat-label>Category</mat-label>\r\n                <mat-select required [(value)]=\"this.classification.category\">\r\n                  <mat-select-trigger>\r\n                    <svg-icon\r\n                      class=\"detailed-fields__category-icon\" [src]=\"(getCategoryIcon(this.classification.category) | async)?.left\">\r\n                    </svg-icon>\r\n                    {{this.classification.category}}\r\n                  </mat-select-trigger>\r\n                  <mat-option *ngFor=\"let category of categories$ | async\" value=\"{{category}}\">\r\n                    <svg-icon class=\"detailed-fields__category-icon\" [src]=\"(getCategoryIcon(category) | async)?.left\"></svg-icon>\r\n                    {{category}}\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n\r\n            </div>\r\n          </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n          <!-- CUSTOM FIELDS -->\r\n          <h6 class=\"detailed-fields__subheading\"> Custom Fields </h6>\r\n          <mat-divider class=\"detailed-fields__horizontal-line\"> </mat-divider>\r\n          <div class=\"detailed-fields__custom-fields\">\r\n            <ng-container *ngFor=\"let customField of (customFields$ | async), let i = index\">\r\n              <div *ngIf=\"customField.visible\" class=\"detailed-fields__input-custom-field\">\r\n                <mat-form-field appearance=\"outline\" style=\"width: 100%\">\r\n                    <mat-label>{{customField.field}}</mat-label>\r\n                    <label for=\"classification-custom-{{i + 1}}\"></label>\r\n                    <input matInput type=\"text\" maxlength=\"255\"\r\n                           id=\"classification-custom-{{i + 1}}\" placeholder=\"{{customField.field}}\"\r\n                           [(ngModel)]=\"classification[getClassificationCustom(i + 1)]\"\r\n                           name=\"classification.custom{{i + 1}}\" #custom=\"ngModel\"\r\n                           (input)=\"validateInputOverflow(custom, 255)\">\r\n                </mat-form-field>\r\n                <div *ngIf=\"inputOverflowMap.get(custom.name)\" class=\"error\">{{lengthError}}</div>\r\n              </div>\r\n            </ng-container>\r\n          </div>\r\n        </div>\r\n      </ng-form>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { highlight } from 'app/shared/animations/validation.animation';\r\n\r\nimport { RequestInProgressService } from 'app/shared/services/request-in-progress/request-in-progress.service';\r\n\r\nimport { DomainService } from 'app/shared/services/domain/domain.service';\r\nimport { NgForm } from '@angular/forms';\r\nimport { FormsValidatorService } from 'app/shared/services/forms-validator/forms-validator.service';\r\nimport { ImportExportService } from 'app/administration/services/import-export.service';\r\nimport { map, take, takeUntil } from 'rxjs/operators';\r\nimport { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\r\nimport { ClassificationSelectors } from 'app/shared/store/classification-store/classification.selectors';\r\nimport { Location } from '@angular/common';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { ClassificationCategoryImages, CustomField, getCustomFields } from '../../../shared/models/customisation';\r\nimport { Classification } from '../../../shared/models/classification';\r\nimport { customFieldCount } from '../../../shared/models/classification-summary';\r\n\r\nimport {\r\n  CopyClassification,\r\n  DeselectClassification,\r\n  RemoveSelectedClassification,\r\n  RestoreSelectedClassification,\r\n  SaveCreatedClassification,\r\n  SaveModifiedClassification,\r\n  SelectClassification\r\n} from '../../../shared/store/classification-store/classification.actions';\r\nimport { Pair } from '../../../shared/models/pair';\r\nimport { trimForm } from '../../../shared/util/form-trimmer';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-classification-details',\r\n  templateUrl: './classification-details.component.html',\r\n  animations: [highlight],\r\n  styleUrls: ['./classification-details.component.scss']\r\n})\r\nexport class ClassificationDetailsComponent implements OnInit, OnDestroy {\r\n  classification: Classification;\r\n  @Select(ClassificationSelectors.selectCategories) categories$: Observable<string[]>;\r\n  @Select(EngineConfigurationSelectors.selectCategoryIcons) categoryIcons$: Observable<ClassificationCategoryImages>;\r\n  @Select(ClassificationSelectors.selectedClassificationType) selectedClassificationType$: Observable<string>;\r\n  @Select(ClassificationSelectors.selectedClassification) selectedClassification$: Observable<Classification>;\r\n  @Select(ClassificationSelectors.getBadgeMessage) badgeMessage$: Observable<string>;\r\n\r\n  customFields$: Observable<CustomField[]>;\r\n  isCreatingNewClassification: boolean = false;\r\n  readonly lengthError = 'You have reached the maximum length for this field';\r\n  inputOverflowMap = new Map<string, boolean>();\r\n  validateInputOverflow: Function;\r\n  requestInProgress: boolean;\r\n\r\n  @ViewChild('ClassificationForm') classificationForm: NgForm;\r\n  toggleValidationMap = new Map<string, boolean>();\r\n  destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private location: Location,\r\n    private requestInProgressService: RequestInProgressService,\r\n    private domainService: DomainService,\r\n    private formsValidatorService: FormsValidatorService,\r\n    private notificationsService: NotificationService,\r\n    private importExportService: ImportExportService,\r\n    private store: Store\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.customFields$ = this.store.select(EngineConfigurationSelectors.classificationsCustomisation).pipe(\r\n      map((customisation) => customisation.information),\r\n      getCustomFields(customFieldCount)\r\n    );\r\n\r\n    this.selectedClassification$.pipe(takeUntil(this.destroy$)).subscribe((classification) => {\r\n      this.classification = { ...classification };\r\n      this.isCreatingNewClassification = typeof this.classification.classificationId === 'undefined';\r\n    });\r\n\r\n    this.importExportService\r\n      .getImportingFinished()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.store.dispatch(new SelectClassification(this.classification.classificationId));\r\n      });\r\n\r\n    this.requestInProgressService\r\n      .getRequestInProgress()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((value) => {\r\n        this.requestInProgress = value;\r\n      });\r\n\r\n    this.formsValidatorService.inputOverflowObservable.pipe(takeUntil(this.destroy$)).subscribe((inputOverflowMap) => {\r\n      this.inputOverflowMap = inputOverflowMap;\r\n    });\r\n    this.validateInputOverflow = (inputFieldModel, maxLength) => {\r\n      this.formsValidatorService.validateInputOverflow(inputFieldModel, maxLength);\r\n    };\r\n  }\r\n\r\n  isFieldValid(field: string): boolean {\r\n    return this.formsValidatorService.isFieldValid(this.classificationForm, field);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formsValidatorService.formSubmitAttempt = true;\r\n    trimForm(this.classificationForm);\r\n    this.formsValidatorService\r\n      .validateFormInformation(this.classificationForm, this.toggleValidationMap)\r\n      .then((value) => {\r\n        if (value) {\r\n          this.onSave();\r\n        }\r\n      });\r\n  }\r\n\r\n  onRestore() {\r\n    this.formsValidatorService.formSubmitAttempt = false;\r\n    this.store\r\n      .dispatch(new RestoreSelectedClassification(this.classification.classificationId))\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this.notificationsService.showSuccess('CLASSIFICATION_RESTORE');\r\n      });\r\n  }\r\n\r\n  onCopy() {\r\n    if (this.isCreatingNewClassification) {\r\n      this.notificationsService.showError('CLASSIFICATION_COPY_NOT_CREATED');\r\n    } else {\r\n      this.store.dispatch(new CopyClassification());\r\n    }\r\n  }\r\n\r\n  onCloseClassification() {\r\n    this.store.dispatch(new DeselectClassification());\r\n  }\r\n\r\n  getCategoryIcon(category: string): Observable<Pair<string, string>> {\r\n    return this.categoryIcons$.pipe(\r\n      map((iconMap) =>\r\n        iconMap[category]\r\n          ? { left: iconMap[category], right: category }\r\n          : { left: iconMap.missing, right: 'Category does not match with the configuration' }\r\n      )\r\n    );\r\n  }\r\n\r\n  validChanged(): void {\r\n    this.classification.isValidInDomain = !this.classification.isValidInDomain;\r\n  }\r\n\r\n  masterDomainSelected(): boolean {\r\n    return this.domainService.getSelectedDomainValue() === '';\r\n  }\r\n\r\n  getClassificationCustom(customNumber: number): string {\r\n    return `custom${customNumber}`;\r\n  }\r\n\r\n  async onSave() {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n    if (typeof this.classification.classificationId === 'undefined') {\r\n      this.store\r\n        .dispatch(new SaveCreatedClassification(this.classification))\r\n        .pipe(take(1))\r\n        .subscribe((store) => {\r\n          this.notificationsService.showSuccess('CLASSIFICATION_CREATE', {\r\n            classificationKey: store.classification.selectedClassification.key\r\n          });\r\n          this.location.go(\r\n            this.location\r\n              .path()\r\n              .replace(\r\n                /(classifications).*/g,\r\n                `classifications/(detail:${store.classification.selectedClassification.classificationId})`\r\n              )\r\n          );\r\n          this.afterRequest();\r\n        });\r\n    } else {\r\n      try {\r\n        this.store\r\n          .dispatch(new SaveModifiedClassification(this.classification))\r\n          .pipe(take(1))\r\n          .subscribe(() => {\r\n            this.afterRequest();\r\n            this.notificationsService.showSuccess('CLASSIFICATION_UPDATE', {\r\n              classificationKey: this.classification.key\r\n            });\r\n          });\r\n      } catch (error) {\r\n        this.afterRequest();\r\n      }\r\n    }\r\n  }\r\n\r\n  onRemoveClassification() {\r\n    this.notificationsService.showDialog(\r\n      'CLASSIFICATION_DELETE',\r\n      { classificationKey: this.classification.key },\r\n      this.removeClassificationConfirmation.bind(this)\r\n    );\r\n  }\r\n\r\n  removeClassificationConfirmation() {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n\r\n    this.store\r\n      .dispatch(new RemoveSelectedClassification())\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        this.notificationsService.showSuccess('CLASSIFICATION_REMOVE', { classificationKey: this.classification.key });\r\n        this.afterRequest();\r\n      });\r\n    this.location.go(this.location.path().replace(/(classifications).*/g, 'classifications'));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private afterRequest() {\r\n    this.requestInProgressService.setRequestInProgress(false);\r\n  }\r\n}\r\n","export interface ClassificationSummary {\r\n  classificationId?: string;\r\n  key?: string;\r\n  applicationEntryPoint?: string;\r\n  category?: string;\r\n  domain?: string;\r\n  name?: string;\r\n  parentId?: string;\r\n  parentKey?: string;\r\n  priority?: number;\r\n  serviceLevel?: string;\r\n  type?: string;\r\n  custom1?: string;\r\n  custom2?: string;\r\n  custom3?: string;\r\n  custom4?: string;\r\n  custom5?: string;\r\n  custom6?: string;\r\n  custom7?: string;\r\n  custom8?: string;\r\n}\r\n\r\nexport const customFieldCount: number = 8;\r\n","<div class=\"classification-overview\">\r\n\r\n  <taskana-administration-classification-list></taskana-administration-classification-list>\r\n  <div class=\"vertical-right-divider\"></div>\r\n  <taskana-administration-classification-details *ngIf=\"showDetail; else showEmptyPage\"></taskana-administration-classification-details>\r\n\r\n  <ng-template #showEmptyPage>\r\n    <div class=\"classification-overview__empty-page\">\r\n      <div class=\"center-block no-detail\">\r\n        <h3 class=\"grey select-classification\">Select a classification</h3>\r\n        <svg-icon class=\"img-responsive empty-icon\" src=\"./assets/icons/classification-empty.svg\"></svg-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ClassificationSelectors } from '../../../shared/store/classification-store/classification.selectors';\r\nimport {\r\n  GetClassifications,\r\n  SelectClassification,\r\n  CreateClassification\r\n} from '../../../shared/store/classification-store/classification.actions';\r\nimport { Classification } from '../../../shared/models/classification';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-classification-overview',\r\n  templateUrl: './classification-overview.component.html',\r\n  styleUrls: ['./classification-overview.component.scss']\r\n})\r\nexport class ClassificationOverviewComponent implements OnInit, OnDestroy {\r\n  showDetail = false;\r\n  @Select(ClassificationSelectors.selectedClassification) selectedClassification$: Observable<Classification>;\r\n  private destroy$ = new Subject<void>();\r\n  routerParams: any;\r\n\r\n  constructor(private route: ActivatedRoute, private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route.firstChild) {\r\n      this.route.firstChild.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\r\n        this.routerParams = params;\r\n\r\n        if (this.routerParams.id) {\r\n          this.showDetail = true;\r\n          this.store\r\n            .dispatch(new SelectClassification(this.routerParams.id))\r\n            .subscribe(() => this.store.dispatch(new GetClassifications()));\r\n        }\r\n        if (this.routerParams.id && this.routerParams.id.indexOf('new-classification') !== -1) {\r\n          this.store.dispatch(new CreateClassification());\r\n        }\r\n      });\r\n    }\r\n\r\n    this.selectedClassification$.pipe(takeUntil(this.destroy$)).subscribe((selectedClassification) => {\r\n      this.showDetail = !!selectedClassification;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"workbasket-list-toolbar\">\r\n\r\n  <div class=\"workbasket-list-toolbar__action-toolbar\">\r\n\r\n    <!-- ACTION BUTTONS -->\r\n    <button mat-flat-button class=\"workbasket-list-toolbar__add-button mr-1\" matTooltip=\"Create new workbasket\"\r\n            (click)=\"addWorkbasket()\">\r\n      Add\r\n      <mat-icon class=\"md-20\">add</mat-icon>\r\n    </button>\r\n\r\n    <!-- IMPORT EXPORT -->\r\n    <taskana-administration-import-export *ngIf=\"workbasketListExpanded\" [currentSelection]=\"selectionToImport\" [parentComponent]=\"'workbaskets'\"></taskana-administration-import-export>\r\n\r\n    <span class=\"workbasket-details__spacer\" style=\"flex: 1 1 auto\"> </span>\r\n\r\n    <!-- SORTING -->\r\n    <taskana-shared-sort\r\n      style=\"margin-right: 4px;\" [sortingFields]=\"sortingFields\" (performSorting)=\"sorting($event)\" [defaultSortBy]=\"workbasketDefaultSortBy\">\r\n    </taskana-shared-sort>\r\n\r\n  </div>\r\n\r\n  <!-- FILTER -->\r\n  <div class=\"workbasket-list-toolbar__filter\">\r\n    <button mat-stroked-button class=\"filter__filter-button\" matTooltip=\"Display more filter options\" (click)=\"onClickFilter()\">\r\n      <mat-icon *ngIf=\"!isExpanded\">keyboard_arrow_down</mat-icon>\r\n      <mat-icon *ngIf=\"isExpanded\">keyboard_arrow_up</mat-icon>\r\n    </button>\r\n\r\n    <div class=\"filter__filter-component-wrapper\">\r\n      <taskana-shared-workbasket-filter [isExpanded]=\"isExpanded\" component=\"workbasketList\"></taskana-shared-workbasket-filter>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { Sorting, WORKBASKET_SORT_PARAMETER_NAMING, WorkbasketQuerySortParameter } from 'app/shared/models/sorting';\r\nimport { WorkbasketSummary } from 'app/shared/models/workbasket-summary';\r\nimport { TaskanaType } from 'app/shared/models/taskana-type';\r\nimport { expandDown } from 'app/shared/animations/expand.animation';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { ACTION } from '../../../shared/models/action';\r\nimport { CreateWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { WorkbasketService } from '../../../shared/services/workbasket/workbasket.service';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-list-toolbar',\r\n  animations: [expandDown],\r\n  templateUrl: './workbasket-list-toolbar.component.html',\r\n  styleUrls: ['./workbasket-list-toolbar.component.scss']\r\n})\r\nexport class WorkbasketListToolbarComponent implements OnInit {\r\n  @Input() workbasketListExpanded: boolean = true;\r\n  @Input() workbaskets: WorkbasketSummary[];\r\n  @Input() workbasketDefaultSortBy: WorkbasketQuerySortParameter;\r\n  @Output() performSorting = new EventEmitter<Sorting<WorkbasketQuerySortParameter>>();\r\n\r\n  selectionToImport = TaskanaType.WORKBASKETS;\r\n  sortingFields: Map<WorkbasketQuerySortParameter, string> = WORKBASKET_SORT_PARAMETER_NAMING;\r\n\r\n  isExpanded = false;\r\n  showFilter = false;\r\n\r\n  @Select(WorkbasketSelectors.workbasketActiveAction)\r\n  workbasketActiveAction$: Observable<ACTION>;\r\n\r\n  destroy$ = new Subject<void>();\r\n  action: ACTION;\r\n\r\n  constructor(private store: Store, private workbasketService: WorkbasketService) {}\r\n\r\n  ngOnInit() {\r\n    this.workbasketActiveAction$.pipe(takeUntil(this.destroy$)).subscribe((action) => {\r\n      this.action = action;\r\n    });\r\n  }\r\n\r\n  sorting(sort: Sorting<WorkbasketQuerySortParameter>) {\r\n    this.performSorting.emit(sort);\r\n  }\r\n\r\n  addWorkbasket() {\r\n    if (this.action !== ACTION.CREATE) {\r\n      this.store.dispatch(new CreateWorkbasket());\r\n    }\r\n  }\r\n\r\n  onClickFilter() {\r\n    this.isExpanded = !this.isExpanded;\r\n    this.workbasketService.expandWorkbasketActionToolbar(this.isExpanded);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"workbasket-list\">\r\n  <!-- TOOLBAR -->\r\n  <section #wbToolbar class=\"workbasket-list__toolbar\">\r\n    <taskana-administration-workbasket-list-toolbar [workbaskets]=\"workbasketsSummary$ | async\"\r\n      (performSorting)=\"performSorting($event)\" [workbasketDefaultSortBy]=\"workbasketDefaultSortBy\" [workbasketListExpanded]=\"expanded\">\r\n    </taskana-administration-workbasket-list-toolbar>\r\n  </section>\r\n\r\n  <!-- WORKBASKET LIST -->\r\n  <div class=\"workbasket-list__list-items\" *ngIf=\"((workbasketsSummary$ | async) && (workbasketsSummary$ | async)?.length > 0) else empty_workbaskets\">\r\n    <mat-selection-list #workbasket [multiple]=\"false\">\r\n      <mat-list-option class=\"workbasket-list__list-item\"\r\n                       *ngFor=\"let workbasket of (workbasketsSummary$ | async);\"\r\n                       (click)=\"selectWorkbasket(workbasket.workbasketId)\"\r\n                       [selected]=\"workbasket.workbasketId == selectedId\"\r\n                       [value]=\"workbasket.workbasketId\">\r\n\r\n        <!-- WORKBASKET LIST ITEM -->\r\n        <div class=\"workbasket-list__list-item--wrapper\">\r\n\r\n          <!-- ICON -->\r\n          <div class=\"workbasket-list__list-item--icon\" *ngIf=\"expanded\">\r\n            <taskana-administration-icon-type [type]=\"workbasket.type\" size=\"large\" tooltip=\"true\" [selected]=\"workbasket.workbasketId === selectedId\"></taskana-administration-icon-type>\r\n          </div>\r\n\r\n          <!-- INFORMATION -->\r\n          <div class=\"workbasket-list__list-item--info\">\r\n\r\n            <div class=\"workbasket-list__list-item--wrap\">\r\n              <b>{{workbasket.name}}</b>, <i>{{workbasket.key}}</i>\r\n            </div>\r\n            <p class=\"workbasket-list__list-item--no-wrap\">{{workbasket.description}}</p>\r\n            <p class=\"workbasket-list__list-item--no-wrap\">{{workbasket.owner}}</p>\r\n\r\n            <div class=\"workbasket-list__list-item--marked\" *ngIf=\"workbasket.markedForDeletion\">\r\n              <span title=\"Marked for deletion\" data-toggle=\"tooltip\" class=\"material-icons md-20 {{workbasket.workbasketId === selectedId ? 'white': 'red' }} \">error</span>\r\n            </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <mat-divider></mat-divider>\r\n\r\n      </mat-list-option>\r\n    </mat-selection-list>\r\n  </div>\r\n\r\n\r\n  <!-- SPINNER and EMPTY WORKBASKET LIST -->\r\n  <ng-template #empty_workbaskets>\r\n    <div *ngIf=\"!requestInProgress && !requestInProgressLocal\" class=\"workbasket-list__no-items\">\r\n      <h3 class=\"grey\">There are no workbaskets</h3>\r\n    </div>\r\n  </ng-template>\r\n</div>\r\n\r\n<!-- PAGINATION -->\r\n\r\n<taskana-shared-pagination\r\n        [page]=\"(workbasketsSummaryRepresentation$ | async) ? (workbasketsSummaryRepresentation$ | async)?.page : (workbasketsSummaryRepresentation$ | async)\"\r\n        [type]=\"type\"\r\n        [expanded]=\"expanded\"\r\n        [numberOfItems]=\"(workbasketsSummary$ | async)?.length\"\r\n        [resetPaging]=\"resetPagingSubject.asObservable()\"\r\n        (changePage)=\"changePage($event)\">\r\n</taskana-shared-pagination>\r\n","import { Component, ElementRef, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { WorkbasketSummaryRepresentation } from 'app/shared/models/workbasket-summary-representation';\r\nimport { WorkbasketSummary } from 'app/shared/models/workbasket-summary';\r\nimport { Direction, Sorting, WorkbasketQuerySortParameter } from 'app/shared/models/sorting';\r\n\r\nimport { WorkbasketService } from 'app/shared/services/workbasket/workbasket.service';\r\nimport { OrientationService } from 'app/shared/services/orientation/orientation.service';\r\nimport { ImportExportService } from 'app/administration/services/import-export.service';\r\nimport { Actions, ofActionCompleted, ofActionDispatched, Select, Store } from '@ngxs/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport {\r\n  DeselectWorkbasket,\r\n  GetWorkbasketsSummary,\r\n  SelectWorkbasket\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { Workbasket } from '../../../shared/models/workbasket';\r\nimport { MatSelectionList } from '@angular/material/list';\r\nimport { DomainService } from '../../../shared/services/domain/domain.service';\r\nimport { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\r\nimport { WorkbasketQueryFilterParameter } from '../../../shared/models/workbasket-query-filter-parameter';\r\nimport { QueryPagingParameter } from '../../../shared/models/query-paging-parameter';\r\nimport { FilterSelectors } from '../../../shared/store/filter-store/filter.selectors';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-list',\r\n  templateUrl: './workbasket-list.component.html',\r\n  styleUrls: ['./workbasket-list.component.scss']\r\n})\r\nexport class WorkbasketListComponent implements OnInit, OnDestroy {\r\n  selectedId = '';\r\n  type = 'workbaskets';\r\n  workbasketDefaultSortBy: WorkbasketQuerySortParameter = WorkbasketQuerySortParameter.NAME;\r\n  sort: Sorting<WorkbasketQuerySortParameter> = {\r\n    'sort-by': this.workbasketDefaultSortBy,\r\n    order: Direction.ASC\r\n  };\r\n  filterBy: WorkbasketQueryFilterParameter = {};\r\n  pageParameter: QueryPagingParameter = {\r\n    page: 1,\r\n    'page-size': 9\r\n  };\r\n  requestInProgress: boolean;\r\n  requestInProgressLocal = false;\r\n\r\n  resetPagingSubject = new Subject<null>();\r\n\r\n  @Input() expanded: boolean;\r\n  @Select(WorkbasketSelectors.workbasketsSummary)\r\n  workbasketsSummary$: Observable<WorkbasketSummary[]>;\r\n  @Select(WorkbasketSelectors.workbasketsSummaryRepresentation)\r\n  workbasketsSummaryRepresentation$: Observable<WorkbasketSummaryRepresentation>;\r\n  @Select(WorkbasketSelectors.selectedWorkbasket)\r\n  selectedWorkbasket$: Observable<Workbasket>;\r\n  @Select(FilterSelectors.getWorkbasketListFilter)\r\n  getWorkbasketListFilter$: Observable<WorkbasketQueryFilterParameter>;\r\n  destroy$ = new Subject<void>();\r\n  @ViewChild('workbasket') workbasketList: MatSelectionList;\r\n  @ViewChild('wbToolbar', { static: true })\r\n  private toolbarElement: ElementRef;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private workbasketService: WorkbasketService,\r\n    private orientationService: OrientationService,\r\n    private importExportService: ImportExportService,\r\n    private domainService: DomainService,\r\n    private requestInProgressService: RequestInProgressService,\r\n    private ngxsActions$: Actions\r\n  ) {\r\n    this.ngxsActions$.pipe(ofActionDispatched(GetWorkbasketsSummary), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.requestInProgressService.setRequestInProgress(true);\r\n      this.requestInProgressLocal = true;\r\n    });\r\n    this.ngxsActions$.pipe(ofActionCompleted(GetWorkbasketsSummary), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.requestInProgressService.setRequestInProgress(false);\r\n      this.requestInProgressLocal = false;\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n    this.selectedWorkbasket$.pipe(takeUntil(this.destroy$)).subscribe((selectedWorkbasket) => {\r\n      if (typeof selectedWorkbasket !== 'undefined') {\r\n        this.selectedId = selectedWorkbasket.workbasketId;\r\n      } else {\r\n        this.selectedId = undefined;\r\n      }\r\n    });\r\n\r\n    this.workbasketService\r\n      .workbasketSavedTriggered()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.performRequest();\r\n      });\r\n\r\n    this.orientationService\r\n      .getOrientation()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.refreshWorkbasketList();\r\n      });\r\n\r\n    this.importExportService\r\n      .getImportingFinished()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.refreshWorkbasketList();\r\n      });\r\n\r\n    this.domainService\r\n      .getSelectedDomain()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((domain) => {\r\n        this.filterBy.domain = [domain];\r\n        this.performRequest();\r\n      });\r\n\r\n    this.workbasketService\r\n      .getWorkbasketActionToolbarExpansion()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(() => {\r\n        this.requestInProgressService.setRequestInProgress(true);\r\n        setTimeout(() => {\r\n          this.refreshWorkbasketList();\r\n        }, 1);\r\n      });\r\n\r\n    this.requestInProgressService\r\n      .getRequestInProgress()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((value) => {\r\n        this.requestInProgress = value;\r\n      });\r\n\r\n    this.getWorkbasketListFilter$.pipe(takeUntil(this.destroy$)).subscribe((filter) => {\r\n      this.performFilter(filter);\r\n    });\r\n  }\r\n\r\n  selectWorkbasket(id: string) {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n    if (this.selectedId === id) {\r\n      this.store\r\n        .dispatch(new DeselectWorkbasket())\r\n        .subscribe(() => this.requestInProgressService.setRequestInProgress(false));\r\n    } else {\r\n      this.store\r\n        .dispatch(new SelectWorkbasket(id))\r\n        .subscribe(() => this.requestInProgressService.setRequestInProgress(false));\r\n    }\r\n  }\r\n\r\n  performSorting(sort: Sorting<WorkbasketQuerySortParameter>) {\r\n    this.sort = sort;\r\n    this.performRequest();\r\n  }\r\n\r\n  performFilter(filterBy: WorkbasketQueryFilterParameter) {\r\n    const domain = this.filterBy.domain;\r\n    this.filterBy = { ...filterBy };\r\n    this.filterBy.domain = domain;\r\n    this.resetPagingSubject.next(null);\r\n    // this.performRequest();\r\n  }\r\n\r\n  changePage(page) {\r\n    this.pageParameter.page = page;\r\n    this.performRequest();\r\n  }\r\n\r\n  refreshWorkbasketList() {\r\n    this.pageParameter['page-size'] = this.orientationService.calculateNumberItemsList(\r\n      window.innerHeight,\r\n      92,\r\n      200 + this.toolbarElement.nativeElement.offsetHeight,\r\n      false\r\n    );\r\n    this.performRequest();\r\n  }\r\n\r\n  performRequest() {\r\n    this.store.dispatch(new GetWorkbasketsSummary(true, this.filterBy, this.sort, this.pageParameter)).subscribe(() => {\r\n      this.requestInProgressService.setRequestInProgress(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { asyncScheduler } from '../scheduler/async';\nimport { isValidDate } from '../util/isDate';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { executeSchedule } from '../util/executeSchedule';\nexport const TimeoutError = createErrorClass((_super) => function TimeoutErrorImpl(info = null) {\n    _super(this);\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    this.info = info;\n});\nexport function timeout(config, schedulerArg) {\n    const { first, each, with: _with = timeoutErrorFactory, scheduler = schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler, meta = null, } = (isValidDate(config) ? { first: config } : typeof config === 'number' ? { each: config } : config);\n    if (first == null && each == null) {\n        throw new TypeError('No timeout provided.');\n    }\n    return operate((source, subscriber) => {\n        let originalSourceSubscription;\n        let timerSubscription;\n        let lastValue = null;\n        let seen = 0;\n        const startTimer = (delay) => {\n            timerSubscription = executeSchedule(subscriber, scheduler, () => {\n                try {\n                    originalSourceSubscription.unsubscribe();\n                    innerFrom(_with({\n                        meta,\n                        lastValue,\n                        seen,\n                    })).subscribe(subscriber);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                }\n            }, delay);\n        };\n        originalSourceSubscription = source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            seen++;\n            subscriber.next((lastValue = value));\n            each > 0 && startTimer(each);\n        }, undefined, undefined, () => {\n            if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n            }\n            lastValue = null;\n        }));\n        !seen && startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);\n    });\n}\nfunction timeoutErrorFactory(info) {\n    throw new TimeoutError(info);\n}\n","<div *ngIf=\"workbasket\" id=\"wb-information\">\r\n\r\n  <div class=\"workbasket-information-wrapper\">\r\n    <ng-form #WorkbasketForm=\"ngForm\">\r\n      <div class=\"form\">\r\n\r\n        <!-- GENERAL FIELDS -->\r\n        <h6 class=\"subheading\"> General </h6>\r\n        <mat-divider class=\"horizontal-line\"> </mat-divider>\r\n\r\n        <!-- GENERAL -->\r\n        <div class=\"general\">\r\n\r\n          <!-- GENERAL LEFT COLUMN -->\r\n          <div class=\"general__left-column\">\r\n\r\n            <!-- KEY -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Key</mat-label>\r\n              <label for=\"workbasket-key\"></label>\r\n              <input matInput required type=\"text\" #key=\"ngModel\" maxlength=\"64\" [disabled]=\"action == 0 || action == 3\"\r\n                     id=\"workbasket-key\" placeholder=\"Key\" [(ngModel)]=\"workbasket.key\" name=\"workbasket.key\"\r\n                     (input)=\"validateInputOverflow(key, 64, $event)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(key.name)\" class=\"error\">{{lengthError}}</div>\r\n            <taskana-shared-field-error-display *ngIf=\"action != 3\" [displayError]=\"!isFieldValid('workbasket.key')\"\r\n                                                [validationTrigger]=\"this.toggleValidationMap.get('workbasket.key')\" errorMessage=\"* Key is required\">\r\n            </taskana-shared-field-error-display>\r\n\r\n            <!-- NAME -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Name</mat-label>\r\n              <label for=\"workbasket-name\"></label>\r\n              <input matInput type=\"text\" required maxlength=\"255\" #name=\"ngModel\" id=\"workbasket-name\" placeholder=\"Name\"\r\n                     [(ngModel)]=\"workbasket.name\" name=\"workbasket.name\" (input)=\"validateInputOverflow(name, 255)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(name.name)\" class=\"error\">{{lengthError}}</div>\r\n            <taskana-shared-field-error-display [displayError]=\"!isFieldValid('workbasket.name')\"\r\n                                                [validationTrigger]=\"this.toggleValidationMap.get('workbasket.name')\" errorMessage=\"* Name is required\">\r\n            </taskana-shared-field-error-display>\r\n\r\n            <!-- OWNER -->\r\n            <taskana-shared-type-ahead *ngIf=\"lookupField else ownerInput\"\r\n                                       [savedAccessId]=\"workbasket.owner\"\r\n                                       placeHolderMessage=\"Owner\"\r\n                                       [entityId]=\"workbasket.workbasketId\"\r\n                                       [displayError]=\"true\"\r\n                                       (isFormValid)=\"isOwnerValid = $event\"\r\n                                       (accessIdEventEmitter)=\"onSelectedOwner($event)\">\r\n            </taskana-shared-type-ahead>\r\n\r\n            <ng-template #ownerInput>\r\n              <input type=\"text\" required maxlength=\"128\" #owner=\"ngModel\" class=\"form-control\" id=\"wb-owner\"\r\n                     placeholder=\"Owner\" [(ngModel)]=\"workbasket.owner\" name=\"workbasket.owner\"\r\n                     (input)=\"validateInputOverflow(owner, 128)\">\r\n              <div *ngIf=\"inputOverflowMap.get(owner.name)\" class=\"error\">{{lengthError}}</div>\r\n              <taskana-shared-field-error-display [displayError]=\"!isFieldValid('workbasket.owner')\"\r\n                                                  [validationTrigger]=\"this.toggleValidationMap.get('workbasket.owner')\" errorMessage=\"* Owner is required\">\r\n              </taskana-shared-field-error-display>\r\n            </ng-template>\r\n\r\n            <!-- DESCRIPTION AND TYPE -->\r\n            <div class=\"general__description-and-type\">\r\n\r\n              <!-- TYPE -->\r\n              <mat-form-field appearance=\"outline\" style=\"width: 28%\">\r\n                <mat-label>Type</mat-label>\r\n                <mat-select [(value)]=\"this.workbasket.type\">\r\n                  <mat-select-trigger>\r\n                    <taskana-administration-icon-type [type]='workbasket.type'></taskana-administration-icon-type>\r\n                    {{allTypes.get(workbasket.type)}}\r\n                  </mat-select-trigger>\r\n                  <mat-option *ngFor=\"let type of allTypes | mapValues | removeEmptyType\" value=\"{{type.key}}\">\r\n                    <taskana-administration-icon-type [type]='type.key' [text]=\"type.value\">\r\n                    </taskana-administration-icon-type>\r\n                  </mat-option>\r\n                </mat-select>\r\n              </mat-form-field>\r\n\r\n              <!-- DESCRIPTION -->\r\n              <div style=\"display: block; width: 68%\">\r\n                <mat-form-field appearance=\"outline\" style=\"width: 100%\">\r\n                  <mat-label>Description</mat-label>\r\n                  <label for=\"workbasket-description\"></label>\r\n                  <textarea matInput cdkTextareaAutosize cdkAutosizeMinRows=\"7\" cdkAutosizeMaxRows=\"7\" maxlength=\"255\"\r\n                            id=\"workbasket-description\" placeholder=\"Description\" [(ngModel)]=\"workbasket.description\"\r\n                            name=\"workbasket.description\" #description=\"ngModel\"\r\n                            (input)=\"validateInputOverflow(description, 255)\"></textarea>\r\n                </mat-form-field>\r\n                <mat-error *ngIf=\"inputOverflowMap.get(description.name)\" class=\"error\">{{lengthError}} </mat-error>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- GENERAL SPACER -->\r\n          <div class=\"general__spacer\"> </div>\r\n\r\n          <!-- GENERAL RIGHT COLUMN -->\r\n          <div class=\"general__right-column\">\r\n\r\n            <!-- DOMAIN -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>Domain</mat-label>\r\n              <label for=\"workbasket-domain\"></label>\r\n              <input matInput type=\"text\" disabled id=\"workbasket-domain\" placeholder=\"Domain\"\r\n                     [(ngModel)]=\"workbasket.domain\" name=\"classification.domain\">\r\n            </mat-form-field>\r\n\r\n            <!-- ORGANISATIONAL LEVEL 1 -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>OrgLevel 1</mat-label>\r\n              <input matInput type=\"text\" #orgLevel1=\"ngModel\" maxlength=\"255\" placeholder=\"OrgLevel 1\"\r\n                     [(ngModel)]=\"workbasket.orgLevel1\" name=\"workbasket.orgLevel1\"\r\n                     (input)=\"validateInputOverflow(orgLevel1, 255)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(orgLevel1.name)\" class=\"error\">{{lengthError}}</div>\r\n\r\n            <!-- ORGANISATIONAL LEVEL 2 -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>OrgLevel 2</mat-label>\r\n              <input matInput type=\"text\" #orgLevel2=\"ngModel\" maxlength=\"255\" placeholder=\"OrgLevel 2\"\r\n                     [(ngModel)]=\"workbasket.orgLevel2\" name=\"workbasket.orgLevel2\"\r\n                     (input)=\"validateInputOverflow(orgLevel2, 255)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(orgLevel2.name)\" class=\"error\">{{lengthError}}</div>\r\n\r\n            <!-- ORGANISATIONAL LEVEL 3 -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>OrgLevel 3</mat-label>\r\n              <input matInput type=\"text\" #orgLevel3=\"ngModel\" maxlength=\"255\" placeholder=\"OrgLevel 3\"\r\n                     [(ngModel)]=\"workbasket.orgLevel3\" name=\"workbasket.orgLevel3\"\r\n                     (input)=\"validateInputOverflow(orgLevel3, 255)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(orgLevel3.name)\" class=\"error\">{{lengthError}}</div>\r\n\r\n            <!-- ORGANISATIONAL LEVEL 4 -->\r\n            <mat-form-field appearance=\"outline\">\r\n              <mat-label>OrgLevel 4</mat-label>\r\n              <input matInput type=\"text\" #orgLevel4=\"ngModel\" maxlength=\"255\" placeholder=\"OrgLevel 4\"\r\n                     [(ngModel)]=\"workbasket.orgLevel4\" name=\"workbasket.orgLevel4\"\r\n                     (input)=\"validateInputOverflow(orgLevel4, 255)\">\r\n            </mat-form-field>\r\n            <div *ngIf=\"inputOverflowMap.get(orgLevel4.name)\" class=\"error\">{{lengthError}}</div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n\r\n\r\n        <!-- CUSTOM FIELDS -->\r\n        <h6 class=\"subheading\"> Custom Fields </h6>\r\n        <mat-divider class=\"horizontal-line\"> </mat-divider>\r\n\r\n        <div class=\"custom-fields\">\r\n          <ng-container *ngFor=\"let customField of customFields$ | async; let index = index\">\r\n            <div *ngIf=\"customField.visible\" class=\"custom-fields__input\">\r\n              <mat-form-field appearance=\"outline\" class=\"custom-fields__form-field\">\r\n                <mat-label>{{customField.field}}</mat-label>\r\n                <label for='wb-custom-{{index+1}}'></label>\r\n                <input matInput type=\"text\" [placeholder]=\"customField.field\"\r\n                       [(ngModel)]=\"workbasket[getWorkbasketCustomProperty(index + 1)]\" id=\"wb-custom-{{index+1}}\"\r\n                       name=\"workbasket[{{getWorkbasketCustomProperty(index + 1)}}]\" maxlength=\"255\" #custom=\"ngModel\"\r\n                       (input)=\"validateInputOverflow(custom, 255)\">\r\n              </mat-form-field>\r\n              <div *ngIf=\"inputOverflowMap.get(custom.name)\" class=\"error\">{{lengthError}}</div>\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n\r\n      </div>\r\n\r\n    </ng-form>\r\n  </div>\r\n</div>\r\n","import { Component, Input, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { NgForm } from '@angular/forms';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { ACTION } from 'app/shared/models/action';\r\nimport { customFieldCount, Workbasket } from 'app/shared/models/workbasket';\r\nimport { TaskanaDate } from 'app/shared/util/taskana.date';\r\nimport { WorkbasketService } from 'app/shared/services/workbasket/workbasket.service';\r\nimport { RequestInProgressService } from 'app/shared/services/request-in-progress/request-in-progress.service';\r\nimport { FormsValidatorService } from 'app/shared/services/forms-validator/forms-validator.service';\r\nimport { filter, map, takeUntil } from 'rxjs/operators';\r\nimport { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { CustomField, getCustomFields, WorkbasketsCustomisation } from '../../../shared/models/customisation';\r\nimport {\r\n  MarkWorkbasketForDeletion,\r\n  RemoveDistributionTarget,\r\n  SaveNewWorkbasket,\r\n  UpdateWorkbasket\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { WorkbasketComponent } from '../../models/workbasket-component';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { ButtonAction } from '../../models/button-action';\r\nimport { AccessId } from '../../../shared/models/access-id';\r\nimport { cloneDeep } from 'lodash';\r\nimport { trimForm } from '../../../shared/util/form-trimmer';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-information',\r\n  templateUrl: './workbasket-information.component.html',\r\n  styleUrls: ['./workbasket-information.component.scss']\r\n})\r\nexport class WorkbasketInformationComponent implements OnInit, OnChanges, OnDestroy {\r\n  @Input()\r\n  workbasket: Workbasket;\r\n\r\n  @Input()\r\n  action: ACTION;\r\n\r\n  @ViewChild('WorkbasketForm')\r\n  workbasketForm: NgForm;\r\n\r\n  workbasketClone: Workbasket;\r\n  allTypes: Map<string, string>;\r\n  toggleValidationMap = new Map<string, boolean>();\r\n  lookupField = false;\r\n  isOwnerValid: boolean = true;\r\n\r\n  readonly lengthError = 'You have reached the maximum length for this field';\r\n  inputOverflowMap = new Map<string, boolean>();\r\n  validateInputOverflow: Function;\r\n\r\n  @Select(EngineConfigurationSelectors.workbasketsCustomisation)\r\n  workbasketsCustomisation$: Observable<WorkbasketsCustomisation>;\r\n\r\n  @Select(WorkbasketSelectors.buttonAction)\r\n  buttonAction$: Observable<ButtonAction>;\r\n\r\n  @Select(WorkbasketSelectors.selectedComponent)\r\n  selectedComponent$: Observable<WorkbasketComponent>;\r\n\r\n  customFields$: Observable<CustomField[]>;\r\n  destroy$ = new Subject<void>();\r\n\r\n  constructor(\r\n    private workbasketService: WorkbasketService,\r\n    private requestInProgressService: RequestInProgressService,\r\n    private formsValidatorService: FormsValidatorService,\r\n    private notificationService: NotificationService,\r\n    private store: Store\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.allTypes = new Map([\r\n      ['PERSONAL', 'Personal'],\r\n      ['GROUP', 'Group'],\r\n      ['CLEARANCE', 'Clearance'],\r\n      ['TOPIC', 'Topic']\r\n    ]);\r\n\r\n    this.customFields$ = this.workbasketsCustomisation$.pipe(\r\n      map((customisation) => customisation.information),\r\n      getCustomFields(customFieldCount)\r\n    );\r\n    this.workbasketsCustomisation$.pipe(takeUntil(this.destroy$)).subscribe((workbasketsCustomization) => {\r\n      if (workbasketsCustomization.information.owner) {\r\n        this.lookupField = workbasketsCustomization.information.owner.lookupField;\r\n      }\r\n    });\r\n    this.formsValidatorService.inputOverflowObservable.pipe(takeUntil(this.destroy$)).subscribe((inputOverflowMap) => {\r\n      this.inputOverflowMap = inputOverflowMap;\r\n    });\r\n    this.validateInputOverflow = (inputFieldModel, maxLength) => {\r\n      if (typeof inputFieldModel.value !== 'undefined') {\r\n        this.formsValidatorService.validateInputOverflow(inputFieldModel, maxLength);\r\n      }\r\n    };\r\n    this.buttonAction$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .pipe(filter((buttonAction) => typeof buttonAction !== 'undefined'))\r\n      .subscribe((button) => {\r\n        switch (button) {\r\n          case ButtonAction.SAVE:\r\n            this.onSubmit();\r\n            break;\r\n          case ButtonAction.UNDO:\r\n            this.onUndo();\r\n            break;\r\n          case ButtonAction.REMOVE_AS_DISTRIBUTION_TARGETS:\r\n            this.removeDistributionTargets();\r\n            break;\r\n          case ButtonAction.DELETE:\r\n            this.removeWorkbasket();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  ngOnChanges(changes?: SimpleChanges) {\r\n    this.workbasketClone = { ...this.workbasket };\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formsValidatorService.formSubmitAttempt = true;\r\n    trimForm(this.workbasketForm);\r\n    this.formsValidatorService.validateFormInformation(this.workbasketForm, this.toggleValidationMap).then((value) => {\r\n      if (value && this.isOwnerValid) {\r\n        this.onSave();\r\n      } else {\r\n        this.notificationService.showError('WORKBASKET_SAVE');\r\n      }\r\n    });\r\n  }\r\n\r\n  isFieldValid(field: string): boolean {\r\n    return this.formsValidatorService.isFieldValid(this.workbasketForm, field);\r\n  }\r\n\r\n  onUndo() {\r\n    this.formsValidatorService.formSubmitAttempt = false;\r\n    this.notificationService.showSuccess('WORKBASKET_RESTORE');\r\n    this.workbasket = { ...this.workbasketClone };\r\n  }\r\n\r\n  removeWorkbasket() {\r\n    this.notificationService.showDialog(\r\n      'WORKBASKET_DELETE',\r\n      { workbasketKey: this.workbasket.key },\r\n      this.onRemoveConfirmed.bind(this)\r\n    );\r\n  }\r\n\r\n  removeDistributionTargets() {\r\n    this.store.dispatch(new RemoveDistributionTarget(this.workbasket._links.removeDistributionTargets.href));\r\n  }\r\n\r\n  onSave() {\r\n    this.beforeRequest();\r\n    if (!this.workbasket.workbasketId) {\r\n      this.postNewWorkbasket();\r\n    } else {\r\n      this.store.dispatch(new UpdateWorkbasket(this.workbasket._links.self.href, this.workbasket)).subscribe(() => {\r\n        this.requestInProgressService.setRequestInProgress(false);\r\n        this.workbasketClone = cloneDeep(this.workbasket);\r\n      });\r\n    }\r\n  }\r\n\r\n  beforeRequest() {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n  }\r\n\r\n  afterRequest() {\r\n    this.requestInProgressService.setRequestInProgress(false);\r\n    this.workbasketService.triggerWorkBasketSaved();\r\n  }\r\n\r\n  postNewWorkbasket() {\r\n    this.addDateToWorkbasket();\r\n    this.store.dispatch(new SaveNewWorkbasket(this.workbasket)).subscribe(() => {\r\n      this.afterRequest();\r\n    });\r\n  }\r\n\r\n  addDateToWorkbasket() {\r\n    const date = TaskanaDate.getDate();\r\n    this.workbasket.created = date;\r\n    this.workbasket.modified = date;\r\n  }\r\n\r\n  onRemoveConfirmed() {\r\n    this.beforeRequest();\r\n    this.store.dispatch(new MarkWorkbasketForDeletion(this.workbasket._links.self.href)).subscribe(() => {\r\n      this.afterRequest();\r\n    });\r\n  }\r\n\r\n  onSelectedOwner(owner: AccessId) {\r\n    this.workbasket.owner = owner.accessId;\r\n  }\r\n\r\n  getWorkbasketCustomProperty(custom: number) {\r\n    return `custom${custom}`;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { Links } from './links';\r\nimport { WorkbasketType } from './workbasket-type';\r\n\r\nexport interface Workbasket {\r\n  workbasketId?: string;\r\n  key?: string;\r\n  name?: string;\r\n  domain?: string;\r\n  type?: WorkbasketType;\r\n  description?: string;\r\n  owner?: string;\r\n  custom1?: string;\r\n  custom2?: string;\r\n  custom3?: string;\r\n  custom4?: string;\r\n  orgLevel1?: string;\r\n  orgLevel2?: string;\r\n  orgLevel3?: string;\r\n  orgLevel4?: string;\r\n  markedForDeletion?: boolean;\r\n  created?: string;\r\n  modified?: string;\r\n  _links?: Links;\r\n  // this is not part of the API, but needed for frontend\r\n  selected?: boolean;\r\n}\r\n\r\nexport const customFieldCount: number = 4;\r\n","<div *ngIf=\"workbasket\" id=\"wb-information\">\r\n\r\n\t<!-- ACCESS ITEMS -->\r\n\t<div class=\"workbasket-access-items\"\r\n\t\t[ngStyle]=\"{'width': expanded ? 'calc(' + 100 + 'vw - 500px)' : 'calc(' + 100 + 'vw - 250px)'}\">\r\n\t\t<div class=\" workbasket-access-items__buttons\">\r\n\t\t\t<button mat-stroked-button matTooltip=\"Add new access\" type=\"button\"\r\n\t\t\t\tclass=\"workbasket-access-items__buttons-add-access\" (click)=\"addAccessItem()\">\r\n\t\t\t\tAdd new access\r\n\t\t\t\t<mat-icon color=\"green-blue\" aria-label=\"add new access\">add</mat-icon>\r\n\t\t\t</button>\r\n\t\t\t<button mat-stroked-button matTooltip=\"Delete selected access\" type=\"button\"\r\n\t\t\t\tclass=\"workbasket-access-items__buttons-delete-access\" (click)=\"deleteAccessItems()\">\r\n\t\t\t\tDelete selected access\r\n\t\t\t\t<mat-icon color=\"green-blue\" aria-label=\"delete access\">delete</mat-icon>\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t\t<form [formGroup]=\"AccessItemsForm\" class=\"workbasket-access-items__form\">\r\n\t\t\t<table formArrayName=\"accessItemsGroups\" id=\"table-access-items\" class=\"workbasket-access-items__table\">\r\n\t\t\t\t<!-- TITLE ROW -->\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th></th>\r\n            <th taskanaResizableWidth class=\"required-header test\">AccessID</th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Select all</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Read</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Read tasks</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Open</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Edit tasks</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Append</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Transfer</span></div>\r\n            </th>\r\n            <th class=\"rotated-th\">\r\n              <div><span>Distribute</span></div>\r\n            </th>\r\n\t\t\t\t\t\t<ng-container *ngFor=\"let customField of customFields$ | async\">\r\n              <th *ngIf=\"customField.visible\" class=\"rotated-th\">\r\n                <div><span>{{customField.field}}</span></div>\r\n              </th>\r\n            </ng-container>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\r\n\t\t\t\t<tbody>\r\n\t\t\t\t\t<tr *ngFor=\"let accessItem of accessItemsGroups?.controls; let index = index;\"\r\n\t\t\t\t\t\t[formGroupName]=\"index\">\r\n\t\t\t\t\t\t<!-- REMOVE BUTTON -->\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__select-row\" type=\"checkbox\" aria-label=\"selectRow\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"selectRow\" (change)=\"selectRow($event, index)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<!-- ACCESS ID -->\r\n\t\t\t\t\t\t<td *ngIf=\"(accessItemsCustomization$ | async)?.accessId.lookupField else accessIdInput\"\r\n\t\t\t\t\t\t\tclass=\"workbasket-access-items__typeahead\" [ngClass]=\"{\t'has-warning': (accessItemsClone[index].accessId !== accessItem.value.accessId),\r\n                \t\t\t\t\t\t\t'has-error': !accessItem.value.accessId }\">\r\n\r\n\t\t\t\t\t\t\t<taskana-shared-type-ahead\r\n                [savedAccessId]=\"accessItem\"\r\n                placeHolderMessage=\"Access id\"\r\n                [displayError]=\"true\"\r\n                [isRequired]=\"true\"\r\n                (accessIdEventEmitter)=\"accessItemSelected($event, index)\">\r\n\t\t\t\t\t\t\t</taskana-shared-type-ahead>\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<ng-template #accessIdInput>\r\n\t\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t\t<div [ngClass]=\"{ 'has-warning': (accessItemsClone[index].accessId !== accessItem.value.accessId),\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  'has-error': !accessItem.value.accessId && formsValidatorService.formSubmitAttempt}\">\r\n\t\t\t\t\t\t\t\t\t<input matInput type=\"text\" formControlName=\"accessId\"\r\n\t\t\t\t\t\t\t\t\t\tplaceholder=\"{{accessItem.invalid ? '* Access id is required': ''}}\"\r\n\t\t\t\t\t\t\t\t\t\t[@validation]=\"toggleValidationAccessIdMap.get(index)\" #htmlInputElement>\r\n\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</ng-template>\r\n\r\n\t\t\t\t\t\t<!-- SELECT ALL -->\r\n\t\t\t\t\t\t<td>\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__check-all\" type=\"checkbox\" id=\"checkbox-{{index}}-00\"\r\n\t\t\t\t\t\t\t\t(change)=\"checkAll(index, $event)\" aria-label=\"checkAll\" aria-labelledby=\"checkAll\">\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<!-- READ -->\r\n\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': (accessItemsClone[index].permRead !== accessItem.value.permRead)}\">\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-0\" formControlName=\"permRead\" aria-label=\"permRead\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"permRead\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n            <!-- READ TASKS -->\r\n            <td\r\n              [ngClass]=\"{ 'has-changes': (accessItemsClone[index].permReadTasks !== accessItem.value.permReadTasks)}\">\r\n              <input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n                id=\"checkbox-{{index}}-1\" formControlName=\"permReadTasks\" aria-label=\"permReadTasks\"\r\n                aria-labelledby=\"permReadTasks\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n            </td>\r\n\r\n\t\t\t\t\t\t<!-- OPEN -->\r\n\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': (accessItemsClone[index].permOpen !== accessItem.value.permOpen)}\">\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-2\" formControlName=\"permOpen\" aria-label=\"permOpen\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"permOpen\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n            <!-- EDIT TASKS -->\r\n            <td\r\n              [ngClass]=\"{ 'has-changes': (accessItemsClone[index].permEditTasks !== accessItem.value.permEditTasks)}\">\r\n              <input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n                id=\"checkbox-{{index}}-3\" formControlName=\"permEditTasks\" aria-label=\"permEditTasks\"\r\n                aria-labelledby=\"permEditTasks\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n            </td>\r\n\r\n\t\t\t\t\t\t<!-- APPEND -->\r\n\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': (accessItemsClone[index].permAppend !== accessItem.value.permAppend)}\">\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-4\" formControlName=\"permAppend\" aria-label=\"permAppend\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"permAppend\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<!-- TRANSFER -->\r\n\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': (accessItemsClone[index].permTransfer !== accessItem.value.permTransfer)}\">\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-5\" formControlName=\"permTransfer\" aria-label=\"permTransfer\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"permTransfer\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<!-- DISTRIBUTE -->\r\n\t\t\t\t\t\t<td\r\n\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': (accessItemsClone[index].permDistribute !== accessItem.value.permDistribute)}\">\r\n\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-6\" formControlName=\"permDistribute\" aria-label=\"permDistribute\"\r\n\t\t\t\t\t\t\t\taria-labelledby=\"permDistribute\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t</td>\r\n\r\n\t\t\t\t\t\t<!-- CUSTOM FIELDS -->\r\n\t\t\t\t\t\t<ng-container *ngFor=\"let customField of customFields$ | async; let customIndex = index\">\r\n\t\t\t\t\t\t\t<td *ngIf=\"customField.visible\"\r\n\t\t\t\t\t\t\t\t[ngClass]=\"{ 'has-changes': accessItemsClone[index][getAccessItemCustomProperty(customIndex + 1)] !== accessItem.value[getAccessItemCustomProperty(customIndex+1)] }\">\r\n\t\t\t\t\t\t\t\t<input class=\"workbasket-access-items__permission-checkbox\" type=\"checkbox\"\r\n\t\t\t\t\t\t\t\t\tid=\"checkbox-{{index}}-{{customIndex + 7}}\"\r\n\t\t\t\t\t\t\t\t\tformControlName=\"permCustom{{customIndex+1}}\" aria-label=\"customField\"\r\n\t\t\t\t\t\t\t\t\taria-labelledby=\"customField\" (change)=\"setSelectAllCheckbox(this.index, $event)\">\r\n\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t</ng-container>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</tbody>\r\n\t\t\t</table>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n","import {\r\n  AfterViewChecked,\r\n  AfterViewInit,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  QueryList,\r\n  SimpleChanges,\r\n  ViewChildren\r\n} from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Actions, ofActionCompleted, Select, Store } from '@ngxs/store';\r\nimport { FormArray, FormBuilder, Validators } from '@angular/forms';\r\n\r\nimport { Workbasket } from 'app/shared/models/workbasket';\r\nimport { customFieldCount, WorkbasketAccessItems } from 'app/shared/models/workbasket-access-items';\r\nimport { WorkbasketAccessItemsRepresentation } from 'app/shared/models/workbasket-access-items-representation';\r\nimport { RequestInProgressService } from 'app/shared/services/request-in-progress/request-in-progress.service';\r\nimport { highlight } from 'app/shared/animations/validation.animation';\r\nimport { FormsValidatorService } from 'app/shared/services/forms-validator/forms-validator.service';\r\nimport { AccessId } from 'app/shared/models/access-id';\r\nimport { EngineConfigurationSelectors } from 'app/shared/store/engine-configuration-store/engine-configuration.selectors';\r\nimport { filter, take, takeUntil, tap } from 'rxjs/operators';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { AccessItemsCustomisation, CustomField, getCustomFields } from '../../../shared/models/customisation';\r\nimport {\r\n  GetWorkbasketAccessItems,\r\n  OnButtonPressed,\r\n  SaveNewWorkbasket,\r\n  UpdateWorkbasket,\r\n  UpdateWorkbasketAccessItems\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { WorkbasketComponent } from '../../models/workbasket-component';\r\nimport { ButtonAction } from '../../models/button-action';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-access-items',\r\n  templateUrl: './workbasket-access-items.component.html',\r\n  animations: [highlight],\r\n  styleUrls: ['./workbasket-access-items.component.scss']\r\n})\r\nexport class WorkbasketAccessItemsComponent implements OnInit, OnChanges, OnDestroy, AfterViewInit, AfterViewChecked {\r\n  @Input()\r\n  workbasket: Workbasket;\r\n\r\n  @Input()\r\n  expanded: boolean;\r\n\r\n  @ViewChildren('htmlInputElement')\r\n  inputs: QueryList<ElementRef>;\r\n\r\n  selectedRows: number[] = [];\r\n  workbasketClone: Workbasket;\r\n\r\n  customFields$: Observable<CustomField[]>;\r\n  keysOfVisibleFields: string[];\r\n\r\n  accessItemsRepresentation: WorkbasketAccessItemsRepresentation;\r\n  accessItemsClone: WorkbasketAccessItems[];\r\n  accessItemsResetClone: WorkbasketAccessItems[];\r\n  AccessItemsForm = this.formBuilder.group({\r\n    accessItemsGroups: this.formBuilder.array([])\r\n  });\r\n\r\n  toggleValidationAccessIdMap = new Map<number, boolean>();\r\n  added = false;\r\n  isNewAccessItemsFromStore = false;\r\n  isAccessItemsTabSelected = false;\r\n  destroy$ = new Subject<void>();\r\n\r\n  @Select(WorkbasketSelectors.selectedWorkbasket)\r\n  selectedWorkbasket$: Observable<Workbasket>;\r\n\r\n  @Select(EngineConfigurationSelectors.accessItemsCustomisation)\r\n  accessItemsCustomization$: Observable<AccessItemsCustomisation>;\r\n\r\n  @Select(WorkbasketSelectors.workbasketAccessItems)\r\n  accessItemsRepresentation$: Observable<WorkbasketAccessItemsRepresentation>;\r\n\r\n  @Select(WorkbasketSelectors.buttonAction)\r\n  buttonAction$: Observable<ButtonAction>;\r\n\r\n  @Select(WorkbasketSelectors.selectedComponent)\r\n  selectedComponent$: Observable<WorkbasketComponent>;\r\n\r\n  constructor(\r\n    private requestInProgressService: RequestInProgressService,\r\n    private formBuilder: FormBuilder,\r\n    public formsValidatorService: FormsValidatorService,\r\n    private notificationsService: NotificationService,\r\n    private store: Store,\r\n    private ngxsActions$: Actions\r\n  ) {}\r\n\r\n  get accessItemsGroups(): FormArray {\r\n    return this.AccessItemsForm.get('accessItemsGroups') as FormArray;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.init();\r\n\r\n    this.selectedComponent$.pipe(takeUntil(this.destroy$)).subscribe((component) => {\r\n      if (component === 1) {\r\n        this.isAccessItemsTabSelected = true;\r\n      }\r\n    });\r\n\r\n    this.customFields$ = this.accessItemsCustomization$.pipe(\r\n      getCustomFields(customFieldCount),\r\n      tap((customFields) => {\r\n        const accessItem = this.createWorkbasketAccessItems();\r\n        this.keysOfVisibleFields = [\r\n          'permRead',\r\n          'permOpen',\r\n          'permAppend',\r\n          'permTransfer',\r\n          'permDistribute',\r\n          'permReadTasks',\r\n          'permEditTasks'\r\n        ];\r\n        for (let i = 0; i < customFieldCount; i++) {\r\n          if (customFields[i].visible) {\r\n            this.keysOfVisibleFields.push(Object.keys(accessItem)[i + 12]);\r\n          }\r\n        }\r\n      })\r\n    );\r\n\r\n    this.accessItemsRepresentation$.pipe(takeUntil(this.destroy$)).subscribe((accessItemsRepresentation) => {\r\n      if (typeof accessItemsRepresentation !== 'undefined') {\r\n        let accessItems = [...accessItemsRepresentation.accessItems];\r\n        accessItems = this.sortAccessItems(accessItems, 'accessId');\r\n\r\n        this.accessItemsRepresentation = {\r\n          accessItems: accessItems,\r\n          _links: accessItemsRepresentation._links\r\n        };\r\n        this.setAccessItemsGroups(accessItems);\r\n        this.accessItemsClone = this.cloneAccessItems();\r\n        this.accessItemsResetClone = this.cloneAccessItems();\r\n\r\n        this.isNewAccessItemsFromStore = true;\r\n      }\r\n    });\r\n\r\n    // saving workbasket access items when workbasket already exists\r\n    this.ngxsActions$.pipe(ofActionCompleted(UpdateWorkbasket), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.onSubmit();\r\n    });\r\n\r\n    // saving workbasket access items when workbasket was copied or created\r\n    this.ngxsActions$.pipe(ofActionCompleted(SaveNewWorkbasket), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.selectedWorkbasket$.pipe(take(1)).subscribe((workbasket) => {\r\n        this.accessItemsRepresentation._links = { self: { href: workbasket._links.accessItems.href } };\r\n        this.setWorkbasketIdForCopy(workbasket.workbasketId);\r\n        this.formsValidatorService\r\n          .validateFormAccess(this.accessItemsGroups, this.toggleValidationAccessIdMap)\r\n          .then((value) => {\r\n            if (value) {\r\n              this.onSave();\r\n            }\r\n          });\r\n      });\r\n    });\r\n\r\n    this.buttonAction$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .pipe(filter((buttonAction) => typeof buttonAction !== 'undefined'))\r\n      .subscribe((button) => {\r\n        switch (button) {\r\n          case ButtonAction.UNDO:\r\n            this.clear();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.inputs.changes.pipe(takeUntil(this.destroy$)).subscribe((next) => {\r\n      if (typeof next.last !== 'undefined') {\r\n        if (this.added) next.last.nativeElement.focus();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this.isNewAccessItemsFromStore || this.isAccessItemsTabSelected) {\r\n      if (document.getElementById(`checkbox-0-00`)) {\r\n        let row = 0;\r\n        this.accessItemsGroups.controls.forEach(() => {\r\n          const value = { currentTarget: { checked: true } };\r\n          this.setSelectAllCheckbox(row, value);\r\n          row = row + 1;\r\n        });\r\n        this.isAccessItemsTabSelected = false;\r\n        this.isNewAccessItemsFromStore = false;\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes?: SimpleChanges) {\r\n    if (this.workbasketClone) {\r\n      if (this.workbasketClone.workbasketId != this.workbasket.workbasketId) {\r\n        this.init();\r\n      }\r\n    }\r\n    this.workbasketClone = this.workbasket;\r\n  }\r\n\r\n  init() {\r\n    if (this.workbasket._links?.accessItems) {\r\n      this.requestInProgressService.setRequestInProgress(true);\r\n      this.store.dispatch(new GetWorkbasketAccessItems(this.workbasket._links.accessItems.href)).subscribe(() => {\r\n        this.requestInProgressService.setRequestInProgress(false);\r\n      });\r\n    }\r\n  }\r\n\r\n  sortAccessItems(accessItems: WorkbasketAccessItems[], sortBy: string): WorkbasketAccessItems[] {\r\n    return accessItems.sort((a, b) => {\r\n      if (a[sortBy] < b[sortBy]) {\r\n        return -1;\r\n      }\r\n      if (a[sortBy] > b[sortBy]) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  setAccessItemsGroups(accessItems: WorkbasketAccessItems[]) {\r\n    const AccessItemsFormGroups = accessItems.map((accessItem) => this.formBuilder.group(accessItem));\r\n    AccessItemsFormGroups.forEach((accessItemGroup) => {\r\n      accessItemGroup.controls.accessId.setValidators(Validators.required);\r\n    });\r\n    const AccessItemsFormArray = this.formBuilder.array(AccessItemsFormGroups);\r\n    this.AccessItemsForm.setControl('accessItemsGroups', AccessItemsFormArray);\r\n  }\r\n\r\n  createWorkbasketAccessItems(): WorkbasketAccessItems {\r\n    return {\r\n      accessItemId: '',\r\n      workbasketId: '',\r\n      workbasketKey: '',\r\n      accessId: '',\r\n      accessName: '',\r\n      permRead: false,\r\n      permOpen: false,\r\n      permAppend: false,\r\n      permTransfer: false,\r\n      permDistribute: false,\r\n      permReadTasks: false,\r\n      permEditTasks: false,\r\n      permCustom1: false,\r\n      permCustom2: false,\r\n      permCustom3: false,\r\n      permCustom4: false,\r\n      permCustom5: false,\r\n      permCustom6: false,\r\n      permCustom7: false,\r\n      permCustom8: false,\r\n      permCustom9: false,\r\n      permCustom10: false,\r\n      permCustom11: false,\r\n      permCustom12: false,\r\n      _links: {}\r\n    };\r\n  }\r\n\r\n  addAccessItem() {\r\n    const workbasketAccessItems: WorkbasketAccessItems = this.createWorkbasketAccessItems();\r\n    workbasketAccessItems.workbasketId = this.workbasket.workbasketId;\r\n    workbasketAccessItems.permRead = true;\r\n    const newForm = this.formBuilder.group(workbasketAccessItems);\r\n    newForm.controls.accessId.setValidators(Validators.required);\r\n    this.accessItemsGroups.insert(0, newForm);\r\n    this.accessItemsClone.unshift(workbasketAccessItems);\r\n    this.added = true;\r\n  }\r\n\r\n  clear() {\r\n    this.store.dispatch(new OnButtonPressed(undefined));\r\n    this.formsValidatorService.formSubmitAttempt = false;\r\n    this.AccessItemsForm.reset();\r\n    this.setAccessItemsGroups(this.accessItemsResetClone);\r\n    this.accessItemsClone = this.cloneAccessItems();\r\n    this.notificationsService.showSuccess('WORKBASKET_ACCESS_ITEM_RESTORE');\r\n  }\r\n\r\n  isFieldValid(field: string, index: number): boolean {\r\n    return this.formsValidatorService.isFieldValid(this.accessItemsGroups[index], field);\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formsValidatorService.formSubmitAttempt = true;\r\n    this.formsValidatorService\r\n      .validateFormAccess(this.accessItemsGroups, this.toggleValidationAccessIdMap)\r\n      .then((value) => {\r\n        if (value) {\r\n          this.onSave();\r\n        }\r\n      });\r\n  }\r\n\r\n  onSave() {\r\n    this.requestInProgressService.setRequestInProgress(true);\r\n    this.store\r\n      .dispatch(\r\n        new UpdateWorkbasketAccessItems(\r\n          this.accessItemsRepresentation._links.self.href,\r\n          this.AccessItemsForm.value.accessItemsGroups\r\n        )\r\n      )\r\n      .subscribe(() => {\r\n        this.requestInProgressService.setRequestInProgress(false);\r\n      });\r\n  }\r\n\r\n  accessItemSelected(accessItem: AccessId, row: number) {\r\n    this.accessItemsGroups.controls[row].get('accessId').setValue(accessItem?.accessId);\r\n    this.accessItemsGroups.controls[row].get('accessName').setValue(accessItem?.name);\r\n  }\r\n\r\n  checkAll(row: number, value: any) {\r\n    const checkAll = value.target.checked;\r\n    const accessItem = this.accessItemsGroups.controls[row];\r\n    this.keysOfVisibleFields.forEach((key) => {\r\n      accessItem.get(key).setValue(checkAll);\r\n    });\r\n  }\r\n\r\n  setSelectAllCheckbox(row: number, value: any) {\r\n    let areAllCheckboxesSelected = false;\r\n\r\n    if (value.currentTarget.checked) {\r\n      areAllCheckboxesSelected = true;\r\n      const accessItem = this.accessItemsGroups.controls[row].value;\r\n\r\n      this.keysOfVisibleFields.forEach((key) => {\r\n        if (accessItem[key] === false) {\r\n          areAllCheckboxesSelected = false;\r\n        }\r\n      });\r\n    }\r\n    const checkbox = document.getElementById(`checkbox-${row}-00`) as HTMLInputElement;\r\n    checkbox.checked = areAllCheckboxesSelected;\r\n  }\r\n\r\n  cloneAccessItems(): WorkbasketAccessItems[] {\r\n    return this.AccessItemsForm.value.accessItemsGroups.map((accessItems: WorkbasketAccessItems) => ({\r\n      ...accessItems\r\n    }));\r\n  }\r\n\r\n  setWorkbasketIdForCopy(workbasketId: string) {\r\n    this.accessItemsGroups.value.forEach((element) => {\r\n      delete element.accessItemId;\r\n      element.workbasketId = workbasketId;\r\n    });\r\n  }\r\n\r\n  getAccessItemCustomProperty(customNumber: number): string {\r\n    return `permCustom${customNumber}`;\r\n  }\r\n\r\n  selectRow(value: any, index: number) {\r\n    if (value.target.checked) {\r\n      this.selectedRows.push(index);\r\n    } else {\r\n      this.selectedRows = this.selectedRows.filter(function (number) {\r\n        return number != index;\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteAccessItems() {\r\n    this.selectedRows.sort(function (a, b) {\r\n      return b - a;\r\n    });\r\n    this.selectedRows.forEach((element) => {\r\n      this.accessItemsGroups.removeAt(element);\r\n      this.accessItemsClone.splice(element, 1);\r\n    });\r\n    this.selectedRows = [];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nexport const defaultThrottleConfig = {\n    leading: true,\n    trailing: false,\n};\nexport function throttle(durationSelector, config = defaultThrottleConfig) {\n    return operate((source, subscriber) => {\n        const { leading, trailing } = config;\n        let hasValue = false;\n        let sendValue = null;\n        let throttled = null;\n        let isComplete = false;\n        const endThrottling = () => {\n            throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n            throttled = null;\n            if (trailing) {\n                send();\n                isComplete && subscriber.complete();\n            }\n        };\n        const cleanupThrottling = () => {\n            throttled = null;\n            isComplete && subscriber.complete();\n        };\n        const startThrottle = (value) => (throttled = innerFrom(durationSelector(value)).subscribe(createOperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n        const send = () => {\n            if (hasValue) {\n                hasValue = false;\n                const value = sendValue;\n                sendValue = null;\n                subscriber.next(value);\n                !isComplete && startThrottle(value);\n            }\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            hasValue = true;\n            sendValue = value;\n            !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        }, () => {\n            isComplete = true;\n            !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }));\n    });\n}\n","<div class=\"distribution-targets-list\">\r\n  <mat-toolbar>\r\n    <span class=\"distribution-targets-list__header\" matTooltip=\"{{header}}\">{{header}}</span>\r\n\r\n    <!-- FILTER BUTTON -->\r\n    <button (click)=\"changeToolbarState(!toolbarState)\"\r\n            class=\"distribution-targets-list__action-button\" mat-flat-button\r\n    >\r\n      <span *ngIf=\"!toolbarState\">\r\n        Display filter\r\n        <mat-icon class=\"button-icon\">filter_list</mat-icon>\r\n      </span>\r\n      <span *ngIf=\"toolbarState\">\r\n        Hide filter\r\n        <mat-icon class=\"button-icon\">keyboard_arrow_up</mat-icon>\r\n      </span>\r\n    </button>\r\n\r\n    <span style=\"flex: 1 1 auto\"> </span>\r\n\r\n    <!-- SELECT ALL BUTTON -->\r\n    <button (click)=\"selectAll(!allSelected);\" class=\"distribution-targets-list__action-button\"\r\n            mat-flat-button>\r\n      <mat-icon *ngIf=\"allSelected\" class=\"button-icon\" matTooltip=\"Deselect all items\">check_box\r\n      </mat-icon>\r\n      <mat-icon *ngIf=\"!allSelected\" class=\"button-icon\" matTooltip=\"Select all items\">\r\n        check_box_outline_blank\r\n      </mat-icon>\r\n    </button>\r\n  </mat-toolbar>\r\n\r\n  <!-- FILTER COMPONENT -->\r\n  <taskana-shared-workbasket-filter *ngIf=\"toolbarState\" [component]=\"component\"\r\n                                    isExpanded=\"true\"></taskana-shared-workbasket-filter>\r\n\r\n  <!-- EMPTY LIST -->\r\n  <div *ngIf=\"distributionTargets?.length == 0 && requestInProgress < 0\"\r\n       class=\"distribution-targets-list__empty-list\">\r\n\r\n    <!-- AVAILABLE SIDE -->\r\n    <div *ngIf=\"side === 0\" style=\"padding: 0 16px;\">\r\n      There are currently no Workbaskets for distribution\r\n    </div>\r\n\r\n    <!-- SELECTED SIDE -->\r\n    <div *ngIf=\"side === 1\" style=\"padding: 0 16px;\">\r\n      There is currently no distributed Workbasket\r\n    </div>\r\n\r\n  </div>\r\n\r\n  <!-- WORKBASKET LIST -->\r\n  <mat-selection-list #workbasket [multiple]=\"true\">\r\n    <cdk-virtual-scroll-viewport #scroller\r\n                                 class=\"{{toolbarState?  'distribution-targets-list__list--with-filter' : 'distribution-targets-list__list--no-filter'}}\"\r\n                                 itemSize=\"90\">\r\n      <mat-list-option\r\n          (click)=\"updateSelectAll(!workbasket.selected) && (workbasket.selected = !workbasket.selected)\"\r\n          *cdkVirtualFor=\"let workbasket of distributionTargets| orderBy: ['name']; templateCacheSize: 0\"\r\n          [selected]=\"workbasket.selected\"\r\n          [value]=\"workbasket.workbasketId\"\r\n          class=\"workbasket-distribution-targets__workbaskets-item\">\r\n\r\n        <div class=\"distribution-targets-list__item-wrapper\">\r\n\r\n          <!-- ICON -->\r\n          <div class=\"distribution-targets-list__item-icon\">\r\n            <taskana-administration-icon-type [type]=\"workbasket.type\" size=\"large\"\r\n                                              tooltip=\"true\"></taskana-administration-icon-type>\r\n          </div>\r\n\r\n          <!-- INFO -->\r\n          <div class=\"distribution-targets-list__item-info\">\r\n            <div class=\"distribution-targets-list__item--no-wrap\">\r\n              <b>{{workbasket.name}}</b>, <i>{{workbasket.key}}</i>\r\n            </div>\r\n            <p class=\"distribution-targets-list__item--no-wrap\">{{workbasket.description}}</p>\r\n            <p class=\"distribution-targets-list__item--no-wrap\">{{workbasket.owner}}</p>\r\n          </div>\r\n\r\n          <!-- MARKED FOR DELETION -->\r\n          <div *ngIf=\"workbasket.markedForDeletion\" class=\"workbaskets-item__marked\">\r\n            <span\r\n                class=\"material-icons md-20 red \"\r\n                matTooltip=\"Marked for deletion\"\r\n                title=\"Marked for deletion\">error</span>\r\n          </div>\r\n        </div>\r\n\r\n        <mat-divider></mat-divider>\r\n\r\n      </mat-list-option>\r\n    </cdk-virtual-scroll-viewport>\r\n  </mat-selection-list>\r\n\r\n\r\n</div>\r\n","import {\r\n  AfterContentChecked,\r\n  AfterViewInit,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  Input,\r\n  OnChanges,\r\n  OnInit,\r\n  SimpleChanges,\r\n  ViewChild\r\n} from '@angular/core';\r\nimport { isEqual } from 'lodash';\r\nimport { WorkbasketSummary } from 'app/shared/models/workbasket-summary';\r\nimport { expandDown } from 'app/shared/animations/expand.animation';\r\nimport { MatSelectionList } from '@angular/material/list';\r\nimport { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';\r\nimport { Side } from '../../models/workbasket-distribution-enums';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { filter, map, pairwise, take, takeUntil, throttleTime } from 'rxjs/operators';\r\nimport {\r\n  FetchAvailableDistributionTargets,\r\n  FetchWorkbasketDistributionTargets,\r\n  TransferDistributionTargets\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { WorkbasketQueryFilterParameter } from '../../../shared/models/workbasket-query-filter-parameter';\r\nimport { FilterSelectors } from '../../../shared/store/filter-store/filter.selectors';\r\nimport { WorkbasketDistributionTarget } from '../../../shared/models/workbasket-distribution-target';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-distribution-targets-list',\r\n  templateUrl: './workbasket-distribution-targets-list.component.html',\r\n  styleUrls: ['./workbasket-distribution-targets-list.component.scss'],\r\n  animations: [expandDown]\r\n})\r\nexport class WorkbasketDistributionTargetsListComponent\r\n  implements AfterContentChecked, OnChanges, OnInit, AfterViewInit\r\n{\r\n  @Input() side: Side;\r\n  @Input() header: string;\r\n  allSelected;\r\n  @Input() component;\r\n  @Input() transferDistributionTargetObservable: Observable<Side>;\r\n\r\n  @Select(WorkbasketSelectors.workbasketDistributionTargets)\r\n  workbasketDistributionTargets$: Observable<WorkbasketSummary[]>;\r\n\r\n  @Select(WorkbasketSelectors.availableDistributionTargets)\r\n  availableDistributionTargets$: Observable<WorkbasketSummary[]>;\r\n\r\n  @Select(FilterSelectors.getAvailableDistributionTargetsFilter)\r\n  availableDistributionTargetsFilter$: Observable<WorkbasketQueryFilterParameter>;\r\n\r\n  @Select(FilterSelectors.getSelectedDistributionTargetsFilter)\r\n  selectedDistributionTargetsFilter$: Observable<WorkbasketQueryFilterParameter>;\r\n\r\n  toolbarState = false;\r\n\r\n  distributionTargets: WorkbasketDistributionTarget[];\r\n  distributionTargetsClone: WorkbasketDistributionTarget[];\r\n\r\n  @ViewChild('workbasket') distributionTargetsList: MatSelectionList;\r\n  @ViewChild('scroller') workbasketList: CdkVirtualScrollViewport;\r\n  requestInProgress: number;\r\n  private destroy$ = new Subject<void>();\r\n  private filter: WorkbasketQueryFilterParameter;\r\n  private allSelectedDiff = 0;\r\n\r\n  constructor(private changeDetector: ChangeDetectorRef, private store: Store) {}\r\n\r\n  ngOnInit(): void {\r\n    this.requestInProgress = 2;\r\n    if (this.side === Side.AVAILABLE) {\r\n      this.availableDistributionTargets$.pipe(takeUntil(this.destroy$)).subscribe((wbs) => this.assignWbs(wbs));\r\n      this.availableDistributionTargetsFilter$.pipe(takeUntil(this.destroy$)).subscribe((filter) => {\r\n        if (typeof this.filter === 'undefined' || isEqual(this.filter, filter)) {\r\n          this.filter = filter;\r\n          return;\r\n        }\r\n        this.filter = filter;\r\n        this.store.dispatch(new FetchAvailableDistributionTargets(true, this.filter));\r\n        this.selectAll(false);\r\n        this.requestInProgress--;\r\n      });\r\n    } else {\r\n      this.workbasketDistributionTargets$.pipe().subscribe((wbs) => this.assignWbs(wbs));\r\n      this.selectedDistributionTargetsFilter$.pipe(takeUntil(this.destroy$)).subscribe((filter) => {\r\n        if (typeof this.filter === 'undefined' || isEqual(this.filter, filter)) {\r\n          this.filter = filter;\r\n          return;\r\n        }\r\n        this.filter = filter;\r\n        this.applyFilter();\r\n        this.selectAll(false);\r\n        this.requestInProgress--;\r\n      });\r\n    }\r\n    this.transferDistributionTargetObservable.subscribe((targetSide) => {\r\n      if (targetSide !== this.side) this.transferDistributionTargets(targetSide);\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    this.changeDetector.detectChanges();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (typeof changes.allSelected?.currentValue !== 'undefined') {\r\n      this.selectAll(changes.allSelected.currentValue);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.workbasketList\r\n      .elementScrolled()\r\n      .pipe(\r\n        map(() => this.workbasketList.measureScrollOffset('bottom')),\r\n        pairwise(),\r\n        filter(([y1, y2]) => y2 < y1 && y2 < 270),\r\n        throttleTime(200)\r\n      )\r\n      .subscribe(() => {\r\n        if (this.side === Side.AVAILABLE) {\r\n          this.store.dispatch(new FetchAvailableDistributionTargets(false, this.filter));\r\n        } else {\r\n          this.store.dispatch(new FetchWorkbasketDistributionTargets(false, this.filter));\r\n        }\r\n      });\r\n  }\r\n\r\n  selectAll(selected: boolean) {\r\n    if (typeof this.distributionTargetsList !== 'undefined') {\r\n      this.allSelected = selected;\r\n      this.distributionTargets.map((wb) => (wb.selected = selected));\r\n      if (selected) this.allSelectedDiff = this.distributionTargets.length;\r\n      else this.allSelectedDiff = 0;\r\n    }\r\n  }\r\n\r\n  transferDistributionTargets(targetSide: Side) {\r\n    let selectedWBs = this.distributionTargets.filter((item: any) => item.selected === true);\r\n    this.distributionTargets.forEach((wb) => (wb.selected = false));\r\n    this.store\r\n      .dispatch(new TransferDistributionTargets(targetSide, selectedWBs))\r\n      .pipe(take(1))\r\n      .subscribe(() => {\r\n        if (this.distributionTargets.length === 0 && targetSide === Side.SELECTED) {\r\n          this.store.dispatch(new FetchAvailableDistributionTargets(false, this.filter));\r\n        }\r\n      });\r\n  }\r\n\r\n  changeToolbarState(state: boolean) {\r\n    this.toolbarState = state;\r\n  }\r\n\r\n  updateSelectAll(selected: boolean) {\r\n    if (selected) this.allSelectedDiff++;\r\n    else this.allSelectedDiff--;\r\n    this.allSelected = this.allSelectedDiff === this.distributionTargets.length;\r\n    return true;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n\r\n  private assignWbs(wbs: WorkbasketSummary[]) {\r\n    this.distributionTargets = wbs.map((wb) => {\r\n      return { ...wb, selected: this.allSelected };\r\n    });\r\n    this.distributionTargetsClone = this.distributionTargets;\r\n    this.requestInProgress--;\r\n  }\r\n\r\n  private applyFilter() {\r\n    function filterExact(target: WorkbasketDistributionTarget, filterStrings: string[], attribute: string) {\r\n      if (!!filterStrings && filterStrings?.length !== 0) {\r\n        return filterStrings.map((str) => str.toLowerCase()).includes(target[attribute].toLowerCase());\r\n      }\r\n      return true;\r\n    }\r\n\r\n    function filterLike(target: WorkbasketDistributionTarget, filterStrings: string[], attribute: string) {\r\n      if (!!filterStrings && filterStrings?.length !== 0) {\r\n        let ret = true;\r\n        filterStrings.forEach((filterElement) => {\r\n          ret = ret && target[attribute].toLowerCase().includes(filterElement.toLowerCase());\r\n        });\r\n        return ret;\r\n      }\r\n      return true;\r\n    }\r\n\r\n    this.distributionTargets = this.distributionTargetsClone?.filter((target) => {\r\n      let matches = true;\r\n      matches = matches && filterExact(target, this.filter.name, 'name');\r\n      matches = matches && filterExact(target, this.filter.key, 'key');\r\n      matches = matches && filterExact(target, this.filter.owner, 'owner');\r\n      matches = matches && filterExact(target, this.filter.domain, 'domain');\r\n      matches = matches && filterExact(target, this.filter.type, 'type');\r\n      matches = matches && filterLike(target, this.filter['owner-like'], 'owner');\r\n      matches = matches && filterLike(target, this.filter['name-like'], 'name');\r\n      matches = matches && filterLike(target, this.filter['key-like'], 'key');\r\n      matches = matches && filterLike(target, this.filter['description-like'], 'description');\r\n      return matches;\r\n    });\r\n  }\r\n}\r\n","import { asyncScheduler } from '../scheduler/async';\nimport { defaultThrottleConfig, throttle } from './throttle';\nimport { timer } from '../observable/timer';\nexport function throttleTime(duration, scheduler = asyncScheduler, config = defaultThrottleConfig) {\n    const duration$ = timer(duration, scheduler);\n    return throttle(() => duration$, config);\n}\n","<div id=\"wb-information\" class=\"workbasket-distribution-targets\">\r\n  <mat-toolbar class=\"distribution-targets-list__action-toolbar\" >\r\n    <button mat-flat-button class=\"distribution-targets-list__action-button distribution-targets-list__toggle-view-button\"\r\n            *ngIf=\"!sideBySide\" (click)=\"toggleSideBySideView()\">\r\n      Display side-by-side\r\n      <mat-icon class=\"distribution-targets-list__button-icon\">view_week</mat-icon>\r\n    </button>\r\n    <button mat-flat-button class=\"distribution-targets-list__action-button distribution-targets-list__toggle-view-button\"\r\n            *ngIf=\"sideBySide\" (click)=\"toggleSideBySideView()\">\r\n      Display in single-view\r\n      <mat-icon class=\"distribution-targets-list__button-icon\">view_agenda</mat-icon>\r\n    </button>\r\n\r\n    <!-- SIDE BY SIDE VIEW BUTTONS -->\r\n    <div class=\"distribution-targets-list__action-buttons\"  *ngIf=\"sideBySide\">\r\n\r\n      <div class=\"distribution-targets-list__action-buttons--chooser\"\r\n           style=\"justify-content: flex-end; margin-right: 2%\">\r\n        <button mat-flat-button color=\"accent\"\r\n                class=\"distribution-targets-list__action-button distribution-targets-list-dialog__add-button\"\r\n                (click)=\"moveDistributionTargets(sideEnum.SELECTED)\">\r\n          Add selected distribution targets\r\n          <mat-icon>add</mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n      <span style=\"flex-grow: 1\"> </span>\r\n\r\n      <div class=\"distribution-targets-list__action-buttons--selected\"\r\n           style=\"justify-content: flex-end;\">\r\n        <button mat-flat-button color=\"warn\"\r\n                class=\"distribution-targets-list__action-button distribution-targets-list-dialog__remove-button\"\r\n                (click)=\"moveDistributionTargets(sideEnum.AVAILABLE)\">\r\n          Remove selected distribution target\r\n          <mat-icon>remove</mat-icon>\r\n        </button>\r\n      </div>\r\n\r\n    </div>\r\n\r\n    <!-- SINGLE VIEW BUTTONS WHEN DISPLAYING SELECTED DISTRIBUTION TARGETS -->\r\n    <div class=\"distribution-targets-list__action-buttons distribution-targets-list__action-buttons--selected\"\r\n         *ngIf=\"!displayingDistributionTargetsPicker && !sideBySide\">\r\n      <button mat-flat-button color=\"warn\"\r\n              class=\"distribution-targets-list__action-button distribution-targets-list-dialog__remove-button\"\r\n              (click)=\"moveDistributionTargets(sideEnum.AVAILABLE)\">\r\n        Remove selected distribution target\r\n        <mat-icon>remove</mat-icon>\r\n      </button>\r\n\r\n      <span style=\"flex: 1 1 auto\"> </span>\r\n\r\n      <button mat-stroked-button\r\n              class=\"distribution-targets-list__action-button distribution-targets-list-dialog__display-button\"\r\n              (click)=\"toggleDistributionTargetsPicker()\">\r\n        Display available distribution targets\r\n        <mat-icon>launch</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- SINGLE VIEW BUTTONS WHEN CHOOSING DISTRIBUTION TARGETS -->\r\n    <div class=\"distribution-targets-list__action-buttons distribution-targets-list__action-buttons--chooser\"\r\n         *ngIf=\"displayingDistributionTargetsPicker && !sideBySide\">\r\n      <button mat-flat-button color=\"accent\"\r\n              class=\"distribution-targets-list__action-button distribution-targets-list-dialog__add-button\"\r\n              (click)=\"moveDistributionTargets(sideEnum.SELECTED)\">\r\n        Add selected distribution targets\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <span style=\"flex: 1 1 auto\"> </span>\r\n\r\n      <button mat-flat-button color=\"warn\" class=\"distribution-targets-list-dialog__check-button\"\r\n              (click)=\"toggleDistributionTargetsPicker()\">\r\n        Close selection\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </mat-toolbar>\r\n\r\n\r\n  <div class=\"distribution-targets-list__lists\"\r\n       [ngClass]=\"sideBySide ? 'distribution-targets-list__lists--side' : 'distribution-targets-list__lists--single'\">\r\n\r\n    <!-- DISTRIBUTION TABLE-->\r\n    <taskana-administration-workbasket-distribution-targets-list\r\n      [ngClass]=\"sideBySide ? 'distribution-targets-list__lists--left-side' : ''\"\r\n      header=\"Available distribution targets\"\r\n      [side]=\"sideEnum.AVAILABLE\"\r\n      *ngIf=\"displayingDistributionTargetsPicker\"\r\n      [component]=\"'availableDistributionTargets'\"\r\n      [transferDistributionTargetObservable]=\"transferDistributionTargetObservable\"\r\n      id=\"dual-list-Left\"\r\n    >\r\n    </taskana-administration-workbasket-distribution-targets-list>\r\n\r\n    <taskana-administration-workbasket-distribution-targets-list\r\n      header=\"Selected distribution targets\"\r\n      [side]=\"sideEnum.SELECTED\"\r\n      [hidden]=\"displayingDistributionTargetsPicker && !sideBySide\"\r\n      [component]=\"'selectedDistributionTargets'\"\r\n      [transferDistributionTargetObservable]=\"transferDistributionTargetObservable\"\r\n      id=\"dual-list-Right\"\r\n    >\r\n    </taskana-administration-workbasket-distribution-targets-list>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { forkJoin, Observable, Subject } from 'rxjs';\r\n\r\nimport { Workbasket } from 'app/shared/models/workbasket';\r\nimport { WorkbasketSummary } from 'app/shared/models/workbasket-summary';\r\nimport { Actions, Select, Store } from '@ngxs/store';\r\nimport { filter, take, takeUntil } from 'rxjs/operators';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport {\r\n  FetchAvailableDistributionTargets,\r\n  FetchWorkbasketDistributionTargets,\r\n  UpdateWorkbasketDistributionTargets\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { ButtonAction } from '../../models/button-action';\r\nimport { Side } from '../../models/workbasket-distribution-enums';\r\nimport { ClearWorkbasketFilter } from '../../../shared/store/filter-store/filter.actions';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-distribution-targets',\r\n  templateUrl: './workbasket-distribution-targets.component.html',\r\n  styleUrls: ['./workbasket-distribution-targets.component.scss']\r\n})\r\nexport class WorkbasketDistributionTargetsComponent implements OnInit, OnDestroy {\r\n  sideEnum = Side;\r\n  sideBySide = true;\r\n  displayingDistributionTargetsPicker = true;\r\n\r\n  transferDistributionTargetObservable = new Subject<Side>();\r\n\r\n  @Select(WorkbasketSelectors.buttonAction)\r\n  buttonAction$: Observable<ButtonAction>;\r\n\r\n  @Select(WorkbasketSelectors.selectedWorkbasket)\r\n  selectedWorkbasket$: Observable<Workbasket>;\r\n\r\n  destroy$ = new Subject<void>();\r\n  private selectedWorkbasket: WorkbasketSummary;\r\n\r\n  constructor(private notificationsService: NotificationService, private store: Store) {}\r\n\r\n  /**\r\n   * Rework with modification based on old components,\r\n   * would be ideal to completely redo whole components using drag and drop angular components and clearer logics\r\n   */\r\n  ngOnInit() {\r\n    this.selectedWorkbasket$.pipe(takeUntil(this.destroy$)).subscribe((wb) => {\r\n      if (wb !== undefined && wb.workbasketId !== this.selectedWorkbasket?.workbasketId) {\r\n        if (this.selectedWorkbasket?.workbasketId) {\r\n          this.store.dispatch(new FetchWorkbasketDistributionTargets(true));\r\n          this.store.dispatch(new FetchAvailableDistributionTargets(true));\r\n        }\r\n        this.selectedWorkbasket = wb;\r\n      }\r\n    });\r\n\r\n    this.buttonAction$\r\n      .pipe(takeUntil(this.destroy$))\r\n      .pipe(filter((buttonAction) => typeof buttonAction !== 'undefined'))\r\n      .subscribe((button) => {\r\n        switch (button) {\r\n          case ButtonAction.UNDO:\r\n            this.onClear();\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n  }\r\n\r\n  toggleDistributionTargetsPicker() {\r\n    this.displayingDistributionTargetsPicker = !this.displayingDistributionTargetsPicker;\r\n  }\r\n\r\n  onSave(): void {\r\n    this.store.dispatch(new UpdateWorkbasketDistributionTargets());\r\n  }\r\n\r\n  moveDistributionTargets(targetSide: Side): void {\r\n    this.transferDistributionTargetObservable.next(targetSide);\r\n  }\r\n\r\n  onClear() {\r\n    forkJoin([\r\n      this.store.dispatch(new FetchWorkbasketDistributionTargets(true)),\r\n      this.store.dispatch(new FetchAvailableDistributionTargets(true)),\r\n      this.store.dispatch(new ClearWorkbasketFilter('selectedDistributionTargets')),\r\n      this.store.dispatch(new ClearWorkbasketFilter('availableDistributionTargets'))\r\n    ])\r\n      .pipe(take(1))\r\n      .subscribe(() => this.notificationsService.showSuccess('WORKBASKET_DISTRIBUTION_TARGET_RESTORE'));\r\n  }\r\n\r\n  toggleSideBySideView() {\r\n    this.sideBySide = !this.sideBySide;\r\n    this.displayingDistributionTargetsPicker = true; //always display picker when toggle from side-by-side to single\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.transferDistributionTargetObservable.complete();\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"workbasket-details\">\r\n  <mat-toolbar class=\"workbasket-details__toolbar\">\r\n\r\n    <!-- TITLE -->\r\n    <h4 class=\"workbasket-details__title\">\r\n      <span class=\"workbasket-details__title-name\"\r\n            matTooltip=\"{{workbasket.name}}\">{{workbasket.name}}</span>\r\n      <span class=\"workbasket-details__title-badge\"\r\n            matTooltip=\"{{ badgeMessage$ | async }}\"> {{ badgeMessage$ | async }}</span>\r\n    </h4>\r\n    <span class=\"workbasket-details__spacer\"></span>\r\n\r\n    <!-- SAVE -->\r\n    <button (click)=\"onSubmit()\" class=\"workbasket-details__button workbasket-details__save-button\"\r\n            mat-button matTooltip=\"Save changes in current workbasket\">\r\n      Save\r\n      <mat-icon class=\"md-20\">save</mat-icon>\r\n    </button>\r\n\r\n    <!-- UNDO -->\r\n    <button (click)=\"onRestore()\" class=\"workbasket-details__button\" mat-stroked-button\r\n            matTooltip=\"Revert changes to previous saved state\">\r\n      Undo Changes\r\n      <mat-icon class=\"workbasket-details__button-aquamarine md-20\">restore</mat-icon>\r\n    </button>\r\n\r\n    <!-- MENU -->\r\n    <button [matMenuTriggerFor]=\"buttonMenu\" class=\"action-toolbar__button\"\r\n            id=\"action-toolbar__more-buttons\" mat-stroked-button\r\n            matTooltip=\"More actions\">\r\n      <mat-icon>more_vert</mat-icon>\r\n    </button>\r\n\r\n    <mat-menu #buttonMenu=\"matMenu\">\r\n      <!-- COPY -->\r\n      <button (click)=\"onCopy()\" class=\"workbasket-details__dropdown\"\r\n              mat-menu-item matTooltip=\"Copy current values to create new workbasket\">\r\n        <mat-icon class=\"workbasket-details__button-aquamarine\">content_copy</mat-icon>\r\n        <span>Copy</span>\r\n      </button>\r\n\r\n      <!-- REMOVE AS DISTRIBUTION TARGET -->\r\n      <button (click)=\"onRemoveAsDistributionTarget()\" class=\"workbasket-details__dropdown\"\r\n              mat-menu-item matTooltip=\"Remove this workbasket as distribution target\">\r\n        <mat-icon class=\"workbasket-details__button-red\">remove_circle_outline</mat-icon>\r\n        <span>Remove as distribution target</span>\r\n      </button>\r\n\r\n      <!-- DELETE -->\r\n      <button (click)=\"onRemoveWorkbasket()\" class=\"workbasket-details__dropdown\" mat-menu-item\r\n              matTooltip=\"Delete this workbasket\">\r\n        <mat-icon class=\"workbasket-details__button-red\">delete</mat-icon>\r\n        <span>Delete</span>\r\n      </button>\r\n\r\n      <!-- CLOSE AND DISCARD -->\r\n      <button (click)=\"onClose()\" class=\"workbasket-details__dropdown\" mat-menu-item\r\n              matTooltip=\"Close this workbasket and discard all changes\"\r\n              style=\"border-bottom-style: none;\">\r\n        <mat-icon>close</mat-icon>\r\n        <span>Close</span>\r\n      </button>\r\n    </mat-menu>\r\n  </mat-toolbar>\r\n\r\n  <!-- TABS -->\r\n  <mat-tab-group (selectedIndexChange)=\"selectComponent($event)\"\r\n                 [selectedIndex]=\"selectedTab$ | async\"\r\n                 animationDuration=\"0ms\">\r\n    <mat-tab label=\"Information\">\r\n      <taskana-administration-workbasket-information [action]=\"action\" [workbasket]=\"workbasket\">\r\n      </taskana-administration-workbasket-information>\r\n    </mat-tab>\r\n    <mat-tab label=\"Access\">\r\n      <taskana-administration-workbasket-access-items [expanded]=\"expanded\"\r\n                                                      [workbasket]=\"workbasket\">\r\n      </taskana-administration-workbasket-access-items>\r\n    </mat-tab>\r\n    <mat-tab label=\"Distribution Targets\">\r\n      <taskana-administration-workbasket-distribution-targets *matTabContent>\r\n      </taskana-administration-workbasket-distribution-targets>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>\r\n","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable, of, Subject, timeout } from 'rxjs';\r\nimport { Workbasket } from 'app/shared/models/workbasket';\r\nimport { ACTION } from 'app/shared/models/action';\r\nimport { DomainService } from 'app/shared/services/domain/domain.service';\r\nimport { Actions, ofActionSuccessful, Select, Store } from '@ngxs/store';\r\nimport { catchError, filter, take, takeUntil } from 'rxjs/operators';\r\nimport {\r\n  WorkbasketAndComponentAndAction,\r\n  WorkbasketSelectors\r\n} from '../../../shared/store/workbasket-store/workbasket.selectors';\r\nimport { Location } from '@angular/common';\r\nimport {\r\n  CopyWorkbasket,\r\n  DeselectWorkbasket,\r\n  OnButtonPressed,\r\n  SaveNewWorkbasket,\r\n  SelectComponent,\r\n  UpdateWorkbasket,\r\n  UpdateWorkbasketDistributionTargets\r\n} from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { ButtonAction } from '../../models/button-action';\r\nimport { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\r\nimport { cloneDeep } from 'lodash';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-details',\r\n  templateUrl: './workbasket-details.component.html',\r\n  styleUrls: ['./workbasket-details.component.scss']\r\n})\r\nexport class WorkbasketDetailsComponent implements OnInit, OnDestroy {\r\n  workbasket: Workbasket;\r\n  action: ACTION;\r\n\r\n  @Select(WorkbasketSelectors.selectedComponent)\r\n  selectedTab$: Observable<number>;\r\n\r\n  @Select(WorkbasketSelectors.badgeMessage)\r\n  badgeMessage$: Observable<string>;\r\n\r\n  @Select(WorkbasketSelectors.selectedWorkbasketAndComponentAndAction)\r\n  selectedWorkbasketAndComponentAndAction$: Observable<WorkbasketAndComponentAndAction>;\r\n\r\n  @Select(WorkbasketSelectors.selectedWorkbasket)\r\n  selectedWorkbasket$: Observable<Workbasket>;\r\n\r\n  destroy$ = new Subject<void>();\r\n\r\n  @Input() expanded: boolean;\r\n\r\n  constructor(\r\n    private location: Location,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private domainService: DomainService,\r\n    private requestInProgressService: RequestInProgressService,\r\n    private store: Store,\r\n    private ngxsActions$: Actions\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.getWorkbasketFromStore();\r\n  }\r\n\r\n  getWorkbasketFromStore() {\r\n    /*\r\n        get workbasket from store only when (to avoid discarding changes):\r\n        a) workbasket with another ID is selected (includes copying)\r\n        b) empty workbasket is created\r\n      */\r\n    this.selectedWorkbasketAndComponentAndAction$.pipe(takeUntil(this.destroy$)).subscribe((object) => {\r\n      const workbasket = object.selectedWorkbasket;\r\n      const action = object.action;\r\n\r\n      const isAnotherId = this.workbasket?.workbasketId !== workbasket?.workbasketId;\r\n      const isCreation = action !== this.action && action === ACTION.CREATE;\r\n      if (isAnotherId || isCreation) {\r\n        this.workbasket = cloneDeep(workbasket);\r\n      }\r\n\r\n      this.action = action;\r\n    });\r\n\r\n    // c) saving the workbasket\r\n    this.ngxsActions$.pipe(ofActionSuccessful(UpdateWorkbasket), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.store\r\n        .dispatch(new UpdateWorkbasketDistributionTargets())\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe(() => {\r\n          this.selectedWorkbasket$\r\n            .pipe(\r\n              take(5),\r\n              timeout(250),\r\n              catchError(() => of(null)),\r\n              filter((val) => val !== null)\r\n            )\r\n            .subscribe((wb) => (this.workbasket = wb));\r\n        });\r\n    });\r\n\r\n    this.ngxsActions$.pipe(ofActionSuccessful(SaveNewWorkbasket), takeUntil(this.destroy$)).subscribe(() => {\r\n      this.store\r\n        .dispatch(new UpdateWorkbasketDistributionTargets())\r\n        .pipe(takeUntil(this.destroy$))\r\n        .subscribe(() => {\r\n          this.selectedWorkbasket$\r\n            .pipe(\r\n              take(5),\r\n              timeout(250),\r\n              catchError(() => of(null)),\r\n              filter((val) => val !== null)\r\n            )\r\n            .subscribe((wb) => (this.workbasket = wb));\r\n        });\r\n    });\r\n  }\r\n\r\n  selectComponent(index) {\r\n    this.store.dispatch(new SelectComponent(index));\r\n  }\r\n\r\n  onSubmit() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.SAVE));\r\n  }\r\n\r\n  onRestore() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.UNDO));\r\n  }\r\n\r\n  onCopy() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.COPY));\r\n    this.store.dispatch(new CopyWorkbasket(this.workbasket));\r\n  }\r\n\r\n  onRemoveAsDistributionTarget() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.REMOVE_AS_DISTRIBUTION_TARGETS));\r\n  }\r\n\r\n  onRemoveWorkbasket() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.DELETE));\r\n  }\r\n\r\n  onClose() {\r\n    this.store.dispatch(new OnButtonPressed(ButtonAction.CLOSE));\r\n    this.store.dispatch(new DeselectWorkbasket());\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"workbasket-overview\">\r\n\r\n  <div class=\"workbasket-overview__list\" #workbasketList>\r\n    <taskana-administration-workbasket-list [expanded]=\"expanded\"></taskana-administration-workbasket-list>\r\n  </div>\r\n\r\n  <div class=\"vertical-right-divider\">\r\n    <span class=\"workbasket-overview__toggle-view-button\" (click)=\"toggleWidth()\" #toggleButton>\r\n      <mat-icon class=\"md-36\" *ngIf=\"expanded\">chevron_left</mat-icon>\r\n      <mat-icon class=\"md-36\" *ngIf=\"!expanded\">chevron_right</mat-icon>\r\n    </span>\r\n  </div>\r\n\r\n  <div class=\"workbasket-overview__details\" *ngIf=\"showDetail; else showEmptyPage\">\r\n    <taskana-administration-workbasket-details [expanded]=\"expanded\"></taskana-administration-workbasket-details>\r\n  </div>\r\n\r\n  <ng-template #showEmptyPage>\r\n    <div class=\"workbasket-overview__empty-page\">\r\n      <div class=\"center-block no-detail\">\r\n        <h3 class=\"grey\">Select a workbasket</h3>\r\n        <svg-icon class=\"img-responsive empty-icon\" src=\"./assets/icons/wb-empty.svg\"></svg-icon>\r\n      </div>\r\n    </div>\r\n  </ng-template>\r\n</div>","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { take, takeUntil } from 'rxjs/operators';\r\nimport { WorkbasketSelectors } from '../../../shared/store/workbasket-store/workbasket.selectors';\r\n\r\nimport { CreateWorkbasket, SelectWorkbasket } from '../../../shared/store/workbasket-store/workbasket.actions';\r\nimport { Workbasket } from '../../../shared/models/workbasket';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-workbasket-overview',\r\n  templateUrl: './workbasket-overview.component.html',\r\n  styleUrls: ['./workbasket-overview.component.scss']\r\n})\r\nexport class WorkbasketOverviewComponent implements OnInit {\r\n  showDetail = false;\r\n  @Select(WorkbasketSelectors.selectedWorkbasketAndAction) selectedWorkbasketAndAction$: Observable<any>;\r\n  @Select(WorkbasketSelectors.selectedWorkbasket) selectedWorkbasket$: Observable<Workbasket>;\r\n  destroy$ = new Subject<void>();\r\n  routerParams: any;\r\n  expanded = true;\r\n\r\n  @ViewChild('workbasketList') workbasketList: ElementRef;\r\n  @ViewChild('toggleButton') toggleButton: ElementRef;\r\n\r\n  constructor(private route: ActivatedRoute, private store: Store) {}\r\n\r\n  ngOnInit() {\r\n    if (this.route.url) {\r\n      this.route.url.pipe(takeUntil(this.destroy$)).subscribe((params) => {\r\n        if (params[0].path === 'workbaskets') {\r\n          this.selectedWorkbasket$.pipe(take(1)).subscribe((workbasket) => {\r\n            if (typeof workbasket.workbasketId !== 'undefined') {\r\n              this.store.dispatch(new SelectWorkbasket(workbasket.workbasketId));\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    if (this.route.firstChild) {\r\n      this.route.firstChild.params.pipe(takeUntil(this.destroy$)).subscribe((params) => {\r\n        this.routerParams = params;\r\n        if (this.routerParams.id) {\r\n          this.showDetail = true;\r\n          if (this.routerParams.id === 'new-workbasket') {\r\n            this.store.dispatch(new CreateWorkbasket());\r\n          } else {\r\n            this.store.dispatch(new SelectWorkbasket(this.routerParams.id));\r\n          }\r\n        }\r\n      });\r\n    }\r\n    this.selectedWorkbasketAndAction$.pipe(takeUntil(this.destroy$)).subscribe((state) => {\r\n      this.showDetail = !!state.selectedWorkbasket || state.action === 1;\r\n    });\r\n  }\r\n\r\n  toggleWidth() {\r\n    if (this.workbasketList.nativeElement.offsetWidth === 250) {\r\n      this.expanded = true;\r\n      this.workbasketList.nativeElement.style.width = '500px';\r\n      this.workbasketList.nativeElement.style.minWidth = '500px';\r\n      this.toggleButton.nativeElement.style.left = '480px';\r\n    } else {\r\n      this.expanded = false;\r\n      this.workbasketList.nativeElement.style.width = '250px';\r\n      this.workbasketList.nativeElement.style.minWidth = '250px';\r\n      this.toggleButton.nativeElement.style.left = '230px';\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","<div class=\"administration-overview\">\r\n  <nav backgroundColor=\"#f5f5f5\" class=\"administration-overview__navbar\" mat-tab-nav-bar>\r\n    <a (click)=\"selectedTab = 'workbaskets'\" [active]=\"selectedTab == 'workbaskets'\"\r\n       class=\"administration-overview__navbar-links\" mat-tab-link\r\n       routerLink=\"/taskana/administration/workbaskets\">Workbaskets</a>\r\n    <a (click)=\"selectedTab = 'classifications'\" [active]=\"selectedTab == 'classifications'\"\r\n       class=\"administration-overview__navbar-links\" mat-tab-link\r\n       routerLink=\"/taskana/administration/classifications\">Classifications</a>\r\n    <a (click)=\"selectedTab = 'access-items-management'\"\r\n       [active]=\"selectedTab == 'access-items-management'\"\r\n       class=\"administration-overview__navbar-links\"\r\n       mat-tab-link routerLink=\"/taskana/administration/access-items-management\">Access Items\r\n      Management</a>\r\n    <a (click)=\"selectedTab = 'task-routing'\" *ngIf=\"(routingAccess)\"\r\n       [active]=\"selectedTab == 'task-routing'\"\r\n       class=\"administration-overview__navbar-links\" mat-tab-link\r\n       routerLink=\"/taskana/administration/task-routing\">Task Routing</a>\r\n  </nav>\r\n  <div class=\"administration-overview__domain\">\r\n    <mat-form-field appearance=\"legacy\">\r\n      <mat-select [value]=\"selectedDomain\" matTooltip=\"Select domain\">\r\n        <mat-option (click)=\"switchDomain(domain)\" *ngFor=\"let domain of domains\" [value]=\"domain\">\r\n          {{domain ? domain : 'MASTER DOMAIN'}}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DomainGuard } from 'app/shared/guards/domain.guard';\r\nimport { AccessItemsManagementComponent } from './components/access-items-management/access-items-management.component';\r\nimport { ClassificationOverviewComponent } from './components/classification-overview/classification-overview.component';\r\nimport { WorkbasketOverviewComponent } from './components/workbasket-overview/workbasket-overview.component';\r\nimport { AdministrationOverviewComponent } from './components/administration-overview/administration-overview.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AdministrationOverviewComponent,\r\n    canActivate: [DomainGuard],\r\n    children: [\r\n      {\r\n        path: 'workbaskets',\r\n        component: WorkbasketOverviewComponent,\r\n        canActivate: [DomainGuard],\r\n        children: [\r\n          {\r\n            path: '',\r\n            component: WorkbasketOverviewComponent,\r\n            outlet: 'master'\r\n          },\r\n          {\r\n            path: ':id',\r\n            component: WorkbasketOverviewComponent,\r\n            outlet: 'detail'\r\n          },\r\n          {\r\n            path: '**',\r\n            redirectTo: ''\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        path: 'classifications',\r\n        component: ClassificationOverviewComponent,\r\n        canActivate: [DomainGuard],\r\n        children: [\r\n          {\r\n            path: '',\r\n            component: ClassificationOverviewComponent,\r\n            outlet: 'master'\r\n          },\r\n          {\r\n            path: ':id',\r\n            component: ClassificationOverviewComponent,\r\n            outlet: 'detail'\r\n          },\r\n          {\r\n            path: '**',\r\n            redirectTo: ''\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        path: 'access-items-management',\r\n        component: AccessItemsManagementComponent,\r\n        canActivate: [DomainGuard],\r\n        children: [\r\n          {\r\n            path: '**',\r\n            redirectTo: ''\r\n          }\r\n        ]\r\n      },\r\n      {\r\n        path: 'task-routing',\r\n        canActivate: [DomainGuard],\r\n        loadChildren: () => import('@task-routing/task-routing.module').then((m) => m.TaskRoutingModule)\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    path: '',\r\n    redirectTo: '',\r\n    pathMatch: 'full'\r\n  },\r\n  {\r\n    path: '**',\r\n    redirectTo: ''\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AdministrationRoutingModule {}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { DomainService } from '../../../shared/services/domain/domain.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { TaskanaEngineService } from '../../../shared/services/taskana-engine/taskana-engine.service';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-overview',\r\n  templateUrl: './administration-overview.component.html',\r\n  styleUrls: ['./administration-overview.component.scss']\r\n})\r\nexport class AdministrationOverviewComponent implements OnInit {\r\n  @Input() selectedTab = '';\r\n  domains: Array<string> = [];\r\n  selectedDomain: string;\r\n\r\n  destroy$ = new Subject<void>();\r\n  url$: Observable<any>;\r\n  routingAccess = false;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private domainService: DomainService,\r\n    private taskanaEngineService: TaskanaEngineService\r\n  ) {\r\n    router.events.pipe(takeUntil(this.destroy$)).subscribe((e) => {\r\n      const urlPaths = this.router.url.split('/');\r\n      if (this.router.url.includes('detail')) {\r\n        this.selectedTab = urlPaths[urlPaths.length - 2];\r\n      } else {\r\n        this.selectedTab = urlPaths[urlPaths.length - 1];\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.taskanaEngineService\r\n      .isCustomRoutingRulesEnabled()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((value) => {\r\n        this.routingAccess = value;\r\n      });\r\n    this.domainService\r\n      .getDomains()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((domains) => {\r\n        this.domains = domains;\r\n      });\r\n\r\n    this.domainService\r\n      .getSelectedDomain()\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe((domain) => {\r\n        this.selectedDomain = domain;\r\n      });\r\n  }\r\n\r\n  switchDomain(domain) {\r\n    this.domainService.switchDomain(domain);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { AngularSvgIconModule } from 'angular-svg-icon';\r\nimport { AlertModule } from 'ngx-bootstrap/alert';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\r\nimport { SharedModule } from 'app/shared/shared.module';\r\nimport { InfiniteScrollModule } from 'ngx-infinite-scroll';\r\n\r\nimport { ClassificationTypesSelectorComponent } from 'app/administration/components/classification-types-selector/classification-types-selector.component';\r\nimport { ClassificationCategoriesService } from 'app/shared/services/classification-categories/classification-categories.service';\r\nimport { AccessItemsManagementComponent } from 'app/administration/components/access-items-management/access-items-management.component';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { AdministrationRoutingModule } from './administration-routing.module';\r\n/**\r\n * Components\r\n */\r\nimport { WorkbasketListComponent } from './components/workbasket-list/workbasket-list.component';\r\nimport { WorkbasketListToolbarComponent } from './components/workbasket-list-toolbar/workbasket-list-toolbar.component';\r\nimport { WorkbasketDetailsComponent } from './components/workbasket-details/workbasket-details.component';\r\nimport { WorkbasketInformationComponent } from './components/workbasket-information/workbasket-information.component';\r\nimport { WorkbasketDistributionTargetsComponent } from './components/workbasket-distribution-targets/workbasket-distribution-targets.component';\r\nimport { WorkbasketDistributionTargetsListComponent } from './components/workbasket-distribution-targets-list/workbasket-distribution-targets-list.component';\r\nimport { WorkbasketAccessItemsComponent } from './components/workbasket-access-items/workbasket-access-items.component';\r\nimport { ClassificationListComponent } from './components/classification-list/classification-list.component';\r\nimport { ClassificationDetailsComponent } from './components/classification-details/classification-details.component';\r\nimport { ImportExportComponent } from './components/import-export/import-export.component';\r\nimport { AdministrationOverviewComponent } from './components/administration-overview/administration-overview.component';\r\n\r\nimport { ClassificationOverviewComponent } from './components/classification-overview/classification-overview.component';\r\nimport { WorkbasketOverviewComponent } from './components/workbasket-overview/workbasket-overview.component';\r\n/**\r\n * Services\r\n */\r\nimport { ClassificationDefinitionService } from './services/classification-definition.service';\r\nimport { WorkbasketDefinitionService } from './services/workbasket-definition.service';\r\nimport { ImportExportService } from './services/import-export.service';\r\n\r\n/**\r\n * Material Design\r\n */\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { ScrollingModule } from '@angular/cdk/scrolling';\r\n\r\nconst MODULES = [\r\n  CommonModule,\r\n  FormsModule,\r\n  ReactiveFormsModule,\r\n  AngularSvgIconModule,\r\n  AlertModule,\r\n  SharedModule,\r\n  AdministrationRoutingModule,\r\n  TypeaheadModule,\r\n  InfiniteScrollModule,\r\n  ScrollingModule\r\n];\r\n\r\nconst DECLARATIONS = [\r\n  WorkbasketOverviewComponent,\r\n  WorkbasketListComponent,\r\n  WorkbasketListToolbarComponent,\r\n  WorkbasketAccessItemsComponent,\r\n  WorkbasketDetailsComponent,\r\n  WorkbasketInformationComponent,\r\n  WorkbasketDistributionTargetsComponent,\r\n  WorkbasketDistributionTargetsListComponent,\r\n  ClassificationOverviewComponent,\r\n  ClassificationListComponent,\r\n  ClassificationTypesSelectorComponent,\r\n  ClassificationDetailsComponent,\r\n  ImportExportComponent,\r\n  AccessItemsManagementComponent,\r\n  AdministrationOverviewComponent\r\n];\r\n\r\n@NgModule({\r\n  declarations: DECLARATIONS,\r\n  imports: [\r\n    MODULES,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatTabsModule,\r\n    MatInputModule,\r\n    MatTooltipModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatProgressBarModule,\r\n    MatToolbarModule,\r\n    MatCheckboxModule,\r\n    MatRippleModule,\r\n    MatTableModule,\r\n    MatDialogModule,\r\n    MatExpansionModule\r\n  ],\r\n  providers: [\r\n    ClassificationDefinitionService,\r\n    WorkbasketDefinitionService,\r\n    ClassificationCategoriesService,\r\n    ImportExportService\r\n  ]\r\n})\r\nexport class AdministrationModule {}\r\n","(function(a,b){if(\"function\"==typeof define&&define.amd)define([],b);else if(\"undefined\"!=typeof exports)b();else{b(),a.FileSaver={exports:{}}.exports}})(this,function(){\"use strict\";function b(a,b){return\"undefined\"==typeof b?b={autoBom:!1}:\"object\"!=typeof b&&(console.warn(\"Deprecated: Expected third argument to be a object\"),b={autoBom:!b}),b.autoBom&&/^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(a.type)?new Blob([\"\\uFEFF\",a],{type:a.type}):a}function c(a,b,c){var d=new XMLHttpRequest;d.open(\"GET\",a),d.responseType=\"blob\",d.onload=function(){g(d.response,b,c)},d.onerror=function(){console.error(\"could not download file\")},d.send()}function d(a){var b=new XMLHttpRequest;b.open(\"HEAD\",a,!1);try{b.send()}catch(a){}return 200<=b.status&&299>=b.status}function e(a){try{a.dispatchEvent(new MouseEvent(\"click\"))}catch(c){var b=document.createEvent(\"MouseEvents\");b.initMouseEvent(\"click\",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),a.dispatchEvent(b)}}var f=\"object\"==typeof window&&window.window===window?window:\"object\"==typeof self&&self.self===self?self:\"object\"==typeof global&&global.global===global?global:void 0,a=f.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),g=f.saveAs||(\"object\"!=typeof window||window!==f?function(){}:\"download\"in HTMLAnchorElement.prototype&&!a?function(b,g,h){var i=f.URL||f.webkitURL,j=document.createElement(\"a\");g=g||b.name||\"download\",j.download=g,j.rel=\"noopener\",\"string\"==typeof b?(j.href=b,j.origin===location.origin?e(j):d(j.href)?c(b,g,h):e(j,j.target=\"_blank\")):(j.href=i.createObjectURL(b),setTimeout(function(){i.revokeObjectURL(j.href)},4E4),setTimeout(function(){e(j)},0))}:\"msSaveOrOpenBlob\"in navigator?function(f,g,h){if(g=g||f.name||\"download\",\"string\"!=typeof f)navigator.msSaveOrOpenBlob(b(f,h),g);else if(d(f))c(f,g,h);else{var i=document.createElement(\"a\");i.href=f,i.target=\"_blank\",setTimeout(function(){e(i)})}}:function(b,d,e,g){if(g=g||open(\"\",\"_blank\"),g&&(g.document.title=g.document.body.innerText=\"downloading...\"),\"string\"==typeof b)return c(b,d,e);var h=\"application/octet-stream\"===b.type,i=/constructor/i.test(f.HTMLElement)||f.safari,j=/CriOS\\/[\\d]+/.test(navigator.userAgent);if((j||h&&i||a)&&\"undefined\"!=typeof FileReader){var k=new FileReader;k.onloadend=function(){var a=k.result;a=j?a:a.replace(/^data:[^;]*;/,\"data:attachment/file;\"),g?g.location.href=a:location=a,g=null},k.readAsDataURL(b)}else{var l=f.URL||f.webkitURL,m=l.createObjectURL(b);g?g.location=m:location.href=m,g=null,setTimeout(function(){l.revokeObjectURL(m)},4E4)}});f.saveAs=g.saveAs=g,\"undefined\"!=typeof module&&(module.exports=g)});\n\n"]}