{"version":3,"file":"src_app_settings_settings_module_ts.f3f2704db4da51fb.js","mappings":"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","names":["SettingTypes","i0","$event","ctx_r18","oxw","constructor","store","notificationService","requestInProgressService","this","Subject","ngOnInit","settings$","pipe","takeUntil","destroy$","subscribe","settings","setRequestInProgress","deepCopy","oldSettings","JSON","parse","stringify","onSave","changeLabelColor","invalidMembers","group","schema","member","members","value","key","type","compareWithMin","compareWithMax","length","isValid","min","max","i","push","s","validateSettings","dispatch","SetSettings","showSuccess","showError","color","forEach","Array","from","document","getElementsByClassName","element","style","onReset","onColorChange","getElementById","ngOnDestroy","next","complete","SettingsComponent","selectors","ctx","__decorate","Select","SettingsSelectors","Observable","m","routes","path","component","SettingsRoutingModule","RouterModule","SettingsModule","SettingsService","imports","CommonModule","MatIconModule","MatTooltipModule","MatButtonModule","MatInputModule","FormsModule"],"sourceRoot":"webpack:///","sources":["./src/app/settings/models/settings.ts","./src/app/settings/components/Settings/settings.component.html","./src/app/settings/components/Settings/settings.component.ts","./src/app/settings/components/Settings/settings.validators.ts","./src/app/settings/settings-routing.module.ts","./src/app/settings/settings.module.ts"],"sourcesContent":["import { GroupSetting } from './group-setting';\r\n\r\nexport interface Settings {\r\n  schema: GroupSetting[];\r\n  [setting: string]: any;\r\n}\r\n\r\nexport enum SettingTypes {\r\n  Text = 'text',\r\n  Interval = 'interval',\r\n  Color = 'color',\r\n  Json = 'json'\r\n}\r\n","<div class=\"settings\">\r\n\r\n  <!-- BUTTONS -->\r\n  <div class=\"settings__buttons\">\r\n    <button class=\"settings__button--primary\" mat-button matTooltip=\"Save settings\" (click)=\"onSave()\">\r\n      Save\r\n      <mat-icon class=\"md-20\">save</mat-icon>\r\n    </button>\r\n\r\n    <button class=\"settings__button--secondary\" mat-stroked-button matTooltip=\"Revert changes\" (click)=\"onReset()\">\r\n      Undo changes\r\n      <mat-icon class=\"settings__icon md-20\">restore</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"settings__content\">\r\n    <div *ngFor=\"let group of settings.schema\">\r\n      <h4 class=\"settings__domain-name\"> {{group.displayName}} </h4>\r\n      <div *ngFor=\"let member of group.members\">\r\n\r\n        <!-- STRING -->\r\n        <div *ngIf=\"member.type == settingTypes.Text\" class=\"settings__grid\">\r\n          <div class=\"settings__text\"> {{member.displayName}} </div>\r\n          <mat-form-field appearance=\"outline\" class=\"settings__grid--two-columns\">\r\n            <mat-label class=\"{{member.key}}\">{{member.displayName}}</mat-label>\r\n            <input [(ngModel)]=\"settings[member.key]\" matInput maxlength=\"{{member.max}}\"\r\n                   minlength=\"{{member.min}}\"\r\n                   placeholder=\"{{member.displayName}}\"\r\n                   type=\"text\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n        <!-- INTERVAL -->\r\n        <div *ngIf=\"member.type == settingTypes.Interval\" class=\"settings__grid\">\r\n          <div class=\"settings__text\">{{member.displayName}}</div>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label class=\"{{member.key}}\">Lower boundary</mat-label>\r\n            <input [(ngModel)]=\"settings[member.key][0]\" matInput max=\"{{member.max}}\"\r\n                   min=\"{{member.min}}\"\r\n                   placeholder=\"Lower boundary\" type=\"number\">\r\n          </mat-form-field>\r\n\r\n          <mat-form-field appearance=\"outline\">\r\n            <mat-label class=\"{{member}}\">Upper boundary</mat-label>\r\n            <input [(ngModel)]=\"settings[member.key][1]\" matInput max=\"{{member.max}}\"\r\n                   min=\"{{member.min}}\"\r\n                   placeholder=\"Upper boundary\" type=\"number\">\r\n          </mat-form-field>\r\n        </div>\r\n\r\n\r\n        <!-- COLOR -->\r\n        <div *ngIf=\"member.type == settingTypes.Color\"\r\n             class=\"settings__grid settings__color\">\r\n          <div class=\"settings__text\">{{member.displayName}}</div>\r\n          <input (change)=\"onColorChange(member.key)\" class=\"settings__colors--input\"\r\n                 id=\"{{member.key}}\" matInput\r\n                 type=\"color\" value=\"{{settings[member.key]}}\">\r\n        </div>\r\n\r\n        <!-- JSON -->\r\n        <div *ngIf=\"member.type == settingTypes.Json\" class=\"settings__grid\">\r\n          <div class=\"settings__text\">{{member.displayName}}</div>\r\n          <mat-form-field appearance=\"outline\" class=\"settings__grid--two-columns\">\r\n            <mat-label class=\"{{member.key}}\">\r\n              {{member.displayName}}\r\n            </mat-label>\r\n            <textarea [(ngModel)]=\"settings[member.key]\" cdkAutosizeMaxRows=\"10\"\r\n                      cdkAutosizeMinRows=\"1\"\r\n                      cdkTextareaAutosize\r\n                      matInput\r\n                      placeholder=\"{{member.displayName}}\"></textarea>\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"settings__spacer\"></div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Settings, SettingTypes } from '../../models/settings';\r\nimport { Select, Store } from '@ngxs/store';\r\nimport { NotificationService } from '../../../shared/services/notifications/notification.service';\r\nimport { SetSettings } from '../../../shared/store/settings-store/settings.actions';\r\nimport { SettingsSelectors } from '../../../shared/store/settings-store/settings.selectors';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { validateSettings } from './settings.validators';\r\nimport { RequestInProgressService } from '../../../shared/services/request-in-progress/request-in-progress.service';\r\n\r\n@Component({\r\n  selector: 'taskana-administration-settings',\r\n  templateUrl: './settings.component.html',\r\n  styleUrls: ['./settings.component.scss']\r\n})\r\nexport class SettingsComponent implements OnInit, OnDestroy {\r\n  settingTypes = SettingTypes;\r\n  settings: Settings;\r\n  oldSettings: Settings;\r\n  invalidMembers: string[] = [];\r\n  destroy$ = new Subject<void>();\r\n\r\n  @Select(SettingsSelectors.getSettings) settings$: Observable<Settings>;\r\n\r\n  constructor(\r\n    private store: Store,\r\n    private notificationService: NotificationService,\r\n    private requestInProgressService: RequestInProgressService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.settings$.pipe(takeUntil(this.destroy$)).subscribe((settings) => {\r\n      this.requestInProgressService.setRequestInProgress(false);\r\n      this.settings = this.deepCopy(settings);\r\n      this.oldSettings = this.deepCopy(settings);\r\n    });\r\n  }\r\n\r\n  deepCopy(settings: Settings): Settings {\r\n    return JSON.parse(JSON.stringify(settings));\r\n  }\r\n\r\n  onSave() {\r\n    this.changeLabelColor('grey');\r\n    this.invalidMembers = validateSettings(this.settings);\r\n    if (this.invalidMembers.length === 0) {\r\n      this.store.dispatch(new SetSettings(this.settings)).subscribe(() => {\r\n        this.notificationService.showSuccess('SETTINGS_SAVE');\r\n      });\r\n    } else {\r\n      this.changeLabelColor('red');\r\n      this.notificationService.showError('SETTINGS_SAVE');\r\n    }\r\n  }\r\n\r\n  changeLabelColor(color: string) {\r\n    this.invalidMembers.forEach((member) => {\r\n      const elements = Array.from(document.getElementsByClassName(member));\r\n      elements.forEach((element) => {\r\n        (element as HTMLElement).style.color = color;\r\n      });\r\n    });\r\n  }\r\n\r\n  onReset() {\r\n    this.changeLabelColor('grey');\r\n    this.settings = this.deepCopy(this.oldSettings);\r\n  }\r\n\r\n  onColorChange(key: string) {\r\n    this.settings[key] = (document.getElementById(key) as HTMLInputElement).value;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n","import { Settings, SettingTypes } from '../../models/settings';\r\n\r\nexport const validateSettings = (settings: Settings): string[] => {\r\n  const invalidMembers = [];\r\n\r\n  for (let group of settings.schema) {\r\n    for (let member of group.members) {\r\n      const value = settings[member.key];\r\n\r\n      if (member.type == SettingTypes.Text || member.type == SettingTypes.Interval) {\r\n        let compareWithMin;\r\n        let compareWithMax;\r\n        switch (member.type) {\r\n          case SettingTypes.Text:\r\n            compareWithMin = value.length;\r\n            compareWithMax = value.length;\r\n            break;\r\n          case SettingTypes.Interval:\r\n            compareWithMin = value[0];\r\n            compareWithMax = value[1];\r\n            break;\r\n        }\r\n\r\n        let isValid = true;\r\n        if ((member.min || member.min == 0) && member.max) {\r\n          isValid = compareWithMin >= member.min && compareWithMax <= member.max;\r\n        } else if (member.min || member.min == 0) {\r\n          isValid = compareWithMin >= member.min;\r\n        } else if (member.max) {\r\n          isValid = compareWithMax <= member.max;\r\n        }\r\n\r\n        if (!isValid) {\r\n          invalidMembers.push(member.key);\r\n        }\r\n\r\n        if (member.type == SettingTypes.Interval && compareWithMin > compareWithMax) {\r\n          invalidMembers.push(member.key);\r\n        }\r\n      }\r\n\r\n      if (member.type == SettingTypes.Json) {\r\n        try {\r\n          JSON.parse(value);\r\n        } catch {\r\n          invalidMembers.push(member.key);\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return invalidMembers;\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { SettingsComponent } from './components/Settings/settings.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: SettingsComponent\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class SettingsRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SettingsComponent } from './components/Settings/settings.component';\r\nimport { SettingsRoutingModule } from './settings-routing.module';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SettingsService } from './services/settings-service';\r\n\r\n@NgModule({\r\n  declarations: [SettingsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SettingsRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatInputModule,\r\n    FormsModule\r\n  ],\r\n  providers: [SettingsService]\r\n})\r\nexport class SettingsModule {}\r\n"]}